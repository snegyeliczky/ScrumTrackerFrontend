{"ast":null,"code":"var _jsxFileName = \"/Users/sandornegyeliczky/Desktop/projektek/ScrumTrackerFrontend/frontend/src/components/ProjectComponents/Task.js\";\nimport React, { useState, useRef, useContext, useEffect } from 'react';\nimport Column from \"./Column\";\nimport { DeleteOutlined, ApiOutlined } from \"@ant-design/icons\";\nimport { ContentContainer } from \"../../Assets/StyledComps/styled\";\nimport TaskModal from \"../TaskModal\";\nimport axios from \"axios\";\nimport TaskCalls from \"../../Services/TaskCalls\";\n\nconst Task = ({\n  task,\n  statusId,\n  onDragEnd,\n  dragItem,\n  handleDeleteTask,\n  refreshStatusesFromBackend,\n  usersOnProject\n}) => {\n  const [thisTask, setTask] = useState(task);\n  const [dragging, setDragging] = useState(false);\n\n  const handleDrag = e => {\n    let dragItemParams = {\n      statusId: statusId,\n      taskObject: task\n    };\n    dragItem.current = dragItemParams;\n    setTimeout(() => {\n      setDragging(true);\n    }, 0);\n  };\n\n  const draggingStyle = currTaskId => {\n    return currTaskId === dragItem.current.taskObject.id ? \"dragged task_card\" : \"task_card\";\n  };\n\n  console.log(usersOnProject);\n\n  const handleDragEnd = e => {\n    onDragEnd(task);\n    setDragging(false);\n    dragItem.current = null;\n  };\n\n  async function archiveTask(e) {\n    e.stopPropagation();\n    await TaskCalls.archiveTask(task.id);\n    refreshStatusesFromBackend();\n  }\n\n  const deleteTask = () => {\n    handleDeleteTask(task.id);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: dragging ? draggingStyle(task.id) : \"task_card\",\n    draggable: true,\n    \"aria-dropeffect\": \"none\",\n    onDragStart: event => handleDrag(event),\n    onDragEnd: e => handleDragEnd(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"status_tool_container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(DeleteOutlined, {\n    onClick: deleteTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(TaskModal, {\n    task: thisTask,\n    setTask: setTask,\n    refreshStatusesFromBackend: refreshStatusesFromBackend,\n    usersOnProject: usersOnProject,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"none\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ApiOutlined, {\n    onClick: e => archiveTask(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"project_title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, thisTask.title), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"businessValue\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, \"Priority: \", thisTask.priority));\n};\n\nexport default Task;","map":{"version":3,"sources":["/Users/sandornegyeliczky/Desktop/projektek/ScrumTrackerFrontend/frontend/src/components/ProjectComponents/Task.js"],"names":["React","useState","useRef","useContext","useEffect","Column","DeleteOutlined","ApiOutlined","ContentContainer","TaskModal","axios","TaskCalls","Task","task","statusId","onDragEnd","dragItem","handleDeleteTask","refreshStatusesFromBackend","usersOnProject","thisTask","setTask","dragging","setDragging","handleDrag","e","dragItemParams","taskObject","current","setTimeout","draggingStyle","currTaskId","id","console","log","handleDragEnd","archiveTask","stopPropagation","deleteTask","event","display","title","priority"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,MAAzB,EAAiCC,UAAjC,EAA6CC,SAA7C,QAA6D,OAA7D;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAAQC,cAAR,EAAwBC,WAAxB,QAA0C,mBAA1C;AACA,SAAQC,gBAAR,QAA+B,iCAA/B;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;;AAGA,MAAMC,IAAI,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAOC,EAAAA,QAAP;AAAiBC,EAAAA,SAAjB;AAA4BC,EAAAA,QAA5B;AAAsCC,EAAAA,gBAAtC;AAAuDC,EAAAA,0BAAvD;AAAmFC,EAAAA;AAAnF,CAAD,KAAwG;AAEjH,QAAM,CAACC,QAAD,EAAWC,OAAX,IAAsBpB,QAAQ,CAACY,IAAD,CAApC;AACA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0BtB,QAAQ,CAAC,KAAD,CAAxC;;AAGA,QAAMuB,UAAU,GAAIC,CAAD,IAAO;AACtB,QAAIC,cAAc,GAAG;AACjBZ,MAAAA,QAAQ,EAAEA,QADO;AAEjBa,MAAAA,UAAU,EAAEd;AAFK,KAArB;AAIAG,IAAAA,QAAQ,CAACY,OAAT,GAAmBF,cAAnB;AACAG,IAAAA,UAAU,CAAC,MAAM;AACbN,MAAAA,WAAW,CAAC,IAAD,CAAX;AACH,KAFS,EAEP,CAFO,CAAV;AAGH,GATD;;AAWA,QAAMO,aAAa,GAAIC,UAAD,IAAgB;AAClC,WAAOA,UAAU,KAAKf,QAAQ,CAACY,OAAT,CAAiBD,UAAjB,CAA4BK,EAA3C,GAAgD,mBAAhD,GAAsE,WAA7E;AACH,GAFD;;AAIAC,EAAAA,OAAO,CAACC,GAAR,CAAYf,cAAZ;;AAEA,QAAMgB,aAAa,GAAIV,CAAD,IAAO;AACzBV,IAAAA,SAAS,CAACF,IAAD,CAAT;AACAU,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAP,IAAAA,QAAQ,CAACY,OAAT,GAAmB,IAAnB;AACH,GAJD;;AAMA,iBAAeQ,WAAf,CAA2BX,CAA3B,EAA8B;AAC1BA,IAAAA,CAAC,CAACY,eAAF;AACA,UAAM1B,SAAS,CAACyB,WAAV,CAAsBvB,IAAI,CAACmB,EAA3B,CAAN;AACAd,IAAAA,0BAA0B;AAC7B;;AAED,QAAMoB,UAAU,GAAG,MAAM;AACrBrB,IAAAA,gBAAgB,CAACJ,IAAI,CAACmB,EAAN,CAAhB;AACH,GAFD;;AAIA,sBACI;AAAK,IAAA,SAAS,EAAEV,QAAQ,GAAGQ,aAAa,CAACjB,IAAI,CAACmB,EAAN,CAAhB,GAA4B,WAApD;AACK,IAAA,SAAS,EAAE,IADhB;AAEK,uBAAiB,MAFtB;AAGK,IAAA,WAAW,EAAGO,KAAD,IAAYf,UAAU,CAACe,KAAD,CAHxC;AAIK,IAAA,SAAS,EAAGd,CAAD,IAAOU,aAAa,CAACV,CAAD,CAJpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAMI;AAAK,IAAA,SAAS,EAAE,uBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,cAAD;AAAgB,IAAA,OAAO,EAAEa,UAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,eAII,oBAAC,SAAD;AACI,IAAA,IAAI,EAAElB,QADV;AAEI,IAAA,OAAO,EAAEC,OAFb;AAGI,IAAA,0BAA0B,EAAEH,0BAHhC;AAII,IAAA,cAAc,EAAEC,cAJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,eAUI;AAAK,IAAA,KAAK,EAAE;AAACqB,MAAAA,OAAO,EAAC;AAAT,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,WAAD;AAAa,IAAA,OAAO,EAAGf,CAAD,IAAKW,WAAW,CAACX,CAAD,CAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAVJ,CANJ,eAoBI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgCL,QAAQ,CAACqB,KAAzC,CApBJ,eAqBI;AAAK,IAAA,SAAS,EAAE,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA4CrB,QAAQ,CAACsB,QAArD,CArBJ,CADJ;AAyBH,CAhED;;AAkEA,eAAe9B,IAAf","sourcesContent":["import React, {useState, useRef, useContext, useEffect} from 'react';\nimport Column from \"./Column\";\nimport {DeleteOutlined, ApiOutlined} from \"@ant-design/icons\";\nimport {ContentContainer} from \"../../Assets/StyledComps/styled\";\nimport TaskModal from \"../TaskModal\";\nimport axios from \"axios\";\nimport TaskCalls from \"../../Services/TaskCalls\";\n\n\nconst Task = ({task, statusId, onDragEnd, dragItem, handleDeleteTask,refreshStatusesFromBackend, usersOnProject}) => {\n\n    const [thisTask, setTask] = useState(task);\n    const [dragging, setDragging] = useState(false);\n\n\n    const handleDrag = (e) => {\n        let dragItemParams = {\n            statusId: statusId,\n            taskObject: task\n        };\n        dragItem.current = dragItemParams;\n        setTimeout(() => {\n            setDragging(true);\n        }, 0)\n    };\n\n    const draggingStyle = (currTaskId) => {\n        return currTaskId === dragItem.current.taskObject.id ? \"dragged task_card\" : \"task_card\";\n    };\n\n    console.log(usersOnProject);\n\n    const handleDragEnd = (e) => {\n        onDragEnd(task);\n        setDragging(false);\n        dragItem.current = null;\n    };\n\n    async function archiveTask(e) {\n        e.stopPropagation();\n        await TaskCalls.archiveTask(task.id);\n        refreshStatusesFromBackend();\n    }\n\n    const deleteTask = () => {\n        handleDeleteTask(task.id)\n    };\n\n    return (\n        <div className={dragging ? draggingStyle(task.id) : \"task_card\"}\n             draggable={true}\n             aria-dropeffect={\"none\"}\n             onDragStart={(event) => (handleDrag(event))}\n             onDragEnd={(e) => handleDragEnd(e)}\n        >\n            <div className={\"status_tool_container\"}>\n                <div>\n                    <DeleteOutlined onClick={deleteTask}/>\n                </div>\n                <TaskModal\n                    task={thisTask}\n                    setTask={setTask}\n                    refreshStatusesFromBackend={refreshStatusesFromBackend}\n                    usersOnProject={usersOnProject}\n                />\n                <div style={{display:\"none\"}}>\n                    <ApiOutlined onClick={(e)=>archiveTask(e)}/>\n                </div>\n            </div>\n            <div className=\"project_title\">{thisTask.title}</div>\n            <div className={\"businessValue\"}>Priority: {thisTask.priority}</div>\n        </div>\n    );\n};\n\nexport default Task;"]},"metadata":{},"sourceType":"module"}