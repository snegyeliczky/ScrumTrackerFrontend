{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = literalTemplate;\n\nvar _options = require(\"./options\");\n\nvar _parse = _interopRequireDefault(require(\"./parse\"));\n\nvar _populate = _interopRequireDefault(require(\"./populate\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction literalTemplate(formatter, tpl, opts) {\n  const {\n    metadata,\n    names\n  } = buildLiteralData(formatter, tpl, opts);\n  return arg => {\n    const defaultReplacements = arg.reduce((acc, replacement, i) => {\n      acc[names[i]] = replacement;\n      return acc;\n    }, {});\n    return arg => {\n      const replacements = (0, _options.normalizeReplacements)(arg);\n\n      if (replacements) {\n        Object.keys(replacements).forEach(key => {\n          if (Object.prototype.hasOwnProperty.call(defaultReplacements, key)) {\n            throw new Error(\"Unexpected replacement overlap.\");\n          }\n        });\n      }\n\n      return formatter.unwrap((0, _populate.default)(metadata, replacements ? Object.assign(replacements, defaultReplacements) : defaultReplacements));\n    };\n  };\n}\n\nfunction buildLiteralData(formatter, tpl, opts) {\n  let names;\n  let nameSet;\n  let metadata;\n  let prefix = \"\";\n\n  do {\n    prefix += \"$\";\n    const result = buildTemplateCode(tpl, prefix);\n    names = result.names;\n    nameSet = new Set(names);\n    metadata = (0, _parse.default)(formatter, formatter.code(result.code), {\n      parser: opts.parser,\n      placeholderWhitelist: new Set(result.names.concat(opts.placeholderWhitelist ? Array.from(opts.placeholderWhitelist) : [])),\n      placeholderPattern: opts.placeholderPattern,\n      preserveComments: opts.preserveComments,\n      syntacticPlaceholders: opts.syntacticPlaceholders\n    });\n  } while (metadata.placeholders.some(placeholder => placeholder.isDuplicate && nameSet.has(placeholder.name)));\n\n  return {\n    metadata,\n    names\n  };\n}\n\nfunction buildTemplateCode(tpl, prefix) {\n  const names = [];\n  let code = tpl[0];\n\n  for (let i = 1; i < tpl.length; i++) {\n    const value = `${prefix}${i - 1}`;\n    names.push(value);\n    code += value + tpl[i];\n  }\n\n  return {\n    names,\n    code\n  };\n}","map":{"version":3,"sources":["/Users/sandornegyeliczky/Desktop/projektek/ScrumTrackerFrontend/frontend/node_modules/@babel/template/lib/literal.js"],"names":["Object","defineProperty","exports","value","default","literalTemplate","_options","require","_parse","_interopRequireDefault","_populate","obj","__esModule","formatter","tpl","opts","metadata","names","buildLiteralData","arg","defaultReplacements","reduce","acc","replacement","i","replacements","normalizeReplacements","keys","forEach","key","prototype","hasOwnProperty","call","Error","unwrap","assign","nameSet","prefix","result","buildTemplateCode","Set","code","parser","placeholderWhitelist","concat","Array","from","placeholderPattern","preserveComments","syntacticPlaceholders","placeholders","some","placeholder","isDuplicate","has","name","length","push"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = literalTemplate;\n\nvar _options = require(\"./options\");\n\nvar _parse = _interopRequireDefault(require(\"./parse\"));\n\nvar _populate = _interopRequireDefault(require(\"./populate\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction literalTemplate(formatter, tpl, opts) {\n  const {\n    metadata,\n    names\n  } = buildLiteralData(formatter, tpl, opts);\n  return arg => {\n    const defaultReplacements = arg.reduce((acc, replacement, i) => {\n      acc[names[i]] = replacement;\n      return acc;\n    }, {});\n    return arg => {\n      const replacements = (0, _options.normalizeReplacements)(arg);\n\n      if (replacements) {\n        Object.keys(replacements).forEach(key => {\n          if (Object.prototype.hasOwnProperty.call(defaultReplacements, key)) {\n            throw new Error(\"Unexpected replacement overlap.\");\n          }\n        });\n      }\n\n      return formatter.unwrap((0, _populate.default)(metadata, replacements ? Object.assign(replacements, defaultReplacements) : defaultReplacements));\n    };\n  };\n}\n\nfunction buildLiteralData(formatter, tpl, opts) {\n  let names;\n  let nameSet;\n  let metadata;\n  let prefix = \"\";\n\n  do {\n    prefix += \"$\";\n    const result = buildTemplateCode(tpl, prefix);\n    names = result.names;\n    nameSet = new Set(names);\n    metadata = (0, _parse.default)(formatter, formatter.code(result.code), {\n      parser: opts.parser,\n      placeholderWhitelist: new Set(result.names.concat(opts.placeholderWhitelist ? Array.from(opts.placeholderWhitelist) : [])),\n      placeholderPattern: opts.placeholderPattern,\n      preserveComments: opts.preserveComments,\n      syntacticPlaceholders: opts.syntacticPlaceholders\n    });\n  } while (metadata.placeholders.some(placeholder => placeholder.isDuplicate && nameSet.has(placeholder.name)));\n\n  return {\n    metadata,\n    names\n  };\n}\n\nfunction buildTemplateCode(tpl, prefix) {\n  const names = [];\n  let code = tpl[0];\n\n  for (let i = 1; i < tpl.length; i++) {\n    const value = `${prefix}${i - 1}`;\n    names.push(value);\n    code += value + tpl[i];\n  }\n\n  return {\n    names,\n    code\n  };\n}"]},"metadata":{},"sourceType":"script"}