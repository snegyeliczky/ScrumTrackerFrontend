{"ast":null,"code":"var _jsxFileName = \"/Users/sandornegyeliczky/Desktop/projektek/ScrumTrackerFrontend/frontend/src/components/ProjectComponents/Task.js\";\nimport React, { useState, useRef, useContext, useEffect } from 'react';\nimport { DeleteOutlined, ApiOutlined, AlertTwoTone, SmileTwoTone, LikeOutlined } from \"@ant-design/icons\";\nimport { ContentContainer } from \"../../Assets/StyledComps/styled\";\nimport TaskModal from \"../TaskModal\";\nimport TaskCalls from \"../../Services/TaskCalls\";\n\nconst Task = ({\n  task,\n  statusId,\n  onDragEnd,\n  dragItem,\n  handleDeleteTask,\n  refreshStatusesFromBackend,\n  usersOnProject,\n  statusFlag,\n  projectAuthor\n}) => {\n  var _task$owner$username, _task$owner;\n\n  const [thisTask, setTask] = useState(task);\n  const [dragging, setDragging] = useState(false);\n  const visualDateFormat = {\n    month: 'long',\n    day: 'numeric'\n  };\n\n  const handleDrag = e => {\n    let dragItemParams = {\n      statusId: statusId,\n      taskObject: task\n    };\n    dragItem.current = dragItemParams;\n    setTimeout(() => {\n      setDragging(true);\n    }, 0);\n  };\n\n  const draggingStyle = currTaskId => {\n    return currTaskId === dragItem.current.taskObject.id ? \"dragged task_card\" : \"task_card\";\n  };\n\n  const handleDragEnd = e => {\n    onDragEnd(task);\n    setDragging(false);\n    dragItem.current = null;\n  };\n\n  async function acceptTask(e) {\n    e.stopPropagation();\n    await TaskCalls.acceptTask(task.id);\n    refreshStatusesFromBackend();\n  }\n\n  const deleteTask = () => {\n    handleDeleteTask(task.id);\n  };\n\n  const backgroundIfMyTask = {\n    backgroundColor: localStorage.getItem(\"username\") === ((_task$owner$username = (_task$owner = task.owner) === null || _task$owner === void 0 ? void 0 : _task$owner.username) !== null && _task$owner$username !== void 0 ? _task$owner$username : \"\") ? \"rgba(95, 194, 226,0.8)\" : \"\"\n  };\n\n  function alertColor() {\n    let number = new Date(task.deadline) - new Date();\n\n    if (number < 40000000) {\n      return \"red\";\n    } else if (number < 100000000) {\n      return \"Orange\";\n    } else {\n      return \"\";\n    }\n  }\n\n  ;\n  const showAcceptStyle = {\n    color: task.finished ? \"green\" : \"\"\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: backgroundIfMyTask,\n    className: dragging ? draggingStyle(task.id) : \"task_card\",\n    draggable: true,\n    \"aria-dropeffect\": \"none\",\n    onDragStart: event => handleDrag(event),\n    onDragEnd: e => handleDragEnd(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"status_tool_container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(DeleteOutlined, {\n    onClick: deleteTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(TaskModal, {\n    task: thisTask,\n    setTask: setTask,\n    refreshStatusesFromBackend: refreshStatusesFromBackend,\n    usersOnProject: usersOnProject,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }\n  }), projectAuthor === localStorage.getItem(\"username\") && statusFlag === \"finish\" ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(LikeOutlined, {\n    style: showAcceptStyle,\n    onClick: e => acceptTask(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 29\n    }\n  })) : ''), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"project_title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }, thisTask.title), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task_data_container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"owner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }\n  }, thisTask.owner ? /*#__PURE__*/React.createElement(SmileTwoTone, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 60\n    }\n  }) : ''), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"businessValue\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }\n  }, thisTask.priority > 0 ? \"Pri.: \" + thisTask.priority : ''), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"deadline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }\n  }, thisTask.deadline ? new Intl.DateTimeFormat('en-US', visualDateFormat).format(new Date(thisTask.deadline)) : \"\", \" \", thisTask.deadline ? /*#__PURE__*/React.createElement(AlertTwoTone, {\n    twoToneColor: alertColor(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 42\n    }\n  }) : '')));\n};\n\nexport default Task;","map":{"version":3,"sources":["/Users/sandornegyeliczky/Desktop/projektek/ScrumTrackerFrontend/frontend/src/components/ProjectComponents/Task.js"],"names":["React","useState","useRef","useContext","useEffect","DeleteOutlined","ApiOutlined","AlertTwoTone","SmileTwoTone","LikeOutlined","ContentContainer","TaskModal","TaskCalls","Task","task","statusId","onDragEnd","dragItem","handleDeleteTask","refreshStatusesFromBackend","usersOnProject","statusFlag","projectAuthor","thisTask","setTask","dragging","setDragging","visualDateFormat","month","day","handleDrag","e","dragItemParams","taskObject","current","setTimeout","draggingStyle","currTaskId","id","handleDragEnd","acceptTask","stopPropagation","deleteTask","backgroundIfMyTask","backgroundColor","localStorage","getItem","owner","username","alertColor","number","Date","deadline","showAcceptStyle","color","finished","event","title","priority","Intl","DateTimeFormat","format"],"mappings":"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","sourcesContent":["import React, {useState, useRef, useContext, useEffect} from 'react';\nimport {DeleteOutlined, ApiOutlined, AlertTwoTone, SmileTwoTone,LikeOutlined} from \"@ant-design/icons\";\nimport {ContentContainer} from \"../../Assets/StyledComps/styled\";\nimport TaskModal from \"../TaskModal\";\nimport TaskCalls from \"../../Services/TaskCalls\";\n\nconst Task = ({\n                  task, statusId, onDragEnd, dragItem, handleDeleteTask, refreshStatusesFromBackend,\n                  usersOnProject, statusFlag, projectAuthor\n              }) => {\n\n    const [thisTask, setTask] = useState(task);\n    const [dragging, setDragging] = useState(false);\n\n    const visualDateFormat = {month: 'long', day: 'numeric'};\n\n\n\n    const handleDrag = (e) => {\n        let dragItemParams = {\n            statusId: statusId,\n            taskObject: task\n        };\n        dragItem.current = dragItemParams;\n        setTimeout(() => {\n            setDragging(true);\n        }, 0)\n    };\n\n    const draggingStyle = (currTaskId) => {\n        return currTaskId === dragItem.current.taskObject.id ? \"dragged task_card\" : \"task_card\";\n    };\n\n    const handleDragEnd = (e) => {\n        onDragEnd(task);\n        setDragging(false);\n        dragItem.current = null;\n    };\n\n    async function acceptTask(e) {\n        e.stopPropagation();\n        await TaskCalls.acceptTask(task.id);\n        refreshStatusesFromBackend();\n    }\n\n    const deleteTask = () => {\n        handleDeleteTask(task.id)\n    };\n\n    const backgroundIfMyTask = {\n        backgroundColor: localStorage.getItem(\"username\") === (task.owner?.username ?? \"\") ? \"rgba(95, 194, 226,0.8)\" : \"\"\n    };\n\n    function alertColor() {\n        let number = new Date(task.deadline) - new Date();\n        if (number < 40000000) {\n            return \"red\";\n        } else if (number < 100000000) {\n            return \"Orange\";\n        } else {\n            return \"\";\n        }\n\n    };\n\n    const showAcceptStyle={\n        color: task.finished?\"green\":\"\",\n    };\n\n    return (\n        <div style={backgroundIfMyTask}\n             className={dragging ? draggingStyle(task.id) : \"task_card\"}\n             draggable={true}\n             aria-dropeffect={\"none\"}\n             onDragStart={(event) => (handleDrag(event))}\n             onDragEnd={(e) => handleDragEnd(e)}\n        >\n            <div className={\"status_tool_container\"}>\n                <div>\n                    <DeleteOutlined onClick={deleteTask}/>\n                </div>\n                <TaskModal\n                    task={thisTask}\n                    setTask={setTask}\n                    refreshStatusesFromBackend={refreshStatusesFromBackend}\n                    usersOnProject={usersOnProject}\n                />\n                {\n                    (projectAuthor === localStorage.getItem(\"username\") && statusFlag === \"finish\") ?\n                        <div>\n                            <LikeOutlined style={showAcceptStyle} onClick={(e) => acceptTask(e)}/>\n                        </div>\n                        :\n                        ''\n\n                }\n            </div>\n            <div className=\"project_title\">{thisTask.title}</div>\n            <div className={\"task_data_container\"}>\n                <div className={\"owner\"}>{thisTask.owner ? <SmileTwoTone/> : ''}</div>\n                <div className={\"businessValue\"}>{thisTask.priority > 0 ? \"Pri.: \" + thisTask.priority : ''}</div>\n                <div className={\"deadline\"}>\n                    {thisTask.deadline ? new Intl.DateTimeFormat('en-US', visualDateFormat).format(new Date(thisTask.deadline)) : \"\"}\n                    {\" \"}\n                    {thisTask.deadline ? <AlertTwoTone twoToneColor={alertColor()}/> : ''}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Task;"]},"metadata":{},"sourceType":"module"}