{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getOpposite = getOpposite;\nexports.getCompletionRecords = getCompletionRecords;\nexports.getSibling = getSibling;\nexports.getPrevSibling = getPrevSibling;\nexports.getNextSibling = getNextSibling;\nexports.getAllNextSiblings = getAllNextSiblings;\nexports.getAllPrevSiblings = getAllPrevSiblings;\nexports.get = get;\nexports._getKey = _getKey;\nexports._getPattern = _getPattern;\nexports.getBindingIdentifiers = getBindingIdentifiers;\nexports.getOuterBindingIdentifiers = getOuterBindingIdentifiers;\nexports.getBindingIdentifierPaths = getBindingIdentifierPaths;\nexports.getOuterBindingIdentifierPaths = getOuterBindingIdentifierPaths;\n\nvar _index = _interopRequireDefault(require(\"./index\"));\n\nvar t = _interopRequireWildcard(require(\"@babel/types\"));\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function () {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getOpposite() {\n  if (this.key === \"left\") {\n    return this.getSibling(\"right\");\n  } else if (this.key === \"right\") {\n    return this.getSibling(\"left\");\n  }\n}\n\nfunction addCompletionRecords(path, paths) {\n  if (path) return paths.concat(path.getCompletionRecords());\n  return paths;\n}\n\nfunction completionRecordForSwitch(cases, paths) {\n  let isLastCaseWithConsequent = true;\n\n  for (let i = cases.length - 1; i >= 0; i--) {\n    const switchCase = cases[i];\n    const consequent = switchCase.get(\"consequent\");\n    let breakStatement;\n\n    findBreak: for (const statement of consequent) {\n      if (statement.isBlockStatement()) {\n        for (const statementInBlock of statement.get(\"body\")) {\n          if (statementInBlock.isBreakStatement()) {\n            breakStatement = statementInBlock;\n            break findBreak;\n          }\n        }\n      } else if (statement.isBreakStatement()) {\n        breakStatement = statement;\n        break;\n      }\n    }\n\n    if (breakStatement) {\n      while (breakStatement.key === 0 && breakStatement.parentPath.isBlockStatement()) {\n        breakStatement = breakStatement.parentPath;\n      }\n\n      const prevSibling = breakStatement.getPrevSibling();\n\n      if (breakStatement.key > 0 && (prevSibling.isExpressionStatement() || prevSibling.isBlockStatement())) {\n        paths = addCompletionRecords(prevSibling, paths);\n        breakStatement.remove();\n      } else {\n        breakStatement.replaceWith(breakStatement.scope.buildUndefinedNode());\n        paths = addCompletionRecords(breakStatement, paths);\n      }\n    } else if (isLastCaseWithConsequent) {\n      const statementFinder = statement => !statement.isBlockStatement() || statement.get(\"body\").some(statementFinder);\n\n      const hasConsequent = consequent.some(statementFinder);\n\n      if (hasConsequent) {\n        paths = addCompletionRecords(consequent[consequent.length - 1], paths);\n        isLastCaseWithConsequent = false;\n      }\n    }\n  }\n\n  return paths;\n}\n\nfunction getCompletionRecords() {\n  let paths = [];\n\n  if (this.isIfStatement()) {\n    paths = addCompletionRecords(this.get(\"consequent\"), paths);\n    paths = addCompletionRecords(this.get(\"alternate\"), paths);\n  } else if (this.isDoExpression() || this.isFor() || this.isWhile()) {\n    paths = addCompletionRecords(this.get(\"body\"), paths);\n  } else if (this.isProgram() || this.isBlockStatement()) {\n    paths = addCompletionRecords(this.get(\"body\").pop(), paths);\n  } else if (this.isFunction()) {\n    return this.get(\"body\").getCompletionRecords();\n  } else if (this.isTryStatement()) {\n    paths = addCompletionRecords(this.get(\"block\"), paths);\n    paths = addCompletionRecords(this.get(\"handler\"), paths);\n  } else if (this.isCatchClause()) {\n    paths = addCompletionRecords(this.get(\"body\"), paths);\n  } else if (this.isSwitchStatement()) {\n    paths = completionRecordForSwitch(this.get(\"cases\"), paths);\n  } else {\n    paths.push(this);\n  }\n\n  return paths;\n}\n\nfunction getSibling(key) {\n  return _index.default.get({\n    parentPath: this.parentPath,\n    parent: this.parent,\n    container: this.container,\n    listKey: this.listKey,\n    key: key\n  });\n}\n\nfunction getPrevSibling() {\n  return this.getSibling(this.key - 1);\n}\n\nfunction getNextSibling() {\n  return this.getSibling(this.key + 1);\n}\n\nfunction getAllNextSiblings() {\n  let _key = this.key;\n  let sibling = this.getSibling(++_key);\n  const siblings = [];\n\n  while (sibling.node) {\n    siblings.push(sibling);\n    sibling = this.getSibling(++_key);\n  }\n\n  return siblings;\n}\n\nfunction getAllPrevSiblings() {\n  let _key = this.key;\n  let sibling = this.getSibling(--_key);\n  const siblings = [];\n\n  while (sibling.node) {\n    siblings.push(sibling);\n    sibling = this.getSibling(--_key);\n  }\n\n  return siblings;\n}\n\nfunction get(key, context) {\n  if (context === true) context = this.context;\n  const parts = key.split(\".\");\n\n  if (parts.length === 1) {\n    return this._getKey(key, context);\n  } else {\n    return this._getPattern(parts, context);\n  }\n}\n\nfunction _getKey(key, context) {\n  const node = this.node;\n  const container = node[key];\n\n  if (Array.isArray(container)) {\n    return container.map((_, i) => {\n      return _index.default.get({\n        listKey: key,\n        parentPath: this,\n        parent: node,\n        container: container,\n        key: i\n      }).setContext(context);\n    });\n  } else {\n    return _index.default.get({\n      parentPath: this,\n      parent: node,\n      container: node,\n      key: key\n    }).setContext(context);\n  }\n}\n\nfunction _getPattern(parts, context) {\n  let path = this;\n\n  for (const part of parts) {\n    if (part === \".\") {\n      path = path.parentPath;\n    } else {\n      if (Array.isArray(path)) {\n        path = path[part];\n      } else {\n        path = path.get(part, context);\n      }\n    }\n  }\n\n  return path;\n}\n\nfunction getBindingIdentifiers(duplicates) {\n  return t.getBindingIdentifiers(this.node, duplicates);\n}\n\nfunction getOuterBindingIdentifiers(duplicates) {\n  return t.getOuterBindingIdentifiers(this.node, duplicates);\n}\n\nfunction getBindingIdentifierPaths(duplicates = false, outerOnly = false) {\n  const path = this;\n  let search = [].concat(path);\n  const ids = Object.create(null);\n\n  while (search.length) {\n    const id = search.shift();\n    if (!id) continue;\n    if (!id.node) continue;\n    const keys = t.getBindingIdentifiers.keys[id.node.type];\n\n    if (id.isIdentifier()) {\n      if (duplicates) {\n        const _ids = ids[id.node.name] = ids[id.node.name] || [];\n\n        _ids.push(id);\n      } else {\n        ids[id.node.name] = id;\n      }\n\n      continue;\n    }\n\n    if (id.isExportDeclaration()) {\n      const declaration = id.get(\"declaration\");\n\n      if (declaration.isDeclaration()) {\n        search.push(declaration);\n      }\n\n      continue;\n    }\n\n    if (outerOnly) {\n      if (id.isFunctionDeclaration()) {\n        search.push(id.get(\"id\"));\n        continue;\n      }\n\n      if (id.isFunctionExpression()) {\n        continue;\n      }\n    }\n\n    if (keys) {\n      for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        const child = id.get(key);\n\n        if (Array.isArray(child) || child.node) {\n          search = search.concat(child);\n        }\n      }\n    }\n  }\n\n  return ids;\n}\n\nfunction getOuterBindingIdentifierPaths(duplicates) {\n  return this.getBindingIdentifierPaths(duplicates, true);\n}","map":{"version":3,"sources":["/Users/sandornegyeliczky/Desktop/projektek/ScrumTrackerFrontend/frontend/node_modules/@babel/traverse/lib/path/family.js"],"names":["Object","defineProperty","exports","value","getOpposite","getCompletionRecords","getSibling","getPrevSibling","getNextSibling","getAllNextSiblings","getAllPrevSiblings","get","_getKey","_getPattern","getBindingIdentifiers","getOuterBindingIdentifiers","getBindingIdentifierPaths","getOuterBindingIdentifierPaths","_index","_interopRequireDefault","require","t","_interopRequireWildcard","_getRequireWildcardCache","WeakMap","cache","obj","__esModule","default","has","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","addCompletionRecords","path","paths","concat","completionRecordForSwitch","cases","isLastCaseWithConsequent","i","length","switchCase","consequent","breakStatement","findBreak","statement","isBlockStatement","statementInBlock","isBreakStatement","parentPath","prevSibling","isExpressionStatement","remove","replaceWith","scope","buildUndefinedNode","statementFinder","some","hasConsequent","isIfStatement","isDoExpression","isFor","isWhile","isProgram","pop","isFunction","isTryStatement","isCatchClause","isSwitchStatement","push","parent","container","listKey","_key","sibling","siblings","node","context","parts","split","Array","isArray","map","_","setContext","part","duplicates","outerOnly","search","ids","create","id","shift","keys","type","isIdentifier","_ids","name","isExportDeclaration","declaration","isDeclaration","isFunctionDeclaration","isFunctionExpression","child"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getOpposite = getOpposite;\nexports.getCompletionRecords = getCompletionRecords;\nexports.getSibling = getSibling;\nexports.getPrevSibling = getPrevSibling;\nexports.getNextSibling = getNextSibling;\nexports.getAllNextSiblings = getAllNextSiblings;\nexports.getAllPrevSiblings = getAllPrevSiblings;\nexports.get = get;\nexports._getKey = _getKey;\nexports._getPattern = _getPattern;\nexports.getBindingIdentifiers = getBindingIdentifiers;\nexports.getOuterBindingIdentifiers = getOuterBindingIdentifiers;\nexports.getBindingIdentifierPaths = getBindingIdentifierPaths;\nexports.getOuterBindingIdentifierPaths = getOuterBindingIdentifierPaths;\n\nvar _index = _interopRequireDefault(require(\"./index\"));\n\nvar t = _interopRequireWildcard(require(\"@babel/types\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction getOpposite() {\n  if (this.key === \"left\") {\n    return this.getSibling(\"right\");\n  } else if (this.key === \"right\") {\n    return this.getSibling(\"left\");\n  }\n}\n\nfunction addCompletionRecords(path, paths) {\n  if (path) return paths.concat(path.getCompletionRecords());\n  return paths;\n}\n\nfunction completionRecordForSwitch(cases, paths) {\n  let isLastCaseWithConsequent = true;\n\n  for (let i = cases.length - 1; i >= 0; i--) {\n    const switchCase = cases[i];\n    const consequent = switchCase.get(\"consequent\");\n    let breakStatement;\n\n    findBreak: for (const statement of consequent) {\n      if (statement.isBlockStatement()) {\n        for (const statementInBlock of statement.get(\"body\")) {\n          if (statementInBlock.isBreakStatement()) {\n            breakStatement = statementInBlock;\n            break findBreak;\n          }\n        }\n      } else if (statement.isBreakStatement()) {\n        breakStatement = statement;\n        break;\n      }\n    }\n\n    if (breakStatement) {\n      while (breakStatement.key === 0 && breakStatement.parentPath.isBlockStatement()) {\n        breakStatement = breakStatement.parentPath;\n      }\n\n      const prevSibling = breakStatement.getPrevSibling();\n\n      if (breakStatement.key > 0 && (prevSibling.isExpressionStatement() || prevSibling.isBlockStatement())) {\n        paths = addCompletionRecords(prevSibling, paths);\n        breakStatement.remove();\n      } else {\n        breakStatement.replaceWith(breakStatement.scope.buildUndefinedNode());\n        paths = addCompletionRecords(breakStatement, paths);\n      }\n    } else if (isLastCaseWithConsequent) {\n      const statementFinder = statement => !statement.isBlockStatement() || statement.get(\"body\").some(statementFinder);\n\n      const hasConsequent = consequent.some(statementFinder);\n\n      if (hasConsequent) {\n        paths = addCompletionRecords(consequent[consequent.length - 1], paths);\n        isLastCaseWithConsequent = false;\n      }\n    }\n  }\n\n  return paths;\n}\n\nfunction getCompletionRecords() {\n  let paths = [];\n\n  if (this.isIfStatement()) {\n    paths = addCompletionRecords(this.get(\"consequent\"), paths);\n    paths = addCompletionRecords(this.get(\"alternate\"), paths);\n  } else if (this.isDoExpression() || this.isFor() || this.isWhile()) {\n    paths = addCompletionRecords(this.get(\"body\"), paths);\n  } else if (this.isProgram() || this.isBlockStatement()) {\n    paths = addCompletionRecords(this.get(\"body\").pop(), paths);\n  } else if (this.isFunction()) {\n    return this.get(\"body\").getCompletionRecords();\n  } else if (this.isTryStatement()) {\n    paths = addCompletionRecords(this.get(\"block\"), paths);\n    paths = addCompletionRecords(this.get(\"handler\"), paths);\n  } else if (this.isCatchClause()) {\n    paths = addCompletionRecords(this.get(\"body\"), paths);\n  } else if (this.isSwitchStatement()) {\n    paths = completionRecordForSwitch(this.get(\"cases\"), paths);\n  } else {\n    paths.push(this);\n  }\n\n  return paths;\n}\n\nfunction getSibling(key) {\n  return _index.default.get({\n    parentPath: this.parentPath,\n    parent: this.parent,\n    container: this.container,\n    listKey: this.listKey,\n    key: key\n  });\n}\n\nfunction getPrevSibling() {\n  return this.getSibling(this.key - 1);\n}\n\nfunction getNextSibling() {\n  return this.getSibling(this.key + 1);\n}\n\nfunction getAllNextSiblings() {\n  let _key = this.key;\n  let sibling = this.getSibling(++_key);\n  const siblings = [];\n\n  while (sibling.node) {\n    siblings.push(sibling);\n    sibling = this.getSibling(++_key);\n  }\n\n  return siblings;\n}\n\nfunction getAllPrevSiblings() {\n  let _key = this.key;\n  let sibling = this.getSibling(--_key);\n  const siblings = [];\n\n  while (sibling.node) {\n    siblings.push(sibling);\n    sibling = this.getSibling(--_key);\n  }\n\n  return siblings;\n}\n\nfunction get(key, context) {\n  if (context === true) context = this.context;\n  const parts = key.split(\".\");\n\n  if (parts.length === 1) {\n    return this._getKey(key, context);\n  } else {\n    return this._getPattern(parts, context);\n  }\n}\n\nfunction _getKey(key, context) {\n  const node = this.node;\n  const container = node[key];\n\n  if (Array.isArray(container)) {\n    return container.map((_, i) => {\n      return _index.default.get({\n        listKey: key,\n        parentPath: this,\n        parent: node,\n        container: container,\n        key: i\n      }).setContext(context);\n    });\n  } else {\n    return _index.default.get({\n      parentPath: this,\n      parent: node,\n      container: node,\n      key: key\n    }).setContext(context);\n  }\n}\n\nfunction _getPattern(parts, context) {\n  let path = this;\n\n  for (const part of parts) {\n    if (part === \".\") {\n      path = path.parentPath;\n    } else {\n      if (Array.isArray(path)) {\n        path = path[part];\n      } else {\n        path = path.get(part, context);\n      }\n    }\n  }\n\n  return path;\n}\n\nfunction getBindingIdentifiers(duplicates) {\n  return t.getBindingIdentifiers(this.node, duplicates);\n}\n\nfunction getOuterBindingIdentifiers(duplicates) {\n  return t.getOuterBindingIdentifiers(this.node, duplicates);\n}\n\nfunction getBindingIdentifierPaths(duplicates = false, outerOnly = false) {\n  const path = this;\n  let search = [].concat(path);\n  const ids = Object.create(null);\n\n  while (search.length) {\n    const id = search.shift();\n    if (!id) continue;\n    if (!id.node) continue;\n    const keys = t.getBindingIdentifiers.keys[id.node.type];\n\n    if (id.isIdentifier()) {\n      if (duplicates) {\n        const _ids = ids[id.node.name] = ids[id.node.name] || [];\n\n        _ids.push(id);\n      } else {\n        ids[id.node.name] = id;\n      }\n\n      continue;\n    }\n\n    if (id.isExportDeclaration()) {\n      const declaration = id.get(\"declaration\");\n\n      if (declaration.isDeclaration()) {\n        search.push(declaration);\n      }\n\n      continue;\n    }\n\n    if (outerOnly) {\n      if (id.isFunctionDeclaration()) {\n        search.push(id.get(\"id\"));\n        continue;\n      }\n\n      if (id.isFunctionExpression()) {\n        continue;\n      }\n    }\n\n    if (keys) {\n      for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        const child = id.get(key);\n\n        if (Array.isArray(child) || child.node) {\n          search = search.concat(child);\n        }\n      }\n    }\n  }\n\n  return ids;\n}\n\nfunction getOuterBindingIdentifierPaths(duplicates) {\n  return this.getBindingIdentifierPaths(duplicates, true);\n}"]},"metadata":{},"sourceType":"script"}