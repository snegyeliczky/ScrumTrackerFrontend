{"ast":null,"code":"var _jsxFileName = \"/Users/sandornegyeliczky/Desktop/projektek/ScrumTrackerFrontend/src/components/InProgressLimitModal.js\";\nimport React, { useContext, useState } from 'react';\nimport 'antd/dist/antd.css';\nimport { FileExcelOutlined } from \"@ant-design/icons\";\nimport { Button, Modal } from \"antd\";\nimport { ContentContainer } from \"../Assets/StyledComps/styled\";\nimport { ProjectContext } from \"../Contexts/ProjectContext\";\nimport ProjectCalls from \"../Services/ProjectCalls\";\n\nconst InProgressLimitModal = ({\n  tableId,\n  getProject,\n  taskLimit\n}) => {\n  const [visible, setVisible] = useState(false);\n  const [limit, setLimit] = useState(\"\");\n  const {\n    showErrorAlert,\n    showSuccessAlert\n  } = useContext(ProjectContext);\n\n  function handleCancel() {\n    setVisible(false);\n  }\n\n  function showModal() {\n    setVisible(true);\n  }\n\n  async function handleSend() {\n    let tableCredentials = {\n      id: tableId,\n      taskLimit: limit\n    };\n\n    try {\n      await ProjectCalls.sendProjectInProgressLimit(tableCredentials);\n      showSuccessAlert(\"Successful new limit is: \" + tableCredentials.taskLimit);\n      setVisible(false);\n    } catch (e) {\n      showErrorAlert(\"ooops, something went wrong, try again\");\n    }\n\n    getProject();\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FileExcelOutlined, {\n    onClick: showModal,\n    style: {\n      fontSize: \"30px\",\n      color: \"#373A55\",\n      paddingLeft: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Modal, {\n    visible: visible,\n    onCancel: handleCancel,\n    footer: null,\n    width: 400,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ContentContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 21\n    }\n  }, \"Limit the in progress task count\")), /*#__PURE__*/React.createElement(ContentContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    placeholder: taskLimit,\n    onChange: event => setLimit(event.target.value),\n    type: \"number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    onClick: handleSend,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 21\n    }\n  }, \"Send\"))));\n};\n\nexport default InProgressLimitModal;","map":{"version":3,"sources":["/Users/sandornegyeliczky/Desktop/projektek/ScrumTrackerFrontend/src/components/InProgressLimitModal.js"],"names":["React","useContext","useState","FileExcelOutlined","Button","Modal","ContentContainer","ProjectContext","ProjectCalls","InProgressLimitModal","tableId","getProject","taskLimit","visible","setVisible","limit","setLimit","showErrorAlert","showSuccessAlert","handleCancel","showModal","handleSend","tableCredentials","id","sendProjectInProgressLimit","e","fontSize","color","paddingLeft","event","target","value"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,QAA3B,QAA0C,OAA1C;AACA,OAAO,oBAAP;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,SAAQC,MAAR,EAAgBC,KAAhB,QAA4B,MAA5B;AACA,SAAQC,gBAAR,QAA+B,8BAA/B;AACA,SAAQC,cAAR,QAA6B,4BAA7B;AACA,OAAOC,YAAP,MAAyB,0BAAzB;;AAEA,MAAMC,oBAAoB,GAAG,CAAC;AAACC,EAAAA,OAAD;AAAUC,EAAAA,UAAV;AAAsBC,EAAAA;AAAtB,CAAD,KAAsC;AAE/D,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACa,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAACe,IAAAA,cAAD;AAAgBC,IAAAA;AAAhB,MAAoCjB,UAAU,CAACM,cAAD,CAApD;;AAEA,WAASY,YAAT,GAAwB;AACpBL,IAAAA,UAAU,CAAC,KAAD,CAAV;AACH;;AAED,WAASM,SAAT,GAAqB;AACjBN,IAAAA,UAAU,CAAC,IAAD,CAAV;AACH;;AAGD,iBAAeO,UAAf,GAA4B;AACxB,QAAIC,gBAAgB,GAAG;AACnBC,MAAAA,EAAE,EAAEb,OADe;AAEnBE,MAAAA,SAAS,EAAEG;AAFQ,KAAvB;;AAIA,QAAI;AACA,YAAMP,YAAY,CAACgB,0BAAb,CAAwCF,gBAAxC,CAAN;AACAJ,MAAAA,gBAAgB,CAAC,8BAA8BI,gBAAgB,CAACV,SAAhD,CAAhB;AACAE,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAJD,CAIE,OAAOW,CAAP,EAAU;AACRR,MAAAA,cAAc,CAAC,wCAAD,CAAd;AACH;;AACDN,IAAAA,UAAU;AACb;;AAED,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,iBAAD;AAAmB,IAAA,OAAO,EAAES,SAA5B;AACc,IAAA,KAAK,EAAE;AACHM,MAAAA,QAAQ,EAAE,MADP;AAEHC,MAAAA,KAAK,EAAE,SAFJ;AAGHC,MAAAA,WAAW,EAAE;AAHV,KADrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAQI,oBAAC,KAAD;AACI,IAAA,OAAO,EAAEf,OADb;AAEI,IAAA,QAAQ,EAAEM,YAFd;AAGI,IAAA,MAAM,EAAE,IAHZ;AAII,IAAA,KAAK,EAAE,GAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAMI,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCADJ,CANJ,eASI,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAO,IAAA,WAAW,EAAEP,SAApB;AACO,IAAA,QAAQ,EAAEiB,KAAK,IAAIb,QAAQ,CAACa,KAAK,CAACC,MAAN,CAAaC,KAAd,CADlC;AAEO,IAAA,IAAI,EAAC,QAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAKI,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEV,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ,CATJ,CARJ,CADJ;AA6BH,CA3DD;;AA6DA,eAAeZ,oBAAf","sourcesContent":["import React, {useContext, useState} from 'react';\nimport 'antd/dist/antd.css';\nimport { FileExcelOutlined } from \"@ant-design/icons\";\nimport {Button, Modal} from \"antd\";\nimport {ContentContainer} from \"../Assets/StyledComps/styled\";\nimport {ProjectContext} from \"../Contexts/ProjectContext\";\nimport ProjectCalls from \"../Services/ProjectCalls\";\n\nconst InProgressLimitModal = ({tableId, getProject, taskLimit}) => {\n\n    const [visible, setVisible] = useState(false);\n    const [limit, setLimit] = useState(\"\");\n    const {showErrorAlert,showSuccessAlert} = useContext(ProjectContext);\n\n    function handleCancel() {\n        setVisible(false);\n    }\n\n    function showModal() {\n        setVisible(true);\n    }\n\n\n    async function handleSend() {\n        let tableCredentials = {\n            id: tableId,\n            taskLimit: limit\n        };\n        try {\n            await ProjectCalls.sendProjectInProgressLimit(tableCredentials);\n            showSuccessAlert(\"Successful new limit is: \" + tableCredentials.taskLimit);\n            setVisible(false);\n        } catch (e) {\n            showErrorAlert(\"ooops, something went wrong, try again\");\n        }\n        getProject();\n    }\n\n    return (\n        <div>\n            <FileExcelOutlined onClick={showModal}\n                          style={{\n                              fontSize: \"30px\",\n                              color: \"#373A55\",\n                              paddingLeft: \"10px\"\n                          }}/>\n\n            <Modal\n                visible={visible}\n                onCancel={handleCancel}\n                footer={null}\n                width={400}\n            >\n                <ContentContainer>\n                    <h2>Limit the in progress task count</h2>\n                </ContentContainer>\n                <ContentContainer>\n                    <input placeholder={taskLimit}\n                           onChange={event => setLimit(event.target.value)}\n                           type=\"number\"\n                    />\n                    <Button onClick={handleSend}>Send</Button>\n                </ContentContainer>\n            </Modal>\n\n        </div>\n    );\n};\n\nexport default InProgressLimitModal;"]},"metadata":{},"sourceType":"module"}