{"ast":null,"code":"var _jsxFileName = \"/Users/sandornegyeliczky/Desktop/projektek/ScrumTrackerFrontend/frontend/src/components/projectPage/ScrumTable.js\";\nimport React, { useState, useContext, useEffect, useRef } from 'react';\nimport Column from \"./Column\";\nimport axios from \"axios\";\nimport { ContentContainer } from \"../styledComps/styled\";\n\nconst ScrumTable = ({\n  table\n}) => {\n  const [statuses, setStatuses] = useState(table.statuses);\n  const [DragItemColumnId, setDragItemColumnId] = useState();\n  const dragItem = useRef(); //dragged task id and status id where it come from\n\n  const deleteStatus = async statusID => {\n    await axios.delete(\"http://localhost:8080/project/deletestatus?statusid=\" + statusID + \"&tableid=\" + table.id);\n    refreshStatusesFromBackend();\n  };\n\n  const refreshStatusesFromBackend = async () => {\n    let axiosResponse = await axios.get(\"http://localhost:8080/project/gettable/\" + table.id);\n    axiosResponse.data.statuses.sort(function (a, b) {\n      return a.position - b.position;\n    });\n    axiosResponse.data.statuses.tasks.sort(function (a, b) {\n      return a.position - b.position;\n    });\n    setStatuses(axiosResponse.data.statuses);\n  };\n\n  const uploadStatusChangeToDatabase = async () => {\n    let refreshItem = {\n      toStatusId: DragItemColumnId,\n      fromStatusId: dragItem.current.statusId,\n      taskId: dragItem.current.taskObject.id\n    };\n    await axios.put(\"http://localhost:8080/task/transfer\", refreshItem);\n  };\n\n  const onDragEnter = newStatusId => {\n    setDragItemColumnId(newStatusId);\n  };\n\n  const onDragEnd = () => {\n    setStatuses(refreshStatus(DragItemColumnId));\n    uploadStatusChangeToDatabase();\n  };\n\n  const refreshStatus = newStatusId => {\n    let newStatuses = [...statuses];\n\n    for (let status of newStatuses) {\n      if (status.id === dragItem.current.statusId) {\n        let taskArr = [...status.tasks];\n        let index = taskArr.indexOf(dragItem.current.taskObject);\n\n        if (index > -1) {\n          taskArr.splice(index, 1);\n        }\n\n        status.tasks = taskArr;\n      }\n\n      if (newStatusId === status.id) {\n        status.tasks.push(dragItem.current.taskObject);\n      }\n    }\n\n    return newStatuses;\n  }; //\n\n\n  return /*#__PURE__*/React.createElement(ContentContainer, {\n    className: \"scrum_table\",\n    onDragOver: e => e.preventDefault(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, statuses.map((status, i) => {\n    let statusFlag = null;\n\n    if (i === 0) {\n      statusFlag = \"start\";\n    }\n\n    if (i === statuses.length - 1) {\n      statusFlag = \"finish\";\n    }\n\n    return /*#__PURE__*/React.createElement(Column, {\n      statusFlag: statusFlag,\n      deleteStatus: deleteStatus,\n      onDragEnd: onDragEnd,\n      dragItem: dragItem,\n      key: status.id,\n      status: status,\n      onDragEnter: onDragEnter,\n      refreshStatusesFromBackend: refreshStatusesFromBackend,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 36\n      }\n    });\n  }));\n};\n\nexport default ScrumTable;","map":{"version":3,"sources":["/Users/sandornegyeliczky/Desktop/projektek/ScrumTrackerFrontend/frontend/src/components/projectPage/ScrumTable.js"],"names":["React","useState","useContext","useEffect","useRef","Column","axios","ContentContainer","ScrumTable","table","statuses","setStatuses","DragItemColumnId","setDragItemColumnId","dragItem","deleteStatus","statusID","delete","id","refreshStatusesFromBackend","axiosResponse","get","data","sort","a","b","position","tasks","uploadStatusChangeToDatabase","refreshItem","toStatusId","fromStatusId","current","statusId","taskId","taskObject","put","onDragEnter","newStatusId","onDragEnd","refreshStatus","newStatuses","status","taskArr","index","indexOf","splice","push","e","preventDefault","map","i","statusFlag","length"],"mappings":"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","sourcesContent":["import React, {useState, useContext, useEffect, useRef} from 'react';\nimport Column from \"./Column\";\nimport axios from \"axios\";\nimport {ContentContainer} from \"../styledComps/styled\"\n\nconst ScrumTable = ({table}) => {\n\n    const [statuses, setStatuses] = useState(table.statuses);\n    const [DragItemColumnId, setDragItemColumnId] = useState();\n    const dragItem = useRef(); //dragged task id and status id where it come from\n\n\n\n\n    const deleteStatus = async (statusID) => {\n        await axios.delete(\"http://localhost:8080/project/deletestatus?statusid=\" + statusID + \"&tableid=\" + table.id);\n        refreshStatusesFromBackend();\n    };\n\n    const refreshStatusesFromBackend = async () =>{\n        let axiosResponse = await axios.get(\"http://localhost:8080/project/gettable/\" + table.id);\n        axiosResponse.data.statuses.sort(function (a, b) {\n            return a.position - b.position;\n        });\n        axiosResponse.data.statuses.tasks.sort(function (a,b) {\n            return a.position -b.position;\n        });\n        setStatuses(axiosResponse.data.statuses);\n    };\n\n    const uploadStatusChangeToDatabase = async () => {\n        let refreshItem = {\n            toStatusId: DragItemColumnId,\n            fromStatusId: dragItem.current.statusId,\n            taskId: dragItem.current.taskObject.id\n        };\n        await axios.put(\"http://localhost:8080/task/transfer\", refreshItem);\n    };\n\n\n    const onDragEnter = (newStatusId) => {\n        setDragItemColumnId(newStatusId);\n    };\n\n    const onDragEnd = () => {\n        setStatuses(refreshStatus(DragItemColumnId));\n        uploadStatusChangeToDatabase();\n    };\n\n\n    const refreshStatus = (newStatusId) => {\n        let newStatuses = [...statuses];\n        for (let status of newStatuses) {\n            if (status.id === dragItem.current.statusId) {\n                let taskArr = [...status.tasks];\n                let index = taskArr.indexOf(dragItem.current.taskObject);\n                if (index > -1) {\n                    taskArr.splice(index, 1)\n                }\n                status.tasks = taskArr\n            }\n            if (newStatusId === status.id) {\n                status.tasks.push(dragItem.current.taskObject)\n            }\n        }\n        return newStatuses;\n    };\n\n    //\n\n    return (\n        <ContentContainer className={\"scrum_table\"}\n        onDragOver={(e)=>e.preventDefault()}>\n             {\n                        statuses.map((status, i) => {\n                            let statusFlag = null;\n\n                            if (i===0){\n                                statusFlag=\"start\";\n                            }\n                            if (i===statuses.length-1){\n                                statusFlag=\"finish\";\n                            }\n\n                            return <Column\n                                statusFlag = {statusFlag}\n                                deleteStatus={deleteStatus}\n                                onDragEnd={onDragEnd}\n                                dragItem={dragItem}\n                                key={status.id}\n                                status={status}\n                                onDragEnter={onDragEnter}\n                                refreshStatusesFromBackend ={refreshStatusesFromBackend}\n                            />\n\n                        })\n                    }\n\n        </ContentContainer>\n    );\n};\n\nexport default ScrumTable;"]},"metadata":{},"sourceType":"module"}