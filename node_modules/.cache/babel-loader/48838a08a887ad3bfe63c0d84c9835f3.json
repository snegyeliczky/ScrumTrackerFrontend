{"ast":null,"code":"var _jsxFileName = \"/Users/sandornegyeliczky/Desktop/projektek/ScrumTrackerFrontend/frontend/src/components/projectPage/Task.js\";\nimport React, { useState, useRef, useContext } from 'react';\nimport Column from \"./Column\";\nimport { DragAndDropContext } from \"../contexts/DragNDropContext\";\n\nconst Task = ({\n  task,\n  statusId,\n  onDragEnter\n}) => {\n  const dragItem = useContext(DragAndDropContext);\n  const dragNodeItem = useContext(DragAndDropContext);\n  const [dragging, setDragging] = useState(false);\n\n  const handleDrag = e => {\n    let dragItemParams = {\n      taskId: task.id,\n      statusId: statusId,\n      taskObject: task\n    };\n    dragItem.current = dragItemParams;\n    dragNodeItem.current = e.target;\n    setTimeout(() => {\n      setDragging(true);\n    }, 0);\n  };\n\n  const draggingStyle = currTaskId => {\n    if (currTaskId === dragItem.current.taskId) {\n      return \"dragged task_card\";\n    }\n\n    return \"task_card\";\n  };\n\n  const handleDragEnd = () => {\n    setDragging(false);\n    dragItem.current = null;\n    dragNodeItem.current = null;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: dragging ? draggingStyle(task.id) : \"task_card\",\n    draggable: true,\n    onDragStart: event => handleDrag(event),\n    onDragEnd: e => handleDragEnd(e),\n    onDragEnter: e => onDragEnter(e, statusId),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, task.title);\n};\n\nexport default Task;","map":{"version":3,"sources":["/Users/sandornegyeliczky/Desktop/projektek/ScrumTrackerFrontend/frontend/src/components/projectPage/Task.js"],"names":["React","useState","useRef","useContext","Column","DragAndDropContext","Task","task","statusId","onDragEnter","dragItem","dragNodeItem","dragging","setDragging","handleDrag","e","dragItemParams","taskId","id","taskObject","current","target","setTimeout","draggingStyle","currTaskId","handleDragEnd","event","title"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,MAAzB,EAAiCC,UAAjC,QAAkD,OAAlD;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAAQC,kBAAR,QAAiC,8BAAjC;;AAGA,MAAMC,IAAI,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAOC,EAAAA,QAAP;AAAiBC,EAAAA;AAAjB,CAAD,KAAoC;AAG7C,QAAMC,QAAQ,GAAGP,UAAU,CAACE,kBAAD,CAA3B;AACA,QAAMM,YAAY,GAAER,UAAU,CAACE,kBAAD,CAA9B;AAEA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,KAAD,CAAxC;;AAEA,QAAMa,UAAU,GAAIC,CAAD,IAAO;AACtB,QAAIC,cAAc,GAAG;AAACC,MAAAA,MAAM,EAAEV,IAAI,CAACW,EAAd;AAAkBV,MAAAA,QAAQ,EAAEA,QAA5B;AAAsCW,MAAAA,UAAU,EAACZ;AAAjD,KAArB;AACAG,IAAAA,QAAQ,CAACU,OAAT,GAAmBJ,cAAnB;AACAL,IAAAA,YAAY,CAACS,OAAb,GAAqBL,CAAC,CAACM,MAAvB;AACAC,IAAAA,UAAU,CAAC,MAAI;AACXT,MAAAA,WAAW,CAAC,IAAD,CAAX;AACH,KAFS,EAER,CAFQ,CAAV;AAGH,GAPD;;AASA,QAAMU,aAAa,GAAIC,UAAD,IAAgB;AAClC,QAAIA,UAAU,KAAKd,QAAQ,CAACU,OAAT,CAAiBH,MAApC,EAA4C;AACxC,aAAO,mBAAP;AACH;;AACD,WAAO,WAAP;AACH,GALD;;AAOA,QAAMQ,aAAa,GAAG,MAAK;AACvBZ,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAH,IAAAA,QAAQ,CAACU,OAAT,GAAiB,IAAjB;AACAT,IAAAA,YAAY,CAACS,OAAb,GAAqB,IAArB;AACH,GAJD;;AAMA,sBACI;AAAK,IAAA,SAAS,EAAER,QAAQ,GAAGW,aAAa,CAAChB,IAAI,CAACW,EAAN,CAAhB,GAA4B,WAApD;AACK,IAAA,SAAS,EAAE,IADhB;AAEK,IAAA,WAAW,EAAGQ,KAAD,IAAYZ,UAAU,CAACY,KAAD,CAFxC;AAGK,IAAA,SAAS,EAAGX,CAAD,IAAMU,aAAa,CAACV,CAAD,CAHnC;AAIK,IAAA,WAAW,EAAGA,CAAD,IAAMN,WAAW,CAACM,CAAD,EAAGP,QAAH,CAJnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKKD,IAAI,CAACoB,KALV,CADJ;AASH,CAvCD;;AAyCA,eAAerB,IAAf","sourcesContent":["import React, {useState, useRef, useContext} from 'react';\nimport Column from \"./Column\";\nimport {DragAndDropContext} from \"../contexts/DragNDropContext\";\n\n\nconst Task = ({task, statusId, onDragEnter }) => {\n\n\n    const dragItem = useContext(DragAndDropContext);\n    const dragNodeItem =useContext(DragAndDropContext);\n\n    const [dragging, setDragging] = useState(false);\n\n    const handleDrag = (e) => {\n        let dragItemParams = {taskId: task.id, statusId: statusId, taskObject:task}\n        dragItem.current = dragItemParams;\n        dragNodeItem.current=e.target;\n        setTimeout(()=>{\n            setDragging(true);\n        },0)\n    };\n\n    const draggingStyle = (currTaskId) => {\n        if (currTaskId === dragItem.current.taskId) {\n            return \"dragged task_card\"\n        }\n        return \"task_card\";\n    };\n\n    const handleDragEnd = () =>{\n        setDragging(false)\n        dragItem.current=null;\n        dragNodeItem.current=null;\n    };\n\n    return (\n        <div className={dragging ? draggingStyle(task.id) : \"task_card\"}\n             draggable={true}\n             onDragStart={(event) => (handleDrag(event))}\n             onDragEnd={(e)=>(handleDragEnd(e))}\n             onDragEnter={(e)=>(onDragEnter(e,statusId))}>\n            {task.title}\n        </div>\n    );\n};\n\nexport default Task;"]},"metadata":{},"sourceType":"module"}