{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TSTypeAnnotation = TSTypeAnnotation;\nexports.TSTypeParameterDeclaration = exports.TSTypeParameterInstantiation = TSTypeParameterInstantiation;\nexports.TSTypeParameter = TSTypeParameter;\nexports.TSParameterProperty = TSParameterProperty;\nexports.TSDeclareFunction = TSDeclareFunction;\nexports.TSDeclareMethod = TSDeclareMethod;\nexports.TSQualifiedName = TSQualifiedName;\nexports.TSCallSignatureDeclaration = TSCallSignatureDeclaration;\nexports.TSConstructSignatureDeclaration = TSConstructSignatureDeclaration;\nexports.TSPropertySignature = TSPropertySignature;\nexports.tsPrintPropertyOrMethodName = tsPrintPropertyOrMethodName;\nexports.TSMethodSignature = TSMethodSignature;\nexports.TSIndexSignature = TSIndexSignature;\nexports.TSAnyKeyword = TSAnyKeyword;\nexports.TSBigIntKeyword = TSBigIntKeyword;\nexports.TSUnknownKeyword = TSUnknownKeyword;\nexports.TSNumberKeyword = TSNumberKeyword;\nexports.TSObjectKeyword = TSObjectKeyword;\nexports.TSBooleanKeyword = TSBooleanKeyword;\nexports.TSStringKeyword = TSStringKeyword;\nexports.TSSymbolKeyword = TSSymbolKeyword;\nexports.TSVoidKeyword = TSVoidKeyword;\nexports.TSUndefinedKeyword = TSUndefinedKeyword;\nexports.TSNullKeyword = TSNullKeyword;\nexports.TSNeverKeyword = TSNeverKeyword;\nexports.TSThisType = TSThisType;\nexports.TSFunctionType = TSFunctionType;\nexports.TSConstructorType = TSConstructorType;\nexports.tsPrintFunctionOrConstructorType = tsPrintFunctionOrConstructorType;\nexports.TSTypeReference = TSTypeReference;\nexports.TSTypePredicate = TSTypePredicate;\nexports.TSTypeQuery = TSTypeQuery;\nexports.TSTypeLiteral = TSTypeLiteral;\nexports.tsPrintTypeLiteralOrInterfaceBody = tsPrintTypeLiteralOrInterfaceBody;\nexports.tsPrintBraced = tsPrintBraced;\nexports.TSArrayType = TSArrayType;\nexports.TSTupleType = TSTupleType;\nexports.TSOptionalType = TSOptionalType;\nexports.TSRestType = TSRestType;\nexports.TSUnionType = TSUnionType;\nexports.TSIntersectionType = TSIntersectionType;\nexports.tsPrintUnionOrIntersectionType = tsPrintUnionOrIntersectionType;\nexports.TSConditionalType = TSConditionalType;\nexports.TSInferType = TSInferType;\nexports.TSParenthesizedType = TSParenthesizedType;\nexports.TSTypeOperator = TSTypeOperator;\nexports.TSIndexedAccessType = TSIndexedAccessType;\nexports.TSMappedType = TSMappedType;\nexports.TSLiteralType = TSLiteralType;\nexports.TSExpressionWithTypeArguments = TSExpressionWithTypeArguments;\nexports.TSInterfaceDeclaration = TSInterfaceDeclaration;\nexports.TSInterfaceBody = TSInterfaceBody;\nexports.TSTypeAliasDeclaration = TSTypeAliasDeclaration;\nexports.TSAsExpression = TSAsExpression;\nexports.TSTypeAssertion = TSTypeAssertion;\nexports.TSEnumDeclaration = TSEnumDeclaration;\nexports.TSEnumMember = TSEnumMember;\nexports.TSModuleDeclaration = TSModuleDeclaration;\nexports.TSModuleBlock = TSModuleBlock;\nexports.TSImportType = TSImportType;\nexports.TSImportEqualsDeclaration = TSImportEqualsDeclaration;\nexports.TSExternalModuleReference = TSExternalModuleReference;\nexports.TSNonNullExpression = TSNonNullExpression;\nexports.TSExportAssignment = TSExportAssignment;\nexports.TSNamespaceExportDeclaration = TSNamespaceExportDeclaration;\nexports.tsPrintSignatureDeclarationBase = tsPrintSignatureDeclarationBase;\nexports.tsPrintClassMemberModifiers = tsPrintClassMemberModifiers;\n\nfunction TSTypeAnnotation(node) {\n  this.token(\":\");\n  this.space();\n  if (node.optional) this.token(\"?\");\n  this.print(node.typeAnnotation, node);\n}\n\nfunction TSTypeParameterInstantiation(node) {\n  this.token(\"<\");\n  this.printList(node.params, node, {});\n  this.token(\">\");\n}\n\nfunction TSTypeParameter(node) {\n  this.word(node.name);\n\n  if (node.constraint) {\n    this.space();\n    this.word(\"extends\");\n    this.space();\n    this.print(node.constraint, node);\n  }\n\n  if (node.default) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.default, node);\n  }\n}\n\nfunction TSParameterProperty(node) {\n  if (node.accessibility) {\n    this.word(node.accessibility);\n    this.space();\n  }\n\n  if (node.readonly) {\n    this.word(\"readonly\");\n    this.space();\n  }\n\n  this._param(node.parameter);\n}\n\nfunction TSDeclareFunction(node) {\n  if (node.declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  this._functionHead(node);\n\n  this.token(\";\");\n}\n\nfunction TSDeclareMethod(node) {\n  this._classMethodHead(node);\n\n  this.token(\";\");\n}\n\nfunction TSQualifiedName(node) {\n  this.print(node.left, node);\n  this.token(\".\");\n  this.print(node.right, node);\n}\n\nfunction TSCallSignatureDeclaration(node) {\n  this.tsPrintSignatureDeclarationBase(node);\n  this.token(\";\");\n}\n\nfunction TSConstructSignatureDeclaration(node) {\n  this.word(\"new\");\n  this.space();\n  this.tsPrintSignatureDeclarationBase(node);\n  this.token(\";\");\n}\n\nfunction TSPropertySignature(node) {\n  const {\n    readonly,\n    initializer\n  } = node;\n\n  if (readonly) {\n    this.word(\"readonly\");\n    this.space();\n  }\n\n  this.tsPrintPropertyOrMethodName(node);\n  this.print(node.typeAnnotation, node);\n\n  if (initializer) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(initializer, node);\n  }\n\n  this.token(\";\");\n}\n\nfunction tsPrintPropertyOrMethodName(node) {\n  if (node.computed) {\n    this.token(\"[\");\n  }\n\n  this.print(node.key, node);\n\n  if (node.computed) {\n    this.token(\"]\");\n  }\n\n  if (node.optional) {\n    this.token(\"?\");\n  }\n}\n\nfunction TSMethodSignature(node) {\n  this.tsPrintPropertyOrMethodName(node);\n  this.tsPrintSignatureDeclarationBase(node);\n  this.token(\";\");\n}\n\nfunction TSIndexSignature(node) {\n  const {\n    readonly\n  } = node;\n\n  if (readonly) {\n    this.word(\"readonly\");\n    this.space();\n  }\n\n  this.token(\"[\");\n\n  this._parameters(node.parameters, node);\n\n  this.token(\"]\");\n  this.print(node.typeAnnotation, node);\n  this.token(\";\");\n}\n\nfunction TSAnyKeyword() {\n  this.word(\"any\");\n}\n\nfunction TSBigIntKeyword() {\n  this.word(\"bigint\");\n}\n\nfunction TSUnknownKeyword() {\n  this.word(\"unknown\");\n}\n\nfunction TSNumberKeyword() {\n  this.word(\"number\");\n}\n\nfunction TSObjectKeyword() {\n  this.word(\"object\");\n}\n\nfunction TSBooleanKeyword() {\n  this.word(\"boolean\");\n}\n\nfunction TSStringKeyword() {\n  this.word(\"string\");\n}\n\nfunction TSSymbolKeyword() {\n  this.word(\"symbol\");\n}\n\nfunction TSVoidKeyword() {\n  this.word(\"void\");\n}\n\nfunction TSUndefinedKeyword() {\n  this.word(\"undefined\");\n}\n\nfunction TSNullKeyword() {\n  this.word(\"null\");\n}\n\nfunction TSNeverKeyword() {\n  this.word(\"never\");\n}\n\nfunction TSThisType() {\n  this.word(\"this\");\n}\n\nfunction TSFunctionType(node) {\n  this.tsPrintFunctionOrConstructorType(node);\n}\n\nfunction TSConstructorType(node) {\n  this.word(\"new\");\n  this.space();\n  this.tsPrintFunctionOrConstructorType(node);\n}\n\nfunction tsPrintFunctionOrConstructorType(node) {\n  const {\n    typeParameters,\n    parameters\n  } = node;\n  this.print(typeParameters, node);\n  this.token(\"(\");\n\n  this._parameters(parameters, node);\n\n  this.token(\")\");\n  this.space();\n  this.token(\"=>\");\n  this.space();\n  this.print(node.typeAnnotation.typeAnnotation, node);\n}\n\nfunction TSTypeReference(node) {\n  this.print(node.typeName, node);\n  this.print(node.typeParameters, node);\n}\n\nfunction TSTypePredicate(node) {\n  if (node.asserts) {\n    this.word(\"asserts\");\n    this.space();\n  }\n\n  this.print(node.parameterName);\n\n  if (node.typeAnnotation) {\n    this.space();\n    this.word(\"is\");\n    this.space();\n    this.print(node.typeAnnotation.typeAnnotation);\n  }\n}\n\nfunction TSTypeQuery(node) {\n  this.word(\"typeof\");\n  this.space();\n  this.print(node.exprName);\n}\n\nfunction TSTypeLiteral(node) {\n  this.tsPrintTypeLiteralOrInterfaceBody(node.members, node);\n}\n\nfunction tsPrintTypeLiteralOrInterfaceBody(members, node) {\n  this.tsPrintBraced(members, node);\n}\n\nfunction tsPrintBraced(members, node) {\n  this.token(\"{\");\n\n  if (members.length) {\n    this.indent();\n    this.newline();\n\n    for (const member of members) {\n      this.print(member, node);\n      this.newline();\n    }\n\n    this.dedent();\n    this.rightBrace();\n  } else {\n    this.token(\"}\");\n  }\n}\n\nfunction TSArrayType(node) {\n  this.print(node.elementType, node);\n  this.token(\"[]\");\n}\n\nfunction TSTupleType(node) {\n  this.token(\"[\");\n  this.printList(node.elementTypes, node);\n  this.token(\"]\");\n}\n\nfunction TSOptionalType(node) {\n  this.print(node.typeAnnotation, node);\n  this.token(\"?\");\n}\n\nfunction TSRestType(node) {\n  this.token(\"...\");\n  this.print(node.typeAnnotation, node);\n}\n\nfunction TSUnionType(node) {\n  this.tsPrintUnionOrIntersectionType(node, \"|\");\n}\n\nfunction TSIntersectionType(node) {\n  this.tsPrintUnionOrIntersectionType(node, \"&\");\n}\n\nfunction tsPrintUnionOrIntersectionType(node, sep) {\n  this.printJoin(node.types, node, {\n    separator() {\n      this.space();\n      this.token(sep);\n      this.space();\n    }\n\n  });\n}\n\nfunction TSConditionalType(node) {\n  this.print(node.checkType);\n  this.space();\n  this.word(\"extends\");\n  this.space();\n  this.print(node.extendsType);\n  this.space();\n  this.token(\"?\");\n  this.space();\n  this.print(node.trueType);\n  this.space();\n  this.token(\":\");\n  this.space();\n  this.print(node.falseType);\n}\n\nfunction TSInferType(node) {\n  this.token(\"infer\");\n  this.space();\n  this.print(node.typeParameter);\n}\n\nfunction TSParenthesizedType(node) {\n  this.token(\"(\");\n  this.print(node.typeAnnotation, node);\n  this.token(\")\");\n}\n\nfunction TSTypeOperator(node) {\n  this.token(node.operator);\n  this.space();\n  this.print(node.typeAnnotation, node);\n}\n\nfunction TSIndexedAccessType(node) {\n  this.print(node.objectType, node);\n  this.token(\"[\");\n  this.print(node.indexType, node);\n  this.token(\"]\");\n}\n\nfunction TSMappedType(node) {\n  const {\n    readonly,\n    typeParameter,\n    optional\n  } = node;\n  this.token(\"{\");\n  this.space();\n\n  if (readonly) {\n    tokenIfPlusMinus(this, readonly);\n    this.word(\"readonly\");\n    this.space();\n  }\n\n  this.token(\"[\");\n  this.word(typeParameter.name);\n  this.space();\n  this.word(\"in\");\n  this.space();\n  this.print(typeParameter.constraint, typeParameter);\n  this.token(\"]\");\n\n  if (optional) {\n    tokenIfPlusMinus(this, optional);\n    this.token(\"?\");\n  }\n\n  this.token(\":\");\n  this.space();\n  this.print(node.typeAnnotation, node);\n  this.space();\n  this.token(\"}\");\n}\n\nfunction tokenIfPlusMinus(self, tok) {\n  if (tok !== true) {\n    self.token(tok);\n  }\n}\n\nfunction TSLiteralType(node) {\n  this.print(node.literal, node);\n}\n\nfunction TSExpressionWithTypeArguments(node) {\n  this.print(node.expression, node);\n  this.print(node.typeParameters, node);\n}\n\nfunction TSInterfaceDeclaration(node) {\n  const {\n    declare,\n    id,\n    typeParameters,\n    extends: extendz,\n    body\n  } = node;\n\n  if (declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  this.word(\"interface\");\n  this.space();\n  this.print(id, node);\n  this.print(typeParameters, node);\n\n  if (extendz) {\n    this.space();\n    this.word(\"extends\");\n    this.space();\n    this.printList(extendz, node);\n  }\n\n  this.space();\n  this.print(body, node);\n}\n\nfunction TSInterfaceBody(node) {\n  this.tsPrintTypeLiteralOrInterfaceBody(node.body, node);\n}\n\nfunction TSTypeAliasDeclaration(node) {\n  const {\n    declare,\n    id,\n    typeParameters,\n    typeAnnotation\n  } = node;\n\n  if (declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  this.word(\"type\");\n  this.space();\n  this.print(id, node);\n  this.print(typeParameters, node);\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(typeAnnotation, node);\n  this.token(\";\");\n}\n\nfunction TSAsExpression(node) {\n  const {\n    expression,\n    typeAnnotation\n  } = node;\n  this.print(expression, node);\n  this.space();\n  this.word(\"as\");\n  this.space();\n  this.print(typeAnnotation, node);\n}\n\nfunction TSTypeAssertion(node) {\n  const {\n    typeAnnotation,\n    expression\n  } = node;\n  this.token(\"<\");\n  this.print(typeAnnotation, node);\n  this.token(\">\");\n  this.space();\n  this.print(expression, node);\n}\n\nfunction TSEnumDeclaration(node) {\n  const {\n    declare,\n    const: isConst,\n    id,\n    members\n  } = node;\n\n  if (declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  if (isConst) {\n    this.word(\"const\");\n    this.space();\n  }\n\n  this.word(\"enum\");\n  this.space();\n  this.print(id, node);\n  this.space();\n  this.tsPrintBraced(members, node);\n}\n\nfunction TSEnumMember(node) {\n  const {\n    id,\n    initializer\n  } = node;\n  this.print(id, node);\n\n  if (initializer) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(initializer, node);\n  }\n\n  this.token(\",\");\n}\n\nfunction TSModuleDeclaration(node) {\n  const {\n    declare,\n    id\n  } = node;\n\n  if (declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  if (!node.global) {\n    this.word(id.type === \"Identifier\" ? \"namespace\" : \"module\");\n    this.space();\n  }\n\n  this.print(id, node);\n\n  if (!node.body) {\n    this.token(\";\");\n    return;\n  }\n\n  let body = node.body;\n\n  while (body.type === \"TSModuleDeclaration\") {\n    this.token(\".\");\n    this.print(body.id, body);\n    body = body.body;\n  }\n\n  this.space();\n  this.print(body, node);\n}\n\nfunction TSModuleBlock(node) {\n  this.tsPrintBraced(node.body, node);\n}\n\nfunction TSImportType(node) {\n  const {\n    argument,\n    qualifier,\n    typeParameters\n  } = node;\n  this.word(\"import\");\n  this.token(\"(\");\n  this.print(argument, node);\n  this.token(\")\");\n\n  if (qualifier) {\n    this.token(\".\");\n    this.print(qualifier, node);\n  }\n\n  if (typeParameters) {\n    this.print(typeParameters, node);\n  }\n}\n\nfunction TSImportEqualsDeclaration(node) {\n  const {\n    isExport,\n    id,\n    moduleReference\n  } = node;\n\n  if (isExport) {\n    this.word(\"export\");\n    this.space();\n  }\n\n  this.word(\"import\");\n  this.space();\n  this.print(id, node);\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(moduleReference, node);\n  this.token(\";\");\n}\n\nfunction TSExternalModuleReference(node) {\n  this.token(\"require(\");\n  this.print(node.expression, node);\n  this.token(\")\");\n}\n\nfunction TSNonNullExpression(node) {\n  this.print(node.expression, node);\n  this.token(\"!\");\n}\n\nfunction TSExportAssignment(node) {\n  this.word(\"export\");\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(node.expression, node);\n  this.token(\";\");\n}\n\nfunction TSNamespaceExportDeclaration(node) {\n  this.word(\"export\");\n  this.space();\n  this.word(\"as\");\n  this.space();\n  this.word(\"namespace\");\n  this.space();\n  this.print(node.id, node);\n}\n\nfunction tsPrintSignatureDeclarationBase(node) {\n  const {\n    typeParameters,\n    parameters\n  } = node;\n  this.print(typeParameters, node);\n  this.token(\"(\");\n\n  this._parameters(parameters, node);\n\n  this.token(\")\");\n  this.print(node.typeAnnotation, node);\n}\n\nfunction tsPrintClassMemberModifiers(node, isField) {\n  if (isField && node.declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  if (node.accessibility) {\n    this.word(node.accessibility);\n    this.space();\n  }\n\n  if (node.static) {\n    this.word(\"static\");\n    this.space();\n  }\n\n  if (node.abstract) {\n    this.word(\"abstract\");\n    this.space();\n  }\n\n  if (isField && node.readonly) {\n    this.word(\"readonly\");\n    this.space();\n  }\n}","map":{"version":3,"sources":["/Users/sandornegyeliczky/Desktop/projektek/ScrumTrackerFrontend/frontend/node_modules/@babel/generator/lib/generators/typescript.js"],"names":["Object","defineProperty","exports","value","TSTypeAnnotation","TSTypeParameterDeclaration","TSTypeParameterInstantiation","TSTypeParameter","TSParameterProperty","TSDeclareFunction","TSDeclareMethod","TSQualifiedName","TSCallSignatureDeclaration","TSConstructSignatureDeclaration","TSPropertySignature","tsPrintPropertyOrMethodName","TSMethodSignature","TSIndexSignature","TSAnyKeyword","TSBigIntKeyword","TSUnknownKeyword","TSNumberKeyword","TSObjectKeyword","TSBooleanKeyword","TSStringKeyword","TSSymbolKeyword","TSVoidKeyword","TSUndefinedKeyword","TSNullKeyword","TSNeverKeyword","TSThisType","TSFunctionType","TSConstructorType","tsPrintFunctionOrConstructorType","TSTypeReference","TSTypePredicate","TSTypeQuery","TSTypeLiteral","tsPrintTypeLiteralOrInterfaceBody","tsPrintBraced","TSArrayType","TSTupleType","TSOptionalType","TSRestType","TSUnionType","TSIntersectionType","tsPrintUnionOrIntersectionType","TSConditionalType","TSInferType","TSParenthesizedType","TSTypeOperator","TSIndexedAccessType","TSMappedType","TSLiteralType","TSExpressionWithTypeArguments","TSInterfaceDeclaration","TSInterfaceBody","TSTypeAliasDeclaration","TSAsExpression","TSTypeAssertion","TSEnumDeclaration","TSEnumMember","TSModuleDeclaration","TSModuleBlock","TSImportType","TSImportEqualsDeclaration","TSExternalModuleReference","TSNonNullExpression","TSExportAssignment","TSNamespaceExportDeclaration","tsPrintSignatureDeclarationBase","tsPrintClassMemberModifiers","node","token","space","optional","print","typeAnnotation","printList","params","word","name","constraint","default","accessibility","readonly","_param","parameter","declare","_functionHead","_classMethodHead","left","right","initializer","computed","key","_parameters","parameters","typeParameters","typeName","asserts","parameterName","exprName","members","length","indent","newline","member","dedent","rightBrace","elementType","elementTypes","sep","printJoin","types","separator","checkType","extendsType","trueType","falseType","typeParameter","operator","objectType","indexType","tokenIfPlusMinus","self","tok","literal","expression","id","extends","extendz","body","const","isConst","global","type","argument","qualifier","isExport","moduleReference","isField","static","abstract"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TSTypeAnnotation = TSTypeAnnotation;\nexports.TSTypeParameterDeclaration = exports.TSTypeParameterInstantiation = TSTypeParameterInstantiation;\nexports.TSTypeParameter = TSTypeParameter;\nexports.TSParameterProperty = TSParameterProperty;\nexports.TSDeclareFunction = TSDeclareFunction;\nexports.TSDeclareMethod = TSDeclareMethod;\nexports.TSQualifiedName = TSQualifiedName;\nexports.TSCallSignatureDeclaration = TSCallSignatureDeclaration;\nexports.TSConstructSignatureDeclaration = TSConstructSignatureDeclaration;\nexports.TSPropertySignature = TSPropertySignature;\nexports.tsPrintPropertyOrMethodName = tsPrintPropertyOrMethodName;\nexports.TSMethodSignature = TSMethodSignature;\nexports.TSIndexSignature = TSIndexSignature;\nexports.TSAnyKeyword = TSAnyKeyword;\nexports.TSBigIntKeyword = TSBigIntKeyword;\nexports.TSUnknownKeyword = TSUnknownKeyword;\nexports.TSNumberKeyword = TSNumberKeyword;\nexports.TSObjectKeyword = TSObjectKeyword;\nexports.TSBooleanKeyword = TSBooleanKeyword;\nexports.TSStringKeyword = TSStringKeyword;\nexports.TSSymbolKeyword = TSSymbolKeyword;\nexports.TSVoidKeyword = TSVoidKeyword;\nexports.TSUndefinedKeyword = TSUndefinedKeyword;\nexports.TSNullKeyword = TSNullKeyword;\nexports.TSNeverKeyword = TSNeverKeyword;\nexports.TSThisType = TSThisType;\nexports.TSFunctionType = TSFunctionType;\nexports.TSConstructorType = TSConstructorType;\nexports.tsPrintFunctionOrConstructorType = tsPrintFunctionOrConstructorType;\nexports.TSTypeReference = TSTypeReference;\nexports.TSTypePredicate = TSTypePredicate;\nexports.TSTypeQuery = TSTypeQuery;\nexports.TSTypeLiteral = TSTypeLiteral;\nexports.tsPrintTypeLiteralOrInterfaceBody = tsPrintTypeLiteralOrInterfaceBody;\nexports.tsPrintBraced = tsPrintBraced;\nexports.TSArrayType = TSArrayType;\nexports.TSTupleType = TSTupleType;\nexports.TSOptionalType = TSOptionalType;\nexports.TSRestType = TSRestType;\nexports.TSUnionType = TSUnionType;\nexports.TSIntersectionType = TSIntersectionType;\nexports.tsPrintUnionOrIntersectionType = tsPrintUnionOrIntersectionType;\nexports.TSConditionalType = TSConditionalType;\nexports.TSInferType = TSInferType;\nexports.TSParenthesizedType = TSParenthesizedType;\nexports.TSTypeOperator = TSTypeOperator;\nexports.TSIndexedAccessType = TSIndexedAccessType;\nexports.TSMappedType = TSMappedType;\nexports.TSLiteralType = TSLiteralType;\nexports.TSExpressionWithTypeArguments = TSExpressionWithTypeArguments;\nexports.TSInterfaceDeclaration = TSInterfaceDeclaration;\nexports.TSInterfaceBody = TSInterfaceBody;\nexports.TSTypeAliasDeclaration = TSTypeAliasDeclaration;\nexports.TSAsExpression = TSAsExpression;\nexports.TSTypeAssertion = TSTypeAssertion;\nexports.TSEnumDeclaration = TSEnumDeclaration;\nexports.TSEnumMember = TSEnumMember;\nexports.TSModuleDeclaration = TSModuleDeclaration;\nexports.TSModuleBlock = TSModuleBlock;\nexports.TSImportType = TSImportType;\nexports.TSImportEqualsDeclaration = TSImportEqualsDeclaration;\nexports.TSExternalModuleReference = TSExternalModuleReference;\nexports.TSNonNullExpression = TSNonNullExpression;\nexports.TSExportAssignment = TSExportAssignment;\nexports.TSNamespaceExportDeclaration = TSNamespaceExportDeclaration;\nexports.tsPrintSignatureDeclarationBase = tsPrintSignatureDeclarationBase;\nexports.tsPrintClassMemberModifiers = tsPrintClassMemberModifiers;\n\nfunction TSTypeAnnotation(node) {\n  this.token(\":\");\n  this.space();\n  if (node.optional) this.token(\"?\");\n  this.print(node.typeAnnotation, node);\n}\n\nfunction TSTypeParameterInstantiation(node) {\n  this.token(\"<\");\n  this.printList(node.params, node, {});\n  this.token(\">\");\n}\n\nfunction TSTypeParameter(node) {\n  this.word(node.name);\n\n  if (node.constraint) {\n    this.space();\n    this.word(\"extends\");\n    this.space();\n    this.print(node.constraint, node);\n  }\n\n  if (node.default) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.default, node);\n  }\n}\n\nfunction TSParameterProperty(node) {\n  if (node.accessibility) {\n    this.word(node.accessibility);\n    this.space();\n  }\n\n  if (node.readonly) {\n    this.word(\"readonly\");\n    this.space();\n  }\n\n  this._param(node.parameter);\n}\n\nfunction TSDeclareFunction(node) {\n  if (node.declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  this._functionHead(node);\n\n  this.token(\";\");\n}\n\nfunction TSDeclareMethod(node) {\n  this._classMethodHead(node);\n\n  this.token(\";\");\n}\n\nfunction TSQualifiedName(node) {\n  this.print(node.left, node);\n  this.token(\".\");\n  this.print(node.right, node);\n}\n\nfunction TSCallSignatureDeclaration(node) {\n  this.tsPrintSignatureDeclarationBase(node);\n  this.token(\";\");\n}\n\nfunction TSConstructSignatureDeclaration(node) {\n  this.word(\"new\");\n  this.space();\n  this.tsPrintSignatureDeclarationBase(node);\n  this.token(\";\");\n}\n\nfunction TSPropertySignature(node) {\n  const {\n    readonly,\n    initializer\n  } = node;\n\n  if (readonly) {\n    this.word(\"readonly\");\n    this.space();\n  }\n\n  this.tsPrintPropertyOrMethodName(node);\n  this.print(node.typeAnnotation, node);\n\n  if (initializer) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(initializer, node);\n  }\n\n  this.token(\";\");\n}\n\nfunction tsPrintPropertyOrMethodName(node) {\n  if (node.computed) {\n    this.token(\"[\");\n  }\n\n  this.print(node.key, node);\n\n  if (node.computed) {\n    this.token(\"]\");\n  }\n\n  if (node.optional) {\n    this.token(\"?\");\n  }\n}\n\nfunction TSMethodSignature(node) {\n  this.tsPrintPropertyOrMethodName(node);\n  this.tsPrintSignatureDeclarationBase(node);\n  this.token(\";\");\n}\n\nfunction TSIndexSignature(node) {\n  const {\n    readonly\n  } = node;\n\n  if (readonly) {\n    this.word(\"readonly\");\n    this.space();\n  }\n\n  this.token(\"[\");\n\n  this._parameters(node.parameters, node);\n\n  this.token(\"]\");\n  this.print(node.typeAnnotation, node);\n  this.token(\";\");\n}\n\nfunction TSAnyKeyword() {\n  this.word(\"any\");\n}\n\nfunction TSBigIntKeyword() {\n  this.word(\"bigint\");\n}\n\nfunction TSUnknownKeyword() {\n  this.word(\"unknown\");\n}\n\nfunction TSNumberKeyword() {\n  this.word(\"number\");\n}\n\nfunction TSObjectKeyword() {\n  this.word(\"object\");\n}\n\nfunction TSBooleanKeyword() {\n  this.word(\"boolean\");\n}\n\nfunction TSStringKeyword() {\n  this.word(\"string\");\n}\n\nfunction TSSymbolKeyword() {\n  this.word(\"symbol\");\n}\n\nfunction TSVoidKeyword() {\n  this.word(\"void\");\n}\n\nfunction TSUndefinedKeyword() {\n  this.word(\"undefined\");\n}\n\nfunction TSNullKeyword() {\n  this.word(\"null\");\n}\n\nfunction TSNeverKeyword() {\n  this.word(\"never\");\n}\n\nfunction TSThisType() {\n  this.word(\"this\");\n}\n\nfunction TSFunctionType(node) {\n  this.tsPrintFunctionOrConstructorType(node);\n}\n\nfunction TSConstructorType(node) {\n  this.word(\"new\");\n  this.space();\n  this.tsPrintFunctionOrConstructorType(node);\n}\n\nfunction tsPrintFunctionOrConstructorType(node) {\n  const {\n    typeParameters,\n    parameters\n  } = node;\n  this.print(typeParameters, node);\n  this.token(\"(\");\n\n  this._parameters(parameters, node);\n\n  this.token(\")\");\n  this.space();\n  this.token(\"=>\");\n  this.space();\n  this.print(node.typeAnnotation.typeAnnotation, node);\n}\n\nfunction TSTypeReference(node) {\n  this.print(node.typeName, node);\n  this.print(node.typeParameters, node);\n}\n\nfunction TSTypePredicate(node) {\n  if (node.asserts) {\n    this.word(\"asserts\");\n    this.space();\n  }\n\n  this.print(node.parameterName);\n\n  if (node.typeAnnotation) {\n    this.space();\n    this.word(\"is\");\n    this.space();\n    this.print(node.typeAnnotation.typeAnnotation);\n  }\n}\n\nfunction TSTypeQuery(node) {\n  this.word(\"typeof\");\n  this.space();\n  this.print(node.exprName);\n}\n\nfunction TSTypeLiteral(node) {\n  this.tsPrintTypeLiteralOrInterfaceBody(node.members, node);\n}\n\nfunction tsPrintTypeLiteralOrInterfaceBody(members, node) {\n  this.tsPrintBraced(members, node);\n}\n\nfunction tsPrintBraced(members, node) {\n  this.token(\"{\");\n\n  if (members.length) {\n    this.indent();\n    this.newline();\n\n    for (const member of members) {\n      this.print(member, node);\n      this.newline();\n    }\n\n    this.dedent();\n    this.rightBrace();\n  } else {\n    this.token(\"}\");\n  }\n}\n\nfunction TSArrayType(node) {\n  this.print(node.elementType, node);\n  this.token(\"[]\");\n}\n\nfunction TSTupleType(node) {\n  this.token(\"[\");\n  this.printList(node.elementTypes, node);\n  this.token(\"]\");\n}\n\nfunction TSOptionalType(node) {\n  this.print(node.typeAnnotation, node);\n  this.token(\"?\");\n}\n\nfunction TSRestType(node) {\n  this.token(\"...\");\n  this.print(node.typeAnnotation, node);\n}\n\nfunction TSUnionType(node) {\n  this.tsPrintUnionOrIntersectionType(node, \"|\");\n}\n\nfunction TSIntersectionType(node) {\n  this.tsPrintUnionOrIntersectionType(node, \"&\");\n}\n\nfunction tsPrintUnionOrIntersectionType(node, sep) {\n  this.printJoin(node.types, node, {\n    separator() {\n      this.space();\n      this.token(sep);\n      this.space();\n    }\n\n  });\n}\n\nfunction TSConditionalType(node) {\n  this.print(node.checkType);\n  this.space();\n  this.word(\"extends\");\n  this.space();\n  this.print(node.extendsType);\n  this.space();\n  this.token(\"?\");\n  this.space();\n  this.print(node.trueType);\n  this.space();\n  this.token(\":\");\n  this.space();\n  this.print(node.falseType);\n}\n\nfunction TSInferType(node) {\n  this.token(\"infer\");\n  this.space();\n  this.print(node.typeParameter);\n}\n\nfunction TSParenthesizedType(node) {\n  this.token(\"(\");\n  this.print(node.typeAnnotation, node);\n  this.token(\")\");\n}\n\nfunction TSTypeOperator(node) {\n  this.token(node.operator);\n  this.space();\n  this.print(node.typeAnnotation, node);\n}\n\nfunction TSIndexedAccessType(node) {\n  this.print(node.objectType, node);\n  this.token(\"[\");\n  this.print(node.indexType, node);\n  this.token(\"]\");\n}\n\nfunction TSMappedType(node) {\n  const {\n    readonly,\n    typeParameter,\n    optional\n  } = node;\n  this.token(\"{\");\n  this.space();\n\n  if (readonly) {\n    tokenIfPlusMinus(this, readonly);\n    this.word(\"readonly\");\n    this.space();\n  }\n\n  this.token(\"[\");\n  this.word(typeParameter.name);\n  this.space();\n  this.word(\"in\");\n  this.space();\n  this.print(typeParameter.constraint, typeParameter);\n  this.token(\"]\");\n\n  if (optional) {\n    tokenIfPlusMinus(this, optional);\n    this.token(\"?\");\n  }\n\n  this.token(\":\");\n  this.space();\n  this.print(node.typeAnnotation, node);\n  this.space();\n  this.token(\"}\");\n}\n\nfunction tokenIfPlusMinus(self, tok) {\n  if (tok !== true) {\n    self.token(tok);\n  }\n}\n\nfunction TSLiteralType(node) {\n  this.print(node.literal, node);\n}\n\nfunction TSExpressionWithTypeArguments(node) {\n  this.print(node.expression, node);\n  this.print(node.typeParameters, node);\n}\n\nfunction TSInterfaceDeclaration(node) {\n  const {\n    declare,\n    id,\n    typeParameters,\n    extends: extendz,\n    body\n  } = node;\n\n  if (declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  this.word(\"interface\");\n  this.space();\n  this.print(id, node);\n  this.print(typeParameters, node);\n\n  if (extendz) {\n    this.space();\n    this.word(\"extends\");\n    this.space();\n    this.printList(extendz, node);\n  }\n\n  this.space();\n  this.print(body, node);\n}\n\nfunction TSInterfaceBody(node) {\n  this.tsPrintTypeLiteralOrInterfaceBody(node.body, node);\n}\n\nfunction TSTypeAliasDeclaration(node) {\n  const {\n    declare,\n    id,\n    typeParameters,\n    typeAnnotation\n  } = node;\n\n  if (declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  this.word(\"type\");\n  this.space();\n  this.print(id, node);\n  this.print(typeParameters, node);\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(typeAnnotation, node);\n  this.token(\";\");\n}\n\nfunction TSAsExpression(node) {\n  const {\n    expression,\n    typeAnnotation\n  } = node;\n  this.print(expression, node);\n  this.space();\n  this.word(\"as\");\n  this.space();\n  this.print(typeAnnotation, node);\n}\n\nfunction TSTypeAssertion(node) {\n  const {\n    typeAnnotation,\n    expression\n  } = node;\n  this.token(\"<\");\n  this.print(typeAnnotation, node);\n  this.token(\">\");\n  this.space();\n  this.print(expression, node);\n}\n\nfunction TSEnumDeclaration(node) {\n  const {\n    declare,\n    const: isConst,\n    id,\n    members\n  } = node;\n\n  if (declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  if (isConst) {\n    this.word(\"const\");\n    this.space();\n  }\n\n  this.word(\"enum\");\n  this.space();\n  this.print(id, node);\n  this.space();\n  this.tsPrintBraced(members, node);\n}\n\nfunction TSEnumMember(node) {\n  const {\n    id,\n    initializer\n  } = node;\n  this.print(id, node);\n\n  if (initializer) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(initializer, node);\n  }\n\n  this.token(\",\");\n}\n\nfunction TSModuleDeclaration(node) {\n  const {\n    declare,\n    id\n  } = node;\n\n  if (declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  if (!node.global) {\n    this.word(id.type === \"Identifier\" ? \"namespace\" : \"module\");\n    this.space();\n  }\n\n  this.print(id, node);\n\n  if (!node.body) {\n    this.token(\";\");\n    return;\n  }\n\n  let body = node.body;\n\n  while (body.type === \"TSModuleDeclaration\") {\n    this.token(\".\");\n    this.print(body.id, body);\n    body = body.body;\n  }\n\n  this.space();\n  this.print(body, node);\n}\n\nfunction TSModuleBlock(node) {\n  this.tsPrintBraced(node.body, node);\n}\n\nfunction TSImportType(node) {\n  const {\n    argument,\n    qualifier,\n    typeParameters\n  } = node;\n  this.word(\"import\");\n  this.token(\"(\");\n  this.print(argument, node);\n  this.token(\")\");\n\n  if (qualifier) {\n    this.token(\".\");\n    this.print(qualifier, node);\n  }\n\n  if (typeParameters) {\n    this.print(typeParameters, node);\n  }\n}\n\nfunction TSImportEqualsDeclaration(node) {\n  const {\n    isExport,\n    id,\n    moduleReference\n  } = node;\n\n  if (isExport) {\n    this.word(\"export\");\n    this.space();\n  }\n\n  this.word(\"import\");\n  this.space();\n  this.print(id, node);\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(moduleReference, node);\n  this.token(\";\");\n}\n\nfunction TSExternalModuleReference(node) {\n  this.token(\"require(\");\n  this.print(node.expression, node);\n  this.token(\")\");\n}\n\nfunction TSNonNullExpression(node) {\n  this.print(node.expression, node);\n  this.token(\"!\");\n}\n\nfunction TSExportAssignment(node) {\n  this.word(\"export\");\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(node.expression, node);\n  this.token(\";\");\n}\n\nfunction TSNamespaceExportDeclaration(node) {\n  this.word(\"export\");\n  this.space();\n  this.word(\"as\");\n  this.space();\n  this.word(\"namespace\");\n  this.space();\n  this.print(node.id, node);\n}\n\nfunction tsPrintSignatureDeclarationBase(node) {\n  const {\n    typeParameters,\n    parameters\n  } = node;\n  this.print(typeParameters, node);\n  this.token(\"(\");\n\n  this._parameters(parameters, node);\n\n  this.token(\")\");\n  this.print(node.typeAnnotation, node);\n}\n\nfunction tsPrintClassMemberModifiers(node, isField) {\n  if (isField && node.declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  if (node.accessibility) {\n    this.word(node.accessibility);\n    this.space();\n  }\n\n  if (node.static) {\n    this.word(\"static\");\n    this.space();\n  }\n\n  if (node.abstract) {\n    this.word(\"abstract\");\n    this.space();\n  }\n\n  if (isField && node.readonly) {\n    this.word(\"readonly\");\n    this.space();\n  }\n}"]},"metadata":{},"sourceType":"script"}