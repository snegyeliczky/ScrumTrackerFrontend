{"ast":null,"code":"var _jsxFileName = \"/Users/sandornegyeliczky/Desktop/projektek/ScrumTrackerFrontend/frontend/src/components/projectPage/ScrumTable.js\";\nimport React, { useState, useContext, useEffect, useRef } from 'react';\nimport { useParams } from \"react-router\";\nimport axios from \"axios\";\nimport Column from \"./Column\";\nimport { DragAndDropContext } from \"../contexts/DragNDropContext\";\n\nconst ScrumTable = ({\n  table\n}) => {\n  const [statuses, setStatuses] = useState(table.statuses); //dragNDrop\n\n  const [DragItemColumnId, setDragItemColumnId] = useState();\n  const dragItem = useRef(); //dragged task id and status id where it come from\n\n  const onDragEnter = (e, newStatusId) => {\n    setDragItemColumnId(newStatusId);\n    console.log(\"Drag Item in: \");\n    console.log(DragItemColumnId);\n  };\n\n  const onDragEnd = async () => {\n    console.log(\"final Status Id: \");\n    console.log(DragItemColumnId);\n    console.log(\"drag item: \");\n    console.log(dragItem.current);\n    setStatuses(await refreshStatus(DragItemColumnId));\n  };\n\n  const refreshStatus = newStatusId => {\n    let newStatuses = table.statuses;\n\n    for (let status of newStatuses) {\n      if (status.id === dragItem.current.statusId) {\n        let taskArr = [];\n\n        for (let task of status.tasks) {\n          if (task.id === dragItem.current.taskId) {\n            continue;\n          }\n\n          taskArr.push(task);\n        }\n\n        status.tasks = taskArr;\n      }\n\n      if (newStatusId === status.id) {\n        status.tasks.push(dragItem.current.taskObject);\n      }\n    }\n\n    return newStatuses;\n  }; //\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"scrumTable\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, statuses.map(status => {\n    return /*#__PURE__*/React.createElement(Column, {\n      onDragEnd: onDragEnd,\n      dragItem: dragItem,\n      key: status.id,\n      status: status,\n      onDragEnter: onDragEnter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 24\n      }\n    });\n  }));\n};\n\nexport default ScrumTable;","map":{"version":3,"sources":["/Users/sandornegyeliczky/Desktop/projektek/ScrumTrackerFrontend/frontend/src/components/projectPage/ScrumTable.js"],"names":["React","useState","useContext","useEffect","useRef","useParams","axios","Column","DragAndDropContext","ScrumTable","table","statuses","setStatuses","DragItemColumnId","setDragItemColumnId","dragItem","onDragEnter","e","newStatusId","console","log","onDragEnd","current","refreshStatus","newStatuses","status","id","statusId","taskArr","task","tasks","taskId","push","taskObject","map"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,UAAzB,EAAqCC,SAArC,EAAgDC,MAAhD,QAA6D,OAA7D;AACA,SAAQC,SAAR,QAAwB,cAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAAQC,kBAAR,QAAiC,8BAAjC;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAa;AAE5B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAACS,KAAK,CAACC,QAAP,CAAxC,CAF4B,CAI5B;;AAEA,QAAM,CAACE,gBAAD,EAAkBC,mBAAlB,IAAyCb,QAAQ,EAAvD;AACA,QAAMc,QAAQ,GAAGX,MAAM,EAAvB,CAP4B,CAOD;;AAE3B,QAAMY,WAAW,GAAG,CAACC,CAAD,EAAIC,WAAJ,KAAoB;AACpCJ,IAAAA,mBAAmB,CAACI,WAAD,CAAnB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYP,gBAAZ;AACH,GAJD;;AAMA,QAAMQ,SAAS,GAAG,YAAW;AACzBF,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYP,gBAAZ;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYL,QAAQ,CAACO,OAArB;AACAV,IAAAA,WAAW,CAAC,MAAMW,aAAa,CAACV,gBAAD,CAApB,CAAX;AACH,GAND;;AASA,QAAMU,aAAa,GAAIL,WAAD,IAAiB;AACnC,QAAIM,WAAW,GAAGd,KAAK,CAACC,QAAxB;;AACA,SAAK,IAAIc,MAAT,IAAmBD,WAAnB,EAAgC;AAC5B,UAAIC,MAAM,CAACC,EAAP,KAAcX,QAAQ,CAACO,OAAT,CAAiBK,QAAnC,EAA6C;AACzC,YAAIC,OAAO,GAAG,EAAd;;AACA,aAAK,IAAIC,IAAT,IAAiBJ,MAAM,CAACK,KAAxB,EAA+B;AAC3B,cAAID,IAAI,CAACH,EAAL,KAAYX,QAAQ,CAACO,OAAT,CAAiBS,MAAjC,EAAyC;AACrC;AACH;;AACDH,UAAAA,OAAO,CAACI,IAAR,CAAaH,IAAb;AACH;;AACDJ,QAAAA,MAAM,CAACK,KAAP,GAAeF,OAAf;AACH;;AACD,UAAIV,WAAW,KAAKO,MAAM,CAACC,EAA3B,EAA+B;AAC3BD,QAAAA,MAAM,CAACK,KAAP,CAAaE,IAAb,CAAkBjB,QAAQ,CAACO,OAAT,CAAiBW,UAAnC;AACH;AAEJ;;AACD,WAAOT,WAAP;AACH,GAnBD,CAxB4B,CA6C5B;;;AAEA,sBACI;AAAK,IAAA,SAAS,EAAE,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKb,QAAQ,CAACuB,GAAT,CAAaT,MAAM,IAAI;AACpB,wBAAO,oBAAC,MAAD;AACH,MAAA,SAAS,EAAGJ,SADT;AAEH,MAAA,QAAQ,EAAEN,QAFP;AAGH,MAAA,GAAG,EAAEU,MAAM,CAACC,EAHT;AAIH,MAAA,MAAM,EAAED,MAJL;AAKH,MAAA,WAAW,EAAET,WALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAQH,GATA,CADL,CADJ;AAcH,CA7DD;;AA+DA,eAAeP,UAAf","sourcesContent":["import React, {useState, useContext, useEffect, useRef} from 'react';\nimport {useParams} from \"react-router\";\nimport axios from \"axios\";\nimport Column from \"./Column\";\nimport {DragAndDropContext} from \"../contexts/DragNDropContext\";\n\nconst ScrumTable = ({table}) => {\n\n    const [statuses, setStatuses] = useState(table.statuses);\n\n    //dragNDrop\n\n    const [DragItemColumnId,setDragItemColumnId] = useState();\n    const dragItem = useRef(); //dragged task id and status id where it come from\n\n    const onDragEnter = (e, newStatusId) => {\n        setDragItemColumnId(newStatusId);\n        console.log(\"Drag Item in: \");\n        console.log(DragItemColumnId);\n    };\n\n    const onDragEnd = async () =>{\n        console.log(\"final Status Id: \");\n        console.log(DragItemColumnId);\n        console.log(\"drag item: \");\n        console.log(dragItem.current);\n        setStatuses(await refreshStatus(DragItemColumnId));\n    };\n\n\n    const refreshStatus = (newStatusId) => {\n        let newStatuses = table.statuses;\n        for (let status of newStatuses) {\n            if (status.id === dragItem.current.statusId) {\n                let taskArr = [];\n                for (let task of status.tasks) {\n                    if (task.id === dragItem.current.taskId) {\n                        continue;\n                    }\n                    taskArr.push(task);\n                }\n                status.tasks = taskArr\n            }\n            if (newStatusId === status.id) {\n                status.tasks.push(dragItem.current.taskObject)\n            }\n\n        }\n        return newStatuses;\n    };\n\n    //\n\n    return (\n        <div className={\"scrumTable\"}>\n            {statuses.map(status => {\n                return <Column\n                    onDragEnd ={onDragEnd}\n                    dragItem={dragItem}\n                    key={status.id}\n                    status={status}\n                    onDragEnter={onDragEnter}\n                />\n\n            })}\n        </div>\n    );\n};\n\nexport default ScrumTable;"]},"metadata":{},"sourceType":"module"}