{"ast":null,"code":"var _jsxFileName = \"/Users/sandornegyeliczky/Desktop/projektek/ScrumTrackerFrontend/frontend/src/components/projectPage/ScrumTable.js\";\nimport React, { useState, useContext, useEffect, useRef } from 'react';\nimport Column from \"./Column\";\nimport axios from \"axios\";\nimport { ContentContainer } from \"../styledComps/styled\";\nimport { PlusOutlined } from \"@ant-design/icons\";\nimport UseComponentVisible from \"../UseComponentVisible\";\n\nconst ScrumTable = ({\n  table,\n  addNewColumn,\n  addNewTask,\n  tasksDistributionInStatuses,\n  countBusinessValue\n}) => {\n  const [statuses, setStatuses] = useState(table.statuses);\n  const newColumnRef = useRef();\n  const [DragItemColumnId, setDragItemColumnId] = useState();\n  const dragItem = useRef(); //dragged task id and status id where it come from\n  //Click outside effect fields\n\n  const {\n    ref,\n    isComponentVisible,\n    setIsComponentVisible\n  } = UseComponentVisible(false);\n\n  const deleteStatus = async statusID => {\n    await axios.delete(\"http://localhost:8080/project/deletestatus?statusid=\" + statusID + \"&tableid=\" + table.id);\n    refreshStatusesFromBackend();\n  };\n\n  const refreshStatusesFromBackend = async () => {\n    let axiosResponse = await axios.get(\"http://localhost:8080/project/gettable/\" + table.id);\n    axiosResponse.data.statuses.sort(function (a, b) {\n      return a.position - b.position;\n    });\n    axiosResponse.data.statuses.map(status => {\n      status.tasks.sort(function (a, b) {\n        return a.position - b.position;\n      });\n    });\n    tasksDistributionInStatuses(axiosResponse.data.statuses);\n    countBusinessValue(axiosResponse.data.statuses);\n    setStatuses(axiosResponse.data.statuses);\n  };\n\n  const uploadStatusChangeToDatabase = async () => {\n    let refreshItem = {\n      toStatusId: DragItemColumnId,\n      fromStatusId: dragItem.current.statusId,\n      taskId: dragItem.current.taskObject.id\n    };\n    await axios.put(\"http://localhost:8080/task/transfer\", refreshItem);\n  };\n\n  const onDragEnter = newStatusId => {\n    setDragItemColumnId(newStatusId);\n  };\n\n  const onDragEnd = () => {\n    setStatuses(refreshStatus(DragItemColumnId));\n    uploadStatusChangeToDatabase();\n  };\n\n  const refreshStatus = newStatusId => {\n    let newStatuses = [...statuses];\n\n    for (let status of newStatuses) {\n      if (status.id === dragItem.current.statusId) {\n        let taskArr = [...status.tasks];\n        let index = taskArr.indexOf(dragItem.current.taskObject);\n\n        if (index > -1) {\n          taskArr.splice(index, 1);\n        }\n\n        status.tasks = taskArr;\n      }\n\n      if (newStatusId === status.id) {\n        status.tasks.push(dragItem.current.taskObject);\n      }\n    }\n\n    tasksDistributionInStatuses(newStatuses);\n    countBusinessValue(newStatuses);\n    return newStatuses;\n  };\n\n  const handleSaveNewColumn = () => {\n    if (newColumnRef.current.value.length < 3) {\n      alert(\"add name (minimum 3 character) to your status\");\n      return;\n    }\n\n    addNewColumn(newColumnRef.current.value);\n    newColumnRef.current.value = \"\";\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"scrum_table\",\n    onDragOver: e => e.preventDefault(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, statuses.map((status, i) => {\n    let statusFlag = null;\n\n    if (i === 0) {\n      statusFlag = \"start\";\n    }\n\n    if (i === statuses.length - 1) {\n      statusFlag = \"finish\";\n    }\n\n    return /*#__PURE__*/React.createElement(Column, {\n      statusFlag: statusFlag,\n      deleteStatus: deleteStatus,\n      onDragEnd: onDragEnd,\n      dragItem: dragItem,\n      key: status.id,\n      status: status,\n      onDragEnter: onDragEnter,\n      refreshStatusesFromBackend: refreshStatusesFromBackend,\n      addNewTask: addNewTask,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 28\n      }\n    });\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  }, isComponentVisible && /*#__PURE__*/React.createElement(\"div\", {\n    ref: ref,\n    className: \"add_new_column_container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"add_new_column_text\",\n    ref: newColumnRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"add_new_column_btn\",\n    onClick: handleSaveNewColumn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 25\n    }\n  }, \"save\")), !isComponentVisible && /*#__PURE__*/React.createElement(\"div\", {\n    onClick: () => setIsComponentVisible(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(PlusOutlined, {\n    id: \"add_status_icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 25\n    }\n  }))));\n};\n\nexport default ScrumTable;","map":{"version":3,"sources":["/Users/sandornegyeliczky/Desktop/projektek/ScrumTrackerFrontend/frontend/src/components/projectPage/ScrumTable.js"],"names":["React","useState","useContext","useEffect","useRef","Column","axios","ContentContainer","PlusOutlined","UseComponentVisible","ScrumTable","table","addNewColumn","addNewTask","tasksDistributionInStatuses","countBusinessValue","statuses","setStatuses","newColumnRef","DragItemColumnId","setDragItemColumnId","dragItem","ref","isComponentVisible","setIsComponentVisible","deleteStatus","statusID","delete","id","refreshStatusesFromBackend","axiosResponse","get","data","sort","a","b","position","map","status","tasks","uploadStatusChangeToDatabase","refreshItem","toStatusId","fromStatusId","current","statusId","taskId","taskObject","put","onDragEnter","newStatusId","onDragEnd","refreshStatus","newStatuses","taskArr","index","indexOf","splice","push","handleSaveNewColumn","value","length","alert","e","preventDefault","i","statusFlag"],"mappings":"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","sourcesContent":["import React, {useState, useContext, useEffect, useRef} from 'react';\nimport Column from \"./Column\";\nimport axios from \"axios\";\nimport {ContentContainer} from \"../styledComps/styled\"\nimport {PlusOutlined} from \"@ant-design/icons\";\nimport UseComponentVisible from \"../UseComponentVisible\";\n\nconst ScrumTable = ({table, addNewColumn, addNewTask, tasksDistributionInStatuses, countBusinessValue}) => {\n\n    const [statuses, setStatuses] = useState(table.statuses);\n    const newColumnRef = useRef();\n    const [DragItemColumnId, setDragItemColumnId] = useState();\n    const dragItem = useRef(); //dragged task id and status id where it come from\n\n    //Click outside effect fields\n    const {\n        ref,\n        isComponentVisible,\n        setIsComponentVisible\n    } = UseComponentVisible(false);\n\n\n    const deleteStatus = async (statusID) => {\n        await axios.delete(\"http://localhost:8080/project/deletestatus?statusid=\" + statusID + \"&tableid=\" + table.id);\n        refreshStatusesFromBackend();\n    };\n\n    const refreshStatusesFromBackend = async () => {\n        let axiosResponse = await axios.get(\"http://localhost:8080/project/gettable/\" + table.id);\n        axiosResponse.data.statuses.sort(function (a, b) {\n            return a.position - b.position;\n        });\n        axiosResponse.data.statuses.map(status =>{\n            status.tasks.sort(function (a,b) {\n                return a.position - b.position;\n            })\n        });\n        tasksDistributionInStatuses(axiosResponse.data.statuses);\n        countBusinessValue(axiosResponse.data.statuses);\n        setStatuses(axiosResponse.data.statuses);\n    };\n\n    const uploadStatusChangeToDatabase = async () => {\n        let refreshItem = {\n            toStatusId: DragItemColumnId,\n            fromStatusId: dragItem.current.statusId,\n            taskId: dragItem.current.taskObject.id\n        };\n        await axios.put(\"http://localhost:8080/task/transfer\", refreshItem);\n    };\n\n\n    const onDragEnter = (newStatusId) => {\n        setDragItemColumnId(newStatusId);\n    };\n\n    const onDragEnd = () => {\n        setStatuses(refreshStatus(DragItemColumnId));\n        uploadStatusChangeToDatabase();\n    };\n\n\n    const refreshStatus = (newStatusId) => {\n        let newStatuses = [...statuses];\n        for (let status of newStatuses) {\n            if (status.id === dragItem.current.statusId) {\n                let taskArr = [...status.tasks];\n                let index = taskArr.indexOf(dragItem.current.taskObject);\n                if (index > -1) {\n                    taskArr.splice(index, 1)\n                }\n                status.tasks = taskArr\n            }\n            if (newStatusId === status.id) {\n                status.tasks.push(dragItem.current.taskObject)\n            }\n        }\n        tasksDistributionInStatuses(newStatuses);\n        countBusinessValue(newStatuses);\n        return newStatuses;\n    };\n\n    const handleSaveNewColumn = () => {\n        if (newColumnRef.current.value.length < 3) {\n            alert(\"add name (minimum 3 character) to your status\");\n            return;\n        }\n        addNewColumn(newColumnRef.current.value);\n        newColumnRef.current.value = \"\";\n\n    };\n\n    return (\n        <div className={\"scrum_table\"}\n                          onDragOver={(e) => e.preventDefault()}>\n            {\n                statuses.map((status, i) => {\n                    let statusFlag = null;\n\n                    if (i === 0) {\n                        statusFlag = \"start\";\n                    }\n                    if (i === statuses.length - 1) {\n                        statusFlag = \"finish\";\n                    }\n\n                    return <Column\n                        statusFlag={statusFlag}\n                        deleteStatus={deleteStatus}\n                        onDragEnd={onDragEnd}\n                        dragItem={dragItem}\n                        key={status.id}\n                        status={status}\n                        onDragEnter={onDragEnter}\n                        refreshStatusesFromBackend={refreshStatusesFromBackend}\n                        addNewTask={addNewTask}\n                    />\n\n                })\n            }\n\n            <div>\n                {isComponentVisible && (\n                    <div ref={ref} className=\"add_new_column_container\">\n                        <input className=\"add_new_column_text\" ref={newColumnRef}/>\n                        <div className=\"add_new_column_btn\" onClick={handleSaveNewColumn}>save</div>\n                    </div>\n                )}\n                {!isComponentVisible && (\n                    <div onClick={() => setIsComponentVisible(true)}>\n                        <PlusOutlined id={\"add_status_icon\"}/>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default ScrumTable;"]},"metadata":{},"sourceType":"module"}