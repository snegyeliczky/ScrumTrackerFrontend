{"ast":null,"code":"var _jsxFileName = \"/Users/sandornegyeliczky/Desktop/projektek/ScrumTrackerFrontend/frontend/src/components/projectPage/ScrumTable.js\";\nimport React, { useState, useContext, useEffect, useRef } from 'react';\nimport { useParams } from \"react-router\";\nimport axios from \"axios\";\nimport Column from \"./Column\";\nimport Task from \"./Task\";\nimport { DragNDropProvider } from \"./components/contexts/DragNDropContext\";\n\nconst ScrumTable = ({\n  table\n}) => {\n  const [statuses, setStatuses] = useState(table.statuses);\n\n  const onDragEnter = (e, newStatusId) => {\n    let newStatuses = table.statuses;\n\n    for (let status of newStatuses) {\n      if (status.id === dragItem.current.statusId) {\n        let taskArr = [];\n\n        for (let task of status.tasks) {\n          if (task.id === dragItem.current.taskId) {\n            continue;\n          }\n\n          taskArr.push(task);\n        }\n\n        status.tasks = taskArr;\n      }\n\n      if (newStatusId === status.id) {\n        status.tasks.push(dragItem.current.taskObject);\n      }\n    }\n\n    setStatuses(newStatuses);\n    console.log(statuses);\n  };\n\n  return /*#__PURE__*/React.createElement(DragNDropProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"scrumTable\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, statuses.map(status => {\n    return /*#__PURE__*/React.createElement(Column, {\n      key: status.id,\n      status: status,\n      onDragEnter: onDragEnter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 24\n      }\n    });\n  })));\n};\n\nexport default ScrumTable;","map":{"version":3,"sources":["/Users/sandornegyeliczky/Desktop/projektek/ScrumTrackerFrontend/frontend/src/components/projectPage/ScrumTable.js"],"names":["React","useState","useContext","useEffect","useRef","useParams","axios","Column","Task","DragNDropProvider","ScrumTable","table","statuses","setStatuses","onDragEnter","e","newStatusId","newStatuses","status","id","dragItem","current","statusId","taskArr","task","tasks","taskId","push","taskObject","console","log","map"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,UAAzB,EAAqCC,SAArC,EAAgDC,MAAhD,QAA6D,OAA7D;AACA,SAAQC,SAAR,QAAwB,cAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAAQC,iBAAR,QAAgC,wCAAhC;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAa;AAI5B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAACU,KAAK,CAACC,QAAP,CAAxC;;AAGA,QAAME,WAAW,GAAG,CAACC,CAAD,EAAGC,WAAH,KAAiB;AACjC,QAAIC,WAAW,GAAGN,KAAK,CAACC,QAAxB;;AACA,SAAK,IAAIM,MAAT,IAAmBD,WAAnB,EAA+B;AAC3B,UAAIC,MAAM,CAACC,EAAP,KAAcC,QAAQ,CAACC,OAAT,CAAiBC,QAAnC,EAA4C;AACxC,YAAIC,OAAO,GAAE,EAAb;;AACA,aAAK,IAAIC,IAAT,IAAiBN,MAAM,CAACO,KAAxB,EAA8B;AAC1B,cAAID,IAAI,CAACL,EAAL,KAAYC,QAAQ,CAACC,OAAT,CAAiBK,MAAjC,EAAwC;AACpC;AACH;;AACDH,UAAAA,OAAO,CAACI,IAAR,CAAaH,IAAb;AACH;;AACDN,QAAAA,MAAM,CAACO,KAAP,GAAeF,OAAf;AACH;;AACD,UAAIP,WAAW,KAAKE,MAAM,CAACC,EAA3B,EAA8B;AAC1BD,QAAAA,MAAM,CAACO,KAAP,CAAaE,IAAb,CAAkBP,QAAQ,CAACC,OAAT,CAAiBO,UAAnC;AACH;AAEJ;;AACDf,IAAAA,WAAW,CAACI,WAAD,CAAX;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAYlB,QAAZ;AACH,GApBD;;AAsBA,sBACI,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAK,IAAA,SAAS,EAAE,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKA,QAAQ,CAACmB,GAAT,CAAab,MAAM,IAAI;AACpB,wBAAO,oBAAC,MAAD;AACQ,MAAA,GAAG,EAAEA,MAAM,CAACC,EADpB;AAEQ,MAAA,MAAM,EAAED,MAFhB;AAGQ,MAAA,WAAW,EAAEJ,WAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAMH,GAPA,CADL,CADA,CADJ;AAcH,CA3CD;;AA6CA,eAAeJ,UAAf","sourcesContent":["import React, {useState, useContext, useEffect, useRef} from 'react';\nimport {useParams} from \"react-router\";\nimport axios from \"axios\";\nimport Column from \"./Column\";\nimport Task from \"./Task\";\nimport {DragNDropProvider} from \"./components/contexts/DragNDropContext\";\n\nconst ScrumTable = ({table}) => {\n\n\n\n    const [statuses, setStatuses] = useState(table.statuses);\n\n\n    const onDragEnter = (e,newStatusId)=>{\n        let newStatuses = table.statuses;\n        for (let status of newStatuses){\n            if (status.id === dragItem.current.statusId){\n                let taskArr =[];\n                for (let task of status.tasks){\n                    if (task.id === dragItem.current.taskId){\n                        continue;\n                    }\n                    taskArr.push(task);\n                }\n                status.tasks = taskArr\n            }\n            if (newStatusId === status.id){\n                status.tasks.push(dragItem.current.taskObject)\n            }\n\n        }\n        setStatuses(newStatuses);\n        console.log(statuses);\n    };\n\n    return (\n        <DragNDropProvider>\n        <div className={\"scrumTable\"}>\n            {statuses.map(status => {\n                return <Column\n                               key={status.id}\n                               status={status}\n                               onDragEnter={onDragEnter}\n                />\n\n            })}\n        </div>\n        </DragNDropProvider>\n    );\n};\n\nexport default ScrumTable;"]},"metadata":{},"sourceType":"module"}