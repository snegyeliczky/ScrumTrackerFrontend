{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\nclass TokenType {\n  constructor(label, conf = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    this.updateContext = null;\n  }\n\n}\n\nconst keywords = new Map();\n\nfunction createKeyword(name, options = {}) {\n  options.keyword = name;\n  const token = new TokenType(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name, binop) {\n  return new TokenType(name, {\n    beforeExpr,\n    binop\n  });\n}\n\nconst types = {\n  num: new TokenType(\"num\", {\n    startsExpr\n  }),\n  bigint: new TokenType(\"bigint\", {\n    startsExpr\n  }),\n  regexp: new TokenType(\"regexp\", {\n    startsExpr\n  }),\n  string: new TokenType(\"string\", {\n    startsExpr\n  }),\n  name: new TokenType(\"name\", {\n    startsExpr\n  }),\n  eof: new TokenType(\"eof\"),\n  bracketL: new TokenType(\"[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketHashL: new TokenType(\"#[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketBarL: new TokenType(\"[|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketR: new TokenType(\"]\"),\n  bracketBarR: new TokenType(\"|]\"),\n  braceL: new TokenType(\"{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceBarL: new TokenType(\"{|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceHashL: new TokenType(\"#{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceR: new TokenType(\"}\"),\n  braceBarR: new TokenType(\"|}\"),\n  parenL: new TokenType(\"(\", {\n    beforeExpr,\n    startsExpr\n  }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", {\n    beforeExpr\n  }),\n  semi: new TokenType(\";\", {\n    beforeExpr\n  }),\n  colon: new TokenType(\":\", {\n    beforeExpr\n  }),\n  doubleColon: new TokenType(\"::\", {\n    beforeExpr\n  }),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", {\n    beforeExpr\n  }),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", {\n    beforeExpr\n  }),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", {\n    beforeExpr\n  }),\n  backQuote: new TokenType(\"`\", {\n    startsExpr\n  }),\n  dollarBraceL: new TokenType(\"${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  at: new TokenType(\"@\"),\n  hash: new TokenType(\"#\", {\n    startsExpr\n  }),\n  interpreterDirective: new TokenType(\"#!...\"),\n  eq: new TokenType(\"=\", {\n    beforeExpr,\n    isAssign\n  }),\n  assign: new TokenType(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  incDec: new TokenType(\"++/--\", {\n    prefix,\n    postfix,\n    startsExpr\n  }),\n  bang: new TokenType(\"!\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  tilde: new TokenType(\"~\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", {\n    beforeExpr,\n    binop: 9,\n    prefix,\n    startsExpr\n  }),\n  modulo: new TokenType(\"%\", {\n    beforeExpr,\n    binop: 10,\n    startsExpr\n  }),\n  star: createBinop(\"*\", 10),\n  slash: createBinop(\"/\", 10),\n  exponent: new TokenType(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true\n  }),\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", {\n    beforeExpr\n  }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", {\n    beforeExpr\n  }),\n  _do: createKeyword(\"do\", {\n    isLoop,\n    beforeExpr\n  }),\n  _else: createKeyword(\"else\", {\n    beforeExpr\n  }),\n  _finally: createKeyword(\"finally\"),\n  _for: createKeyword(\"for\", {\n    isLoop\n  }),\n  _function: createKeyword(\"function\", {\n    startsExpr\n  }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", {\n    beforeExpr\n  }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _while: createKeyword(\"while\", {\n    isLoop\n  }),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", {\n    beforeExpr,\n    startsExpr\n  }),\n  _this: createKeyword(\"this\", {\n    startsExpr\n  }),\n  _super: createKeyword(\"super\", {\n    startsExpr\n  }),\n  _class: createKeyword(\"class\", {\n    startsExpr\n  }),\n  _extends: createKeyword(\"extends\", {\n    beforeExpr\n  }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", {\n    startsExpr\n  }),\n  _null: createKeyword(\"null\", {\n    startsExpr\n  }),\n  _true: createKeyword(\"true\", {\n    startsExpr\n  }),\n  _false: createKeyword(\"false\", {\n    startsExpr\n  }),\n  _in: createKeyword(\"in\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _instanceof: createKeyword(\"instanceof\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _typeof: createKeyword(\"typeof\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _void: createKeyword(\"void\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _delete: createKeyword(\"delete\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  })\n};\nconst SCOPE_OTHER = 0b00000000,\n      SCOPE_PROGRAM = 0b00000001,\n      SCOPE_FUNCTION = 0b00000010,\n      SCOPE_ARROW = 0b00000100,\n      SCOPE_SIMPLE_CATCH = 0b00001000,\n      SCOPE_SUPER = 0b00010000,\n      SCOPE_DIRECT_SUPER = 0b00100000,\n      SCOPE_CLASS = 0b01000000,\n      SCOPE_TS_MODULE = 0b10000000,\n      SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\nconst BIND_KIND_VALUE = 0b00000000001,\n      BIND_KIND_TYPE = 0b00000000010,\n      BIND_SCOPE_VAR = 0b00000000100,\n      BIND_SCOPE_LEXICAL = 0b00000001000,\n      BIND_SCOPE_FUNCTION = 0b00000010000,\n      BIND_FLAGS_NONE = 0b00001000000,\n      BIND_FLAGS_CLASS = 0b00010000000,\n      BIND_FLAGS_TS_ENUM = 0b00100000000,\n      BIND_FLAGS_TS_CONST_ENUM = 0b01000000000,\n      BIND_FLAGS_TS_EXPORT_ONLY = 0b10000000000;\nconst BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS,\n      BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,\n      BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,\n      BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,\n      BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,\n      BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,\n      BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM,\n      BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n      BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY;\nconst CLASS_ELEMENT_FLAG_STATIC = 0b100,\n      CLASS_ELEMENT_KIND_GETTER = 0b010,\n      CLASS_ELEMENT_KIND_SETTER = 0b001,\n      CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\nconst CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n      CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n      CLASS_ELEMENT_OTHER = 0;\nconst lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nconst lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nfunction isNewLine(code) {\n  switch (code) {\n    case 10:\n    case 13:\n    case 8232:\n    case 8233:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nconst skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nfunction isWhitespace(code) {\n  switch (code) {\n    case 0x0009:\n    case 0x000b:\n    case 0x000c:\n    case 32:\n    case 160:\n    case 5760:\n    case 0x2000:\n    case 0x2001:\n    case 0x2002:\n    case 0x2003:\n    case 0x2004:\n    case 0x2005:\n    case 0x2006:\n    case 0x2007:\n    case 0x2008:\n    case 0x2009:\n    case 0x200a:\n    case 0x202f:\n    case 0x205f:\n    case 0x3000:\n    case 0xfeff:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nclass Position {\n  constructor(line, col) {\n    this.line = line;\n    this.column = col;\n  }\n\n}\n\nclass SourceLocation {\n  constructor(start, end) {\n    this.start = start;\n    this.end = end;\n  }\n\n}\n\nfunction getLineInfo(input, offset) {\n  let line = 1;\n  let lineStart = 0;\n  let match;\n  lineBreakG.lastIndex = 0;\n\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n\nclass BaseParser {\n  constructor() {\n    this.sawUnambiguousESM = false;\n    this.ambiguousScriptDifferentAst = false;\n  }\n\n  hasPlugin(name) {\n    return this.plugins.has(name);\n  }\n\n  getPluginOption(plugin, name) {\n    if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n  }\n\n}\n\nfunction last(stack) {\n  return stack[stack.length - 1];\n}\n\nclass CommentsParser extends BaseParser {\n  addComment(comment) {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.trailingComments.push(comment);\n    this.state.leadingComments.push(comment);\n  }\n\n  adjustCommentsAfterTrailingComma(node, elements, takeAllComments) {\n    if (this.state.leadingComments.length === 0) {\n      return;\n    }\n\n    let lastElement = null;\n    let i = elements.length;\n\n    while (lastElement === null && i > 0) {\n      lastElement = elements[--i];\n    }\n\n    if (lastElement === null) {\n      return;\n    }\n\n    for (let j = 0; j < this.state.leadingComments.length; j++) {\n      if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n        this.state.leadingComments.splice(j, 1);\n        j--;\n      }\n    }\n\n    const newTrailingComments = [];\n\n    for (let i = 0; i < this.state.leadingComments.length; i++) {\n      const leadingComment = this.state.leadingComments[i];\n\n      if (leadingComment.end < node.end) {\n        newTrailingComments.push(leadingComment);\n\n        if (!takeAllComments) {\n          this.state.leadingComments.splice(i, 1);\n          i--;\n        }\n      } else {\n        if (node.trailingComments === undefined) {\n          node.trailingComments = [];\n        }\n\n        node.trailingComments.push(leadingComment);\n      }\n    }\n\n    if (takeAllComments) this.state.leadingComments = [];\n\n    if (newTrailingComments.length > 0) {\n      lastElement.trailingComments = newTrailingComments;\n    } else if (lastElement.trailingComments !== undefined) {\n      lastElement.trailingComments = [];\n    }\n  }\n\n  processComment(node) {\n    if (node.type === \"Program\" && node.body.length > 0) return;\n    const stack = this.state.commentStack;\n    let firstChild, lastChild, trailingComments, i, j;\n\n    if (this.state.trailingComments.length > 0) {\n      if (this.state.trailingComments[0].start >= node.end) {\n        trailingComments = this.state.trailingComments;\n        this.state.trailingComments = [];\n      } else {\n        this.state.trailingComments.length = 0;\n      }\n    } else if (stack.length > 0) {\n      const lastInStack = last(stack);\n\n      if (lastInStack.trailingComments && lastInStack.trailingComments[0].start >= node.end) {\n        trailingComments = lastInStack.trailingComments;\n        delete lastInStack.trailingComments;\n      }\n    }\n\n    if (stack.length > 0 && last(stack).start >= node.start) {\n      firstChild = stack.pop();\n    }\n\n    while (stack.length > 0 && last(stack).start >= node.start) {\n      lastChild = stack.pop();\n    }\n\n    if (!lastChild && firstChild) lastChild = firstChild;\n\n    if (firstChild) {\n      switch (node.type) {\n        case \"ObjectExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties);\n          break;\n\n        case \"ObjectPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties, true);\n          break;\n\n        case \"CallExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.arguments);\n          break;\n\n        case \"ArrayExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements);\n          break;\n\n        case \"ArrayPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements, true);\n          break;\n      }\n    } else if (this.state.commentPreviousNode && (this.state.commentPreviousNode.type === \"ImportSpecifier\" && node.type !== \"ImportSpecifier\" || this.state.commentPreviousNode.type === \"ExportSpecifier\" && node.type !== \"ExportSpecifier\")) {\n      this.adjustCommentsAfterTrailingComma(node, [this.state.commentPreviousNode]);\n    }\n\n    if (lastChild) {\n      if (lastChild.leadingComments) {\n        if (lastChild !== node && lastChild.leadingComments.length > 0 && last(lastChild.leadingComments).end <= node.start) {\n          node.leadingComments = lastChild.leadingComments;\n          delete lastChild.leadingComments;\n        } else {\n          for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {\n            if (lastChild.leadingComments[i].end <= node.start) {\n              node.leadingComments = lastChild.leadingComments.splice(0, i + 1);\n              break;\n            }\n          }\n        }\n      }\n    } else if (this.state.leadingComments.length > 0) {\n      if (last(this.state.leadingComments).end <= node.start) {\n        if (this.state.commentPreviousNode) {\n          for (j = 0; j < this.state.leadingComments.length; j++) {\n            if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n              this.state.leadingComments.splice(j, 1);\n              j--;\n            }\n          }\n        }\n\n        if (this.state.leadingComments.length > 0) {\n          node.leadingComments = this.state.leadingComments;\n          this.state.leadingComments = [];\n        }\n      } else {\n        for (i = 0; i < this.state.leadingComments.length; i++) {\n          if (this.state.leadingComments[i].end > node.start) {\n            break;\n          }\n        }\n\n        const leadingComments = this.state.leadingComments.slice(0, i);\n\n        if (leadingComments.length) {\n          node.leadingComments = leadingComments;\n        }\n\n        trailingComments = this.state.leadingComments.slice(i);\n\n        if (trailingComments.length === 0) {\n          trailingComments = null;\n        }\n      }\n    }\n\n    this.state.commentPreviousNode = node;\n\n    if (trailingComments) {\n      if (trailingComments.length && trailingComments[0].start >= node.start && last(trailingComments).end <= node.end) {\n        node.innerComments = trailingComments;\n      } else {\n        node.trailingComments = trailingComments;\n      }\n    }\n\n    stack.push(node);\n  }\n\n}\n\nconst Errors = Object.freeze({\n  ArgumentsDisallowedInInitializer: \"'arguments' is not allowed in class field initializer\",\n  AsyncFunctionInSingleStatementContext: \"Async functions can only be declared at the top level or inside a block\",\n  AwaitBindingIdentifier: \"Can not use 'await' as identifier inside an async function\",\n  AwaitExpressionFormalParameter: \"await is not allowed in async function parameters\",\n  AwaitNotInAsyncFunction: \"Can not use keyword 'await' outside an async function\",\n  BadGetterArity: \"getter must not have any formal parameters\",\n  BadSetterArity: \"setter must have exactly one formal parameter\",\n  BadSetterRestParameter: \"setter function argument must not be a rest parameter\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'\",\n  ConstructorClassPrivateField: \"Classes may not have a private field named '#constructor'\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor\",\n  ConstructorIsAsync: \"Constructor can't be an async function\",\n  ConstructorIsGenerator: \"Constructor can't be a generator\",\n  DeclarationMissingInitializer: \"%0 require an initialization value\",\n  DecoratorBeforeExport: \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax\",\n  DecoratorConstructor: \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass: \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon\",\n  DeletePrivateField: \"Deleting a private field is not allowed\",\n  DestructureNamedImport: \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: \"`%0` has already been exported. Exported identifiers must be unique.\",\n  DuplicateProto: \"Redefinition of __proto__ property\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag\",\n  ElementAfterRest: \"Rest element must be last element\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape\",\n  ForInOfLoopInitializer: \"%0 loop variable declaration may not have an initializer\",\n  GeneratorInSingleStatementContext: \"Generators can only be declared at the top level or inside a block\",\n  IllegalBreakContinue: \"Unsyntactic %0\",\n  IllegalLanguageModeDirective: \"Illegal 'use strict' directive in function with non-simple parameter list\",\n  IllegalReturn: \"'return' outside of function\",\n  ImportCallArgumentTrailingComma: \"Trailing comma is disallowed inside import(...) arguments\",\n  ImportCallArity: \"import() requires exactly one argument\",\n  ImportCallArityLtOne: \"Dynamic imports require a parameter: import('a.js')\",\n  ImportCallNotNewExpression: \"Cannot use new with import(...)\",\n  ImportCallSpreadArgument: \"... is not allowed in import()\",\n  ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n  ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n  InvalidCodePoint: \"Code point out of bounds\",\n  InvalidDigit: \"Expected number in radix %0\",\n  InvalidEscapeSequence: \"Bad character escape sequence\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template\",\n  InvalidEscapedReservedWord: \"Escape sequence in keyword %0\",\n  InvalidIdentifier: \"Invalid identifier %0\",\n  InvalidLhs: \"Invalid left-hand side in %0\",\n  InvalidLhsBinding: \"Binding invalid left-hand side in %0\",\n  InvalidNumber: \"Invalid number\",\n  InvalidOrUnexpectedToken: \"Unexpected character '%0'\",\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern\",\n  InvalidPrivateFieldResolution: \"Private name #%0 is not defined\",\n  InvalidPropertyBindingPattern: \"Binding member expression\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument\",\n  LabelRedeclaration: \"Label '%0' is already declared\",\n  LetInLexicalBinding: \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag\",\n  MissingClassName: \"A class name is required\",\n  MissingEqInAssignment: \"Only '=' operator can be used for specifying default value.\",\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX\",\n  MixingCoalesceWithLogical: \"Nullish coalescing operator(??) requires parens when mixing with logical operators\",\n  ModuleExportUndefined: \"Export '%0' is not defined\",\n  MultipleDefaultsInSwitch: \"Multiple default clauses\",\n  NewlineAfterThrow: \"Illegal newline after throw\",\n  NoCatchOrFinally: \"Missing catch or finally clause\",\n  NumberIdentifier: \"Identifier directly after number\",\n  NumericSeparatorInEscapeSequence: \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences\",\n  ObsoleteAwaitStar: \"await* has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew: \"constructors in/after an Optional Chain are not allowed\",\n  OptionalChainingNoTemplate: \"Tagged Template Literals are not allowed in optionalChain\",\n  ParamDupe: \"Argument name clash\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter\",\n  PatternHasMethod: \"Object pattern can't contain methods\",\n  PipelineBodyNoArrow: 'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized',\n  PipelineBodySequenceExpression: \"Pipeline body may not be a comma-separated sequence expression\",\n  PipelineHeadSequenceExpression: \"Pipeline head should not be a comma-separated sequence expression\",\n  PipelineTopicUnused: \"Pipeline is in topic style but does not use topic reference\",\n  PrimaryTopicNotAllowed: \"Topic reference was used in a lexical context without topic binding\",\n  PrimaryTopicRequiresSmartPipeline: \"Primary Topic Reference found but pipelineOperator not passed 'smart' for 'proposal' option.\",\n  PrivateNameRedeclaration: \"Duplicate private name #%0\",\n  RecordExpressionBarIncorrectEndSyntaxType: \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  RecordExpressionBarIncorrectStartSyntaxType: \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  RecordExpressionHashIncorrectStartSyntaxType: \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element\",\n  SloppyFunction: \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement\",\n  StaticPrototype: \"Classes may not have static property named prototype\",\n  StrictDelete: \"Deleting local variable in strict mode\",\n  StrictEvalArguments: \"Assigning to '%0' in strict mode\",\n  StrictEvalArgumentsBinding: \"Binding '%0' in strict mode\",\n  StrictFunction: \"In strict mode code, functions can only be declared at top level or inside a block\",\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode\",\n  StrictWith: \"'with' in strict mode\",\n  SuperNotAllowed: \"super() is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super\",\n  TrailingDecorator: \"Decorators must be attached to a class element\",\n  TupleExpressionBarIncorrectEndSyntaxType: \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  TupleExpressionBarIncorrectStartSyntaxType: \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  TupleExpressionHashIncorrectStartSyntaxType: \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder\",\n  UnexpectedAwaitAfterPipelineBody: 'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token\",\n  UnexpectedImportExport: \"'import' and 'export' may only appear at the top level\",\n  UnexpectedKeyword: \"Unexpected keyword '%0'\",\n  UnexpectedLeadingDecorator: \"Leading decorators must be attached to a class declaration\",\n  UnexpectedLexicalDeclaration: \"Lexical declaration cannot appear in a single-statement context\",\n  UnexpectedNewTarget: \"new.target can only be used in functions\",\n  UnexpectedNumericSeparator: \"A numeric separator is only allowed between two digits\",\n  UnexpectedPrivateField: \"Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\\n or a property of member expression (i.e. this.#p).\",\n  UnexpectedReservedWord: \"Unexpected reserved word '%0'\",\n  UnexpectedSuper: \"super is only allowed in object methods and classes\",\n  UnexpectedToken: \"Unexpected token '%'\",\n  UnexpectedTokenUnaryExponentiation: \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport: \"A decorated export must export a class declaration\",\n  UnsupportedDefaultExport: \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"import can only be used in import() or import.meta\",\n  UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1\",\n  UnsupportedParameterDecorator: \"Decorators cannot be used to decorate parameters\",\n  UnsupportedPropertyDecorator: \"Decorators cannot be used to decorate object literal properties\",\n  UnsupportedSuper: \"super can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop])\",\n  UnterminatedComment: \"Unterminated comment\",\n  UnterminatedRegExp: \"Unterminated regular expression\",\n  UnterminatedString: \"Unterminated string constant\",\n  UnterminatedTemplate: \"Unterminated template\",\n  VarRedeclaration: \"Identifier '%0' has already been declared\",\n  YieldBindingIdentifier: \"Can not use 'yield' as identifier inside a generator\",\n  YieldInParameter: \"yield is not allowed in generator parameters\",\n  ZeroDigitNumericSeparator: \"Numeric separator can not be used after leading 0\"\n});\n\nclass LocationParser extends CommentsParser {\n  getLocationForPosition(pos) {\n    let loc;\n    if (pos === this.state.start) loc = this.state.startLoc;else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;else if (pos === this.state.end) loc = this.state.endLoc;else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;else loc = getLineInfo(this.input, pos);\n    return loc;\n  }\n\n  raise(pos, errorTemplate, ...params) {\n    return this.raiseWithData(pos, undefined, errorTemplate, ...params);\n  }\n\n  raiseWithData(pos, data, errorTemplate, ...params) {\n    const loc = this.getLocationForPosition(pos);\n    const message = errorTemplate.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign({\n      loc,\n      pos\n    }, data), message);\n  }\n\n  _raise(errorContext, message) {\n    const err = new SyntaxError(message);\n    Object.assign(err, errorContext);\n\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n\n}\n\nfunction isSimpleProperty(node) {\n  return node != null && node.type === \"Property\" && node.kind === \"init\" && node.method === false;\n}\n\nvar estree = superClass => class extends superClass {\n  estreeParseRegExpLiteral({\n    pattern,\n    flags\n  }) {\n    let regex = null;\n\n    try {\n      regex = new RegExp(pattern, flags);\n    } catch (e) {}\n\n    const node = this.estreeParseLiteral(regex);\n    node.regex = {\n      pattern,\n      flags\n    };\n    return node;\n  }\n\n  estreeParseBigIntLiteral(value) {\n    const bigInt = typeof BigInt !== \"undefined\" ? BigInt(value) : null;\n    const node = this.estreeParseLiteral(bigInt);\n    node.bigint = String(node.value || value);\n    return node;\n  }\n\n  estreeParseLiteral(value) {\n    return this.parseLiteral(value, \"Literal\");\n  }\n\n  directiveToStmt(directive) {\n    const directiveLiteral = directive.value;\n    const stmt = this.startNodeAt(directive.start, directive.loc.start);\n    const expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);\n    expression.value = directiveLiteral.value;\n    expression.raw = directiveLiteral.extra.raw;\n    stmt.expression = this.finishNodeAt(expression, \"Literal\", directiveLiteral.end, directiveLiteral.loc.end);\n    stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n    return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.end, directive.loc.end);\n  }\n\n  initFunction(node, isAsync) {\n    super.initFunction(node, isAsync);\n    node.expression = false;\n  }\n\n  checkDeclaration(node) {\n    if (isSimpleProperty(node)) {\n      this.checkDeclaration(node.value);\n    } else {\n      super.checkDeclaration(node);\n    }\n  }\n\n  checkGetterSetterParams(method) {\n    const prop = method;\n    const paramCount = prop.kind === \"get\" ? 0 : 1;\n    const start = prop.start;\n\n    if (prop.value.params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, Errors.BadGetterArity);\n      } else {\n        this.raise(start, Errors.BadSetterArity);\n      }\n    } else if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\") {\n      this.raise(start, Errors.BadSetterRestParameter);\n    }\n  }\n\n  checkLVal(expr, bindingType = BIND_NONE, checkClashes, contextDescription, disallowLetBinding) {\n    switch (expr.type) {\n      case \"ObjectPattern\":\n        expr.properties.forEach(prop => {\n          this.checkLVal(prop.type === \"Property\" ? prop.value : prop, bindingType, checkClashes, \"object destructuring pattern\", disallowLetBinding);\n        });\n        break;\n\n      default:\n        super.checkLVal(expr, bindingType, checkClashes, contextDescription, disallowLetBinding);\n    }\n  }\n\n  checkDuplicatedProto(prop, protoRef, refExpressionErrors) {\n    if (prop.type === \"SpreadElement\" || prop.computed || prop.method || prop.shorthand) {\n      return;\n    }\n\n    const key = prop.key;\n    const name = key.type === \"Identifier\" ? key.name : String(key.value);\n\n    if (name === \"__proto__\" && prop.kind === \"init\") {\n      if (protoRef.used) {\n        if (refExpressionErrors && refExpressionErrors.doubleProto === -1) {\n          refExpressionErrors.doubleProto = key.start;\n        } else {\n          this.raise(key.start, Errors.DuplicateProto);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  isValidDirective(stmt) {\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && (!stmt.expression.extra || !stmt.expression.extra.parenthesized);\n  }\n\n  stmtToDirective(stmt) {\n    const directive = super.stmtToDirective(stmt);\n    const value = stmt.expression.value;\n    directive.value.value = value;\n    return directive;\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end) {\n    super.parseBlockBody(node, allowDirectives, topLevel, end);\n    const directiveStatements = node.directives.map(d => this.directiveToStmt(d));\n    node.body = directiveStatements.concat(node.body);\n    delete node.directives;\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true);\n\n    if (method.typeParameters) {\n      method.value.typeParameters = method.typeParameters;\n      delete method.typeParameters;\n    }\n\n    classBody.body.push(method);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    switch (this.state.type) {\n      case types.num:\n      case types.string:\n        return this.estreeParseLiteral(this.state.value);\n\n      case types.regexp:\n        return this.estreeParseRegExpLiteral(this.state.value);\n\n      case types.bigint:\n        return this.estreeParseBigIntLiteral(this.state.value);\n\n      case types._null:\n        return this.estreeParseLiteral(null);\n\n      case types._true:\n        return this.estreeParseLiteral(true);\n\n      case types._false:\n        return this.estreeParseLiteral(false);\n\n      default:\n        return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n\n  parseLiteral(value, type, startPos, startLoc) {\n    const node = super.parseLiteral(value, type, startPos, startLoc);\n    node.raw = node.extra.raw;\n    delete node.extra;\n    return node;\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    super.parseFunctionBody(node, allowExpression, isMethod);\n    node.expression = node.body.type !== \"BlockStatement\";\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    let funcNode = this.startNode();\n    funcNode.kind = node.kind;\n    funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n    funcNode.type = \"FunctionExpression\";\n    delete funcNode.kind;\n    node.value = funcNode;\n    type = type === \"ClassMethod\" ? \"MethodDefinition\" : type;\n    return this.finishNode(node, type);\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, containsEsc) {\n    const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, containsEsc);\n\n    if (node) {\n      node.type = \"Property\";\n      if (node.kind === \"method\") node.kind = \"init\";\n      node.shorthand = false;\n    }\n\n    return node;\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    const node = super.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n\n    if (node) {\n      node.kind = \"init\";\n      node.type = \"Property\";\n    }\n\n    return node;\n  }\n\n  toAssignable(node) {\n    if (isSimpleProperty(node)) {\n      this.toAssignable(node.value);\n      return node;\n    }\n\n    return super.toAssignable(node);\n  }\n\n  toAssignableObjectExpressionProp(prop, isLast) {\n    if (prop.kind === \"get\" || prop.kind === \"set\") {\n      throw this.raise(prop.key.start, Errors.PatternHasAccessor);\n    } else if (prop.method) {\n      throw this.raise(prop.key.start, Errors.PatternHasMethod);\n    } else {\n      super.toAssignableObjectExpressionProp(prop, isLast);\n    }\n  }\n\n  finishCallExpression(node, optional) {\n    super.finishCallExpression(node, optional);\n\n    if (node.callee.type === \"Import\") {\n      node.type = \"ImportExpression\";\n      node.source = node.arguments[0];\n      delete node.arguments;\n      delete node.callee;\n    }\n\n    return node;\n  }\n\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    if (!exprList) {\n      return;\n    }\n\n    super.toReferencedListDeep(exprList, isParenthesizedExpr);\n  }\n\n  parseExport(node) {\n    super.parseExport(node);\n\n    switch (node.type) {\n      case \"ExportAllDeclaration\":\n        node.exported = null;\n        break;\n\n      case \"ExportNamedDeclaration\":\n        if (node.specifiers.length === 1 && node.specifiers[0].type === \"ExportNamespaceSpecifier\") {\n          node.type = \"ExportAllDeclaration\";\n          node.exported = node.specifiers[0].exported;\n          delete node.specifiers;\n        }\n\n        break;\n    }\n\n    return node;\n  }\n\n};\n\nclass TokContext {\n  constructor(token, isExpr, preserveSpace, override) {\n    this.token = token;\n    this.isExpr = !!isExpr;\n    this.preserveSpace = !!preserveSpace;\n    this.override = override;\n  }\n\n}\n\nconst types$1 = {\n  braceStatement: new TokContext(\"{\", false),\n  braceExpression: new TokContext(\"{\", true),\n  templateQuasi: new TokContext(\"${\", false),\n  parenStatement: new TokContext(\"(\", false),\n  parenExpression: new TokContext(\"(\", true),\n  template: new TokContext(\"`\", true, true, p => p.readTmplToken()),\n  functionExpression: new TokContext(\"function\", true),\n  functionStatement: new TokContext(\"function\", false)\n};\n\ntypes.parenR.updateContext = types.braceR.updateContext = function () {\n  if (this.state.context.length === 1) {\n    this.state.exprAllowed = true;\n    return;\n  }\n\n  let out = this.state.context.pop();\n\n  if (out === types$1.braceStatement && this.curContext().token === \"function\") {\n    out = this.state.context.pop();\n  }\n\n  this.state.exprAllowed = !out.isExpr;\n};\n\ntypes.name.updateContext = function (prevType) {\n  let allowed = false;\n\n  if (prevType !== types.dot) {\n    if (this.state.value === \"of\" && !this.state.exprAllowed && prevType !== types._function && prevType !== types._class || this.state.value === \"yield\" && this.prodParam.hasYield) {\n      allowed = true;\n    }\n  }\n\n  this.state.exprAllowed = allowed;\n\n  if (this.state.isIterator) {\n    this.state.isIterator = false;\n  }\n};\n\ntypes.braceL.updateContext = function (prevType) {\n  this.state.context.push(this.braceIsBlock(prevType) ? types$1.braceStatement : types$1.braceExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes.dollarBraceL.updateContext = function () {\n  this.state.context.push(types$1.templateQuasi);\n  this.state.exprAllowed = true;\n};\n\ntypes.parenL.updateContext = function (prevType) {\n  const statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;\n  this.state.context.push(statementParens ? types$1.parenStatement : types$1.parenExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes.incDec.updateContext = function () {};\n\ntypes._function.updateContext = types._class.updateContext = function (prevType) {\n  if (prevType === types.dot || prevType === types.questionDot) ;else if (prevType.beforeExpr && prevType !== types.semi && prevType !== types._else && !(prevType === types._return && lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start))) && !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat)) {\n    this.state.context.push(types$1.functionExpression);\n  } else {\n    this.state.context.push(types$1.functionStatement);\n  }\n  this.state.exprAllowed = false;\n};\n\ntypes.backQuote.updateContext = function () {\n  if (this.curContext() === types$1.template) {\n    this.state.context.pop();\n  } else {\n    this.state.context.push(types$1.template);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntypes.star.updateContext = function () {\n  this.state.exprAllowed = false;\n};\n\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08c7\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\u9ffc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7ca\\ua7f5-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf\\u1ac0\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\nconst nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nconst nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nconst astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 107, 20, 28, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8952, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42717, 35, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];\nconst astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\n\nfunction isInAstralSet(code, set) {\n  let pos = 0x10000;\n\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n\n  return false;\n}\n\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\nconst reservedWords = {\n  keyword: [\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\"],\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n  strictBind: [\"eval\", \"arguments\"]\n};\nconst keywords$1 = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\nfunction isReservedWord(word, inModule) {\n  return inModule && word === \"await\" || word === \"enum\";\n}\n\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\n\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\n\nfunction isKeyword(word) {\n  return keywords$1.has(word);\n}\n\nconst keywordRelationalOperator = /^in(stanceof)?$/;\n\nfunction isIteratorStart(current, next) {\n  return current === 64 && next === 64;\n}\n\nconst reservedTypes = new Set([\"_\", \"any\", \"bool\", \"boolean\", \"empty\", \"extends\", \"false\", \"interface\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\"]);\nconst FlowErrors = Object.freeze({\n  AmbiguousConditionalArrow: \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind: \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module\",\n  AssignReservedType: \"Cannot overwrite reserved type %0\",\n  DeclareClassElement: \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer: \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement\",\n  EnumBooleanMemberNotInitialized: \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n  EnumDuplicateMemberName: \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n  EnumInconsistentMemberValues: \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n  EnumInvalidExplicitType: \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidExplicitTypeUnknownSupplied: \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidMemberInitializerPrimaryType: \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n  EnumInvalidMemberInitializerSymbolType: \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n  EnumInvalidMemberInitializerUnknownType: \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n  EnumInvalidMemberName: \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n  EnumNumberMemberNotInitialized: \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n  EnumStringMemberInconsistentlyInitailized: \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n  ImportTypeShorthandOnlyInPureImport: \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements\",\n  InexactInsideExact: \"Explicit inexact syntax cannot appear inside an explicit exact object type\",\n  InexactInsideNonObject: \"Explicit inexact syntax cannot appear in class or interface definitions\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance\",\n  InvalidNonTypeImportInDeclareModule: \"Imports within a `declare module` body must always be `import type` or `import typeof`\",\n  MissingTypeParamDefault: \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule: \"`declare module` cannot be used inside another `declare module`\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment\",\n  OptionalBindingPattern: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  SpreadVariance: \"Spread properties cannot have variance\",\n  TypeBeforeInitializer: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\",\n  TypeCastInPattern: \"The type cast expression is expected to be wrapped with parenthesis\",\n  UnexpectedExplicitInexactInObject: \"Explicit inexact syntax must appear at the end of an inexact object\",\n  UnexpectedReservedType: \"Unexpected reserved type %0\",\n  UnexpectedReservedUnderscore: \"`_` is only allowed as a type argument to call or new\",\n  UnexpectedSpaceBetweenModuloChecks: \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType: \"Spread operator cannot appear in class or interface definitions\",\n  UnexpectedSubtractionOperand: 'Unexpected token, expected \"number\" or \"bigint\"',\n  UnexpectedTokenAfterTypeParameter: \"Expected an arrow function after this type parameter declaration\",\n  UnsupportedDeclareExportKind: \"`declare export %0` is not supported. Use `%1` instead\",\n  UnsupportedStatementInDeclareModule: \"Only declares and type imports are allowed inside declare module\",\n  UnterminatedFlowComment: \"Unterminated flow-comment\"\n});\n\nfunction isEsModuleType(bodyElement) {\n  return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\n}\n\nfunction hasTypeImportKind(node) {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(state) {\n  return (state.type === types.name || !!state.type.keyword) && state.value !== \"from\";\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\"\n};\n\nfunction partition(list, test) {\n  const list1 = [];\n  const list2 = [];\n\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\nvar flow = superClass => class extends superClass {\n  constructor(options, input) {\n    super(options, input);\n    this.flowPragma = undefined;\n  }\n\n  shouldParseTypes() {\n    return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n  }\n\n  shouldParseEnums() {\n    return !!this.getPluginOption(\"flow\", \"enums\");\n  }\n\n  finishToken(type, val) {\n    if (type !== types.string && type !== types.semi && type !== types.interpreterDirective) {\n      if (this.flowPragma === undefined) {\n        this.flowPragma = null;\n      }\n    }\n\n    return super.finishToken(type, val);\n  }\n\n  addComment(comment) {\n    if (this.flowPragma === undefined) {\n      const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n      if (!matches) ;else if (matches[1] === \"flow\") {\n        this.flowPragma = \"flow\";\n      } else if (matches[1] === \"noflow\") {\n        this.flowPragma = \"noflow\";\n      } else {\n        throw new Error(\"Unexpected flow pragma\");\n      }\n    }\n\n    return super.addComment(comment);\n  }\n\n  flowParseTypeInitialiser(tok) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(tok || types.colon);\n    const type = this.flowParseType();\n    this.state.inType = oldInType;\n    return type;\n  }\n\n  flowParsePredicate() {\n    const node = this.startNode();\n    const moduloLoc = this.state.startLoc;\n    const moduloPos = this.state.start;\n    this.expect(types.modulo);\n    const checksLoc = this.state.startLoc;\n    this.expectContextual(\"checks\");\n\n    if (moduloLoc.line !== checksLoc.line || moduloLoc.column !== checksLoc.column - 1) {\n      this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);\n    }\n\n    if (this.eat(types.parenL)) {\n      node.value = this.parseExpression();\n      this.expect(types.parenR);\n      return this.finishNode(node, \"DeclaredPredicate\");\n    } else {\n      return this.finishNode(node, \"InferredPredicate\");\n    }\n  }\n\n  flowParseTypeAndPredicateInitialiser() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(types.colon);\n    let type = null;\n    let predicate = null;\n\n    if (this.match(types.modulo)) {\n      this.state.inType = oldInType;\n      predicate = this.flowParsePredicate();\n    } else {\n      type = this.flowParseType();\n      this.state.inType = oldInType;\n\n      if (this.match(types.modulo)) {\n        predicate = this.flowParsePredicate();\n      }\n    }\n\n    return [type, predicate];\n  }\n\n  flowParseDeclareClass(node) {\n    this.next();\n    this.flowParseInterfaceish(node, true);\n    return this.finishNode(node, \"DeclareClass\");\n  }\n\n  flowParseDeclareFunction(node) {\n    this.next();\n    const id = node.id = this.parseIdentifier();\n    const typeNode = this.startNode();\n    const typeContainer = this.startNode();\n\n    if (this.isRelational(\"<\")) {\n      typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      typeNode.typeParameters = null;\n    }\n\n    this.expect(types.parenL);\n    const tmp = this.flowParseFunctionTypeParams();\n    typeNode.params = tmp.params;\n    typeNode.rest = tmp.rest;\n    this.expect(types.parenR);\n    [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n    typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n    id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n    this.resetEndLocation(id);\n    this.semicolon();\n    return this.finishNode(node, \"DeclareFunction\");\n  }\n\n  flowParseDeclare(node, insideModule) {\n    if (this.match(types._class)) {\n      return this.flowParseDeclareClass(node);\n    } else if (this.match(types._function)) {\n      return this.flowParseDeclareFunction(node);\n    } else if (this.match(types._var)) {\n      return this.flowParseDeclareVariable(node);\n    } else if (this.eatContextual(\"module\")) {\n      if (this.match(types.dot)) {\n        return this.flowParseDeclareModuleExports(node);\n      } else {\n        if (insideModule) {\n          this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);\n        }\n\n        return this.flowParseDeclareModule(node);\n      }\n    } else if (this.isContextual(\"type\")) {\n      return this.flowParseDeclareTypeAlias(node);\n    } else if (this.isContextual(\"opaque\")) {\n      return this.flowParseDeclareOpaqueType(node);\n    } else if (this.isContextual(\"interface\")) {\n      return this.flowParseDeclareInterface(node);\n    } else if (this.match(types._export)) {\n      return this.flowParseDeclareExportDeclaration(node, insideModule);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  flowParseDeclareVariable(node) {\n    this.next();\n    node.id = this.flowParseTypeAnnotatableIdentifier(true);\n    this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n    this.semicolon();\n    return this.finishNode(node, \"DeclareVariable\");\n  }\n\n  flowParseDeclareModule(node) {\n    this.scope.enter(SCOPE_OTHER);\n\n    if (this.match(types.string)) {\n      node.id = this.parseExprAtom();\n    } else {\n      node.id = this.parseIdentifier();\n    }\n\n    const bodyNode = node.body = this.startNode();\n    const body = bodyNode.body = [];\n    this.expect(types.braceL);\n\n    while (!this.match(types.braceR)) {\n      let bodyNode = this.startNode();\n\n      if (this.match(types._import)) {\n        this.next();\n\n        if (!this.isContextual(\"type\") && !this.match(types._typeof)) {\n          this.raise(this.state.lastTokStart, FlowErrors.InvalidNonTypeImportInDeclareModule);\n        }\n\n        this.parseImport(bodyNode);\n      } else {\n        this.expectContextual(\"declare\", FlowErrors.UnsupportedStatementInDeclareModule);\n        bodyNode = this.flowParseDeclare(bodyNode, true);\n      }\n\n      body.push(bodyNode);\n    }\n\n    this.scope.exit();\n    this.expect(types.braceR);\n    this.finishNode(bodyNode, \"BlockStatement\");\n    let kind = null;\n    let hasModuleExport = false;\n    body.forEach(bodyElement => {\n      if (isEsModuleType(bodyElement)) {\n        if (kind === \"CommonJS\") {\n          this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n        }\n\n        kind = \"ES\";\n      } else if (bodyElement.type === \"DeclareModuleExports\") {\n        if (hasModuleExport) {\n          this.raise(bodyElement.start, FlowErrors.DuplicateDeclareModuleExports);\n        }\n\n        if (kind === \"ES\") {\n          this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n        }\n\n        kind = \"CommonJS\";\n        hasModuleExport = true;\n      }\n    });\n    node.kind = kind || \"CommonJS\";\n    return this.finishNode(node, \"DeclareModule\");\n  }\n\n  flowParseDeclareExportDeclaration(node, insideModule) {\n    this.expect(types._export);\n\n    if (this.eat(types._default)) {\n      if (this.match(types._function) || this.match(types._class)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n      } else {\n        node.declaration = this.flowParseType();\n        this.semicolon();\n      }\n\n      node.default = true;\n      return this.finishNode(node, \"DeclareExportDeclaration\");\n    } else {\n      if (this.match(types._const) || this.isLet() || (this.isContextual(\"type\") || this.isContextual(\"interface\")) && !insideModule) {\n        const label = this.state.value;\n        const suggestion = exportSuggestions[label];\n        throw this.raise(this.state.start, FlowErrors.UnsupportedDeclareExportKind, label, suggestion);\n      }\n\n      if (this.match(types._var) || this.match(types._function) || this.match(types._class) || this.isContextual(\"opaque\")) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n        node.default = false;\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else if (this.match(types.star) || this.match(types.braceL) || this.isContextual(\"interface\") || this.isContextual(\"type\") || this.isContextual(\"opaque\")) {\n        node = this.parseExport(node);\n\n        if (node.type === \"ExportNamedDeclaration\") {\n          node.type = \"ExportDeclaration\";\n          node.default = false;\n          delete node.exportKind;\n        }\n\n        node.type = \"Declare\" + node.type;\n        return node;\n      }\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParseDeclareModuleExports(node) {\n    this.next();\n    this.expectContextual(\"exports\");\n    node.typeAnnotation = this.flowParseTypeAnnotation();\n    this.semicolon();\n    return this.finishNode(node, \"DeclareModuleExports\");\n  }\n\n  flowParseDeclareTypeAlias(node) {\n    this.next();\n    this.flowParseTypeAlias(node);\n    node.type = \"DeclareTypeAlias\";\n    return node;\n  }\n\n  flowParseDeclareOpaqueType(node) {\n    this.next();\n    this.flowParseOpaqueType(node, true);\n    node.type = \"DeclareOpaqueType\";\n    return node;\n  }\n\n  flowParseDeclareInterface(node) {\n    this.next();\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"DeclareInterface\");\n  }\n\n  flowParseInterfaceish(node, isClass = false) {\n    node.id = this.flowParseRestrictedIdentifier(!isClass, true);\n    this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.extends = [];\n    node.implements = [];\n    node.mixins = [];\n\n    if (this.eat(types._extends)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (!isClass && this.eat(types.comma));\n    }\n\n    if (this.isContextual(\"mixins\")) {\n      this.next();\n\n      do {\n        node.mixins.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types.comma));\n    }\n\n    if (this.isContextual(\"implements\")) {\n      this.next();\n\n      do {\n        node.implements.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types.comma));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: isClass,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: isClass,\n      allowInexact: false\n    });\n  }\n\n  flowParseInterfaceExtends() {\n    const node = this.startNode();\n    node.id = this.flowParseQualifiedTypeIdentifier();\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    } else {\n      node.typeParameters = null;\n    }\n\n    return this.finishNode(node, \"InterfaceExtends\");\n  }\n\n  flowParseInterface(node) {\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"InterfaceDeclaration\");\n  }\n\n  checkNotUnderscore(word) {\n    if (word === \"_\") {\n      this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);\n    }\n  }\n\n  checkReservedType(word, startLoc, declaration) {\n    if (!reservedTypes.has(word)) return;\n    this.raise(startLoc, declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, word);\n  }\n\n  flowParseRestrictedIdentifier(liberal, declaration) {\n    this.checkReservedType(this.state.value, this.state.start, declaration);\n    return this.parseIdentifier(liberal);\n  }\n\n  flowParseTypeAlias(node) {\n    node.id = this.flowParseRestrictedIdentifier(false, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.right = this.flowParseTypeInitialiser(types.eq);\n    this.semicolon();\n    return this.finishNode(node, \"TypeAlias\");\n  }\n\n  flowParseOpaqueType(node, declare) {\n    this.expectContextual(\"type\");\n    node.id = this.flowParseRestrictedIdentifier(true, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.supertype = null;\n\n    if (this.match(types.colon)) {\n      node.supertype = this.flowParseTypeInitialiser(types.colon);\n    }\n\n    node.impltype = null;\n\n    if (!declare) {\n      node.impltype = this.flowParseTypeInitialiser(types.eq);\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"OpaqueType\");\n  }\n\n  flowParseTypeParameter(requireDefault = false) {\n    const nodeStart = this.state.start;\n    const node = this.startNode();\n    const variance = this.flowParseVariance();\n    const ident = this.flowParseTypeAnnotatableIdentifier();\n    node.name = ident.name;\n    node.variance = variance;\n    node.bound = ident.typeAnnotation;\n\n    if (this.match(types.eq)) {\n      this.eat(types.eq);\n      node.default = this.flowParseType();\n    } else {\n      if (requireDefault) {\n        this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);\n      }\n    }\n\n    return this.finishNode(node, \"TypeParameter\");\n  }\n\n  flowParseTypeParameterDeclaration() {\n    const oldInType = this.state.inType;\n    const node = this.startNode();\n    node.params = [];\n    this.state.inType = true;\n\n    if (this.isRelational(\"<\") || this.match(types.jsxTagStart)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    let defaultRequired = false;\n\n    do {\n      const typeParameter = this.flowParseTypeParameter(defaultRequired);\n      node.params.push(typeParameter);\n\n      if (typeParameter.default) {\n        defaultRequired = true;\n      }\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types.comma);\n      }\n    } while (!this.isRelational(\">\"));\n\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterDeclaration\");\n  }\n\n  flowParseTypeParameterInstantiation() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expectRelational(\"<\");\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n    this.state.noAnonFunctionType = false;\n\n    while (!this.isRelational(\">\")) {\n      node.params.push(this.flowParseType());\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types.comma);\n      }\n    }\n\n    this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseTypeParameterInstantiationCallOrNew() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expectRelational(\"<\");\n\n    while (!this.isRelational(\">\")) {\n      node.params.push(this.flowParseTypeOrImplicitInstantiation());\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types.comma);\n      }\n    }\n\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseInterfaceType() {\n    const node = this.startNode();\n    this.expectContextual(\"interface\");\n    node.extends = [];\n\n    if (this.eat(types._extends)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types.comma));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: false,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: false,\n      allowInexact: false\n    });\n    return this.finishNode(node, \"InterfaceTypeAnnotation\");\n  }\n\n  flowParseObjectPropertyKey() {\n    return this.match(types.num) || this.match(types.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n  }\n\n  flowParseObjectTypeIndexer(node, isStatic, variance) {\n    node.static = isStatic;\n\n    if (this.lookahead().type === types.colon) {\n      node.id = this.flowParseObjectPropertyKey();\n      node.key = this.flowParseTypeInitialiser();\n    } else {\n      node.id = null;\n      node.key = this.flowParseType();\n    }\n\n    this.expect(types.bracketR);\n    node.value = this.flowParseTypeInitialiser();\n    node.variance = variance;\n    return this.finishNode(node, \"ObjectTypeIndexer\");\n  }\n\n  flowParseObjectTypeInternalSlot(node, isStatic) {\n    node.static = isStatic;\n    node.id = this.flowParseObjectPropertyKey();\n    this.expect(types.bracketR);\n    this.expect(types.bracketR);\n\n    if (this.isRelational(\"<\") || this.match(types.parenL)) {\n      node.method = true;\n      node.optional = false;\n      node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n    } else {\n      node.method = false;\n\n      if (this.eat(types.question)) {\n        node.optional = true;\n      }\n\n      node.value = this.flowParseTypeInitialiser();\n    }\n\n    return this.finishNode(node, \"ObjectTypeInternalSlot\");\n  }\n\n  flowParseObjectTypeMethodish(node) {\n    node.params = [];\n    node.rest = null;\n    node.typeParameters = null;\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    this.expect(types.parenL);\n\n    while (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n      node.params.push(this.flowParseFunctionTypeParam());\n\n      if (!this.match(types.parenR)) {\n        this.expect(types.comma);\n      }\n    }\n\n    if (this.eat(types.ellipsis)) {\n      node.rest = this.flowParseFunctionTypeParam();\n    }\n\n    this.expect(types.parenR);\n    node.returnType = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"FunctionTypeAnnotation\");\n  }\n\n  flowParseObjectTypeCallProperty(node, isStatic) {\n    const valueNode = this.startNode();\n    node.static = isStatic;\n    node.value = this.flowParseObjectTypeMethodish(valueNode);\n    return this.finishNode(node, \"ObjectTypeCallProperty\");\n  }\n\n  flowParseObjectType({\n    allowStatic,\n    allowExact,\n    allowSpread,\n    allowProto,\n    allowInexact\n  }) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const nodeStart = this.startNode();\n    nodeStart.callProperties = [];\n    nodeStart.properties = [];\n    nodeStart.indexers = [];\n    nodeStart.internalSlots = [];\n    let endDelim;\n    let exact;\n    let inexact = false;\n\n    if (allowExact && this.match(types.braceBarL)) {\n      this.expect(types.braceBarL);\n      endDelim = types.braceBarR;\n      exact = true;\n    } else {\n      this.expect(types.braceL);\n      endDelim = types.braceR;\n      exact = false;\n    }\n\n    nodeStart.exact = exact;\n\n    while (!this.match(endDelim)) {\n      let isStatic = false;\n      let protoStart = null;\n      let inexactStart = null;\n      const node = this.startNode();\n\n      if (allowProto && this.isContextual(\"proto\")) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== types.colon && lookahead.type !== types.question) {\n          this.next();\n          protoStart = this.state.start;\n          allowStatic = false;\n        }\n      }\n\n      if (allowStatic && this.isContextual(\"static\")) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== types.colon && lookahead.type !== types.question) {\n          this.next();\n          isStatic = true;\n        }\n      }\n\n      const variance = this.flowParseVariance();\n\n      if (this.eat(types.bracketL)) {\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (this.eat(types.bracketL)) {\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\n        } else {\n          nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n        }\n      } else if (this.match(types.parenL) || this.isRelational(\"<\")) {\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.unexpected(variance.start);\n        }\n\n        nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n      } else {\n        let kind = \"init\";\n\n        if (this.isContextual(\"get\") || this.isContextual(\"set\")) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type === types.name || lookahead.type === types.string || lookahead.type === types.num) {\n            kind = this.state.value;\n            this.next();\n          }\n        }\n\n        const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);\n\n        if (propOrInexact === null) {\n          inexact = true;\n          inexactStart = this.state.lastTokStart;\n        } else {\n          nodeStart.properties.push(propOrInexact);\n        }\n      }\n\n      this.flowObjectTypeSemicolon();\n\n      if (inexactStart && !this.match(types.braceR) && !this.match(types.braceBarR)) {\n        this.raise(inexactStart, FlowErrors.UnexpectedExplicitInexactInObject);\n      }\n    }\n\n    this.expect(endDelim);\n\n    if (allowSpread) {\n      nodeStart.inexact = inexact;\n    }\n\n    const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n    this.state.inType = oldInType;\n    return out;\n  }\n\n  flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact) {\n    if (this.eat(types.ellipsis)) {\n      const isInexactToken = this.match(types.comma) || this.match(types.semi) || this.match(types.braceR) || this.match(types.braceBarR);\n\n      if (isInexactToken) {\n        if (!allowSpread) {\n          this.raise(this.state.lastTokStart, FlowErrors.InexactInsideNonObject);\n        } else if (!allowInexact) {\n          this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);\n        }\n\n        if (variance) {\n          this.raise(variance.start, FlowErrors.InexactVariance);\n        }\n\n        return null;\n      }\n\n      if (!allowSpread) {\n        this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);\n      }\n\n      if (protoStart != null) {\n        this.unexpected(protoStart);\n      }\n\n      if (variance) {\n        this.raise(variance.start, FlowErrors.SpreadVariance);\n      }\n\n      node.argument = this.flowParseType();\n      return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n    } else {\n      node.key = this.flowParseObjectPropertyKey();\n      node.static = isStatic;\n      node.proto = protoStart != null;\n      node.kind = kind;\n      let optional = false;\n\n      if (this.isRelational(\"<\") || this.match(types.parenL)) {\n        node.method = true;\n\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.unexpected(variance.start);\n        }\n\n        node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n\n        if (kind === \"get\" || kind === \"set\") {\n          this.flowCheckGetterSetterParams(node);\n        }\n      } else {\n        if (kind !== \"init\") this.unexpected();\n        node.method = false;\n\n        if (this.eat(types.question)) {\n          optional = true;\n        }\n\n        node.value = this.flowParseTypeInitialiser();\n        node.variance = variance;\n      }\n\n      node.optional = optional;\n      return this.finishNode(node, \"ObjectTypeProperty\");\n    }\n  }\n\n  flowCheckGetterSetterParams(property) {\n    const paramCount = property.kind === \"get\" ? 0 : 1;\n    const start = property.start;\n    const length = property.value.params.length + (property.value.rest ? 1 : 0);\n\n    if (length !== paramCount) {\n      if (property.kind === \"get\") {\n        this.raise(start, Errors.BadGetterArity);\n      } else {\n        this.raise(start, Errors.BadSetterArity);\n      }\n    }\n\n    if (property.kind === \"set\" && property.value.rest) {\n      this.raise(start, Errors.BadSetterRestParameter);\n    }\n  }\n\n  flowObjectTypeSemicolon() {\n    if (!this.eat(types.semi) && !this.eat(types.comma) && !this.match(types.braceR) && !this.match(types.braceBarR)) {\n      this.unexpected();\n    }\n  }\n\n  flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n    let node = id || this.flowParseRestrictedIdentifier(true);\n\n    while (this.eat(types.dot)) {\n      const node2 = this.startNodeAt(startPos, startLoc);\n      node2.qualification = node;\n      node2.id = this.flowParseRestrictedIdentifier(true);\n      node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n    }\n\n    return node;\n  }\n\n  flowParseGenericType(startPos, startLoc, id) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.typeParameters = null;\n    node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    return this.finishNode(node, \"GenericTypeAnnotation\");\n  }\n\n  flowParseTypeofType() {\n    const node = this.startNode();\n    this.expect(types._typeof);\n    node.argument = this.flowParsePrimaryType();\n    return this.finishNode(node, \"TypeofTypeAnnotation\");\n  }\n\n  flowParseTupleType() {\n    const node = this.startNode();\n    node.types = [];\n    this.expect(types.bracketL);\n\n    while (this.state.pos < this.length && !this.match(types.bracketR)) {\n      node.types.push(this.flowParseType());\n      if (this.match(types.bracketR)) break;\n      this.expect(types.comma);\n    }\n\n    this.expect(types.bracketR);\n    return this.finishNode(node, \"TupleTypeAnnotation\");\n  }\n\n  flowParseFunctionTypeParam() {\n    let name = null;\n    let optional = false;\n    let typeAnnotation = null;\n    const node = this.startNode();\n    const lh = this.lookahead();\n\n    if (lh.type === types.colon || lh.type === types.question) {\n      name = this.parseIdentifier();\n\n      if (this.eat(types.question)) {\n        optional = true;\n      }\n\n      typeAnnotation = this.flowParseTypeInitialiser();\n    } else {\n      typeAnnotation = this.flowParseType();\n    }\n\n    node.name = name;\n    node.optional = optional;\n    node.typeAnnotation = typeAnnotation;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  reinterpretTypeAsFunctionTypeParam(type) {\n    const node = this.startNodeAt(type.start, type.loc.start);\n    node.name = null;\n    node.optional = false;\n    node.typeAnnotation = type;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  flowParseFunctionTypeParams(params = []) {\n    let rest = null;\n\n    while (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n      params.push(this.flowParseFunctionTypeParam());\n\n      if (!this.match(types.parenR)) {\n        this.expect(types.comma);\n      }\n    }\n\n    if (this.eat(types.ellipsis)) {\n      rest = this.flowParseFunctionTypeParam();\n    }\n\n    return {\n      params,\n      rest\n    };\n  }\n\n  flowIdentToTypeAnnotation(startPos, startLoc, node, id) {\n    switch (id.name) {\n      case \"any\":\n        return this.finishNode(node, \"AnyTypeAnnotation\");\n\n      case \"bool\":\n      case \"boolean\":\n        return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n      case \"mixed\":\n        return this.finishNode(node, \"MixedTypeAnnotation\");\n\n      case \"empty\":\n        return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n      case \"number\":\n        return this.finishNode(node, \"NumberTypeAnnotation\");\n\n      case \"string\":\n        return this.finishNode(node, \"StringTypeAnnotation\");\n\n      case \"symbol\":\n        return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n      default:\n        this.checkNotUnderscore(id.name);\n        return this.flowParseGenericType(startPos, startLoc, id);\n    }\n  }\n\n  flowParsePrimaryType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const node = this.startNode();\n    let tmp;\n    let type;\n    let isGroupedType = false;\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n    switch (this.state.type) {\n      case types.name:\n        if (this.isContextual(\"interface\")) {\n          return this.flowParseInterfaceType();\n        }\n\n        return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());\n\n      case types.braceL:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: false,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: true\n        });\n\n      case types.braceBarL:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: true,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: false\n        });\n\n      case types.bracketL:\n        this.state.noAnonFunctionType = false;\n        type = this.flowParseTupleType();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        return type;\n\n      case types.relational:\n        if (this.state.value === \"<\") {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(types.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          this.expect(types.parenR);\n          this.expect(types.arrow);\n          node.returnType = this.flowParseType();\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        break;\n\n      case types.parenL:\n        this.next();\n\n        if (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n          if (this.match(types.name)) {\n            const token = this.lookahead().type;\n            isGroupedType = token !== types.question && token !== types.colon;\n          } else {\n            isGroupedType = true;\n          }\n        }\n\n        if (isGroupedType) {\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.state.noAnonFunctionType || !(this.match(types.comma) || this.match(types.parenR) && this.lookahead().type === types.arrow)) {\n            this.expect(types.parenR);\n            return type;\n          } else {\n            this.eat(types.comma);\n          }\n        }\n\n        if (type) {\n          tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n        } else {\n          tmp = this.flowParseFunctionTypeParams();\n        }\n\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        this.expect(types.parenR);\n        this.expect(types.arrow);\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n      case types.string:\n        return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n\n      case types._true:\n      case types._false:\n        node.value = this.match(types._true);\n        this.next();\n        return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n      case types.plusMin:\n        if (this.state.value === \"-\") {\n          this.next();\n\n          if (this.match(types.num)) {\n            return this.parseLiteral(-this.state.value, \"NumberLiteralTypeAnnotation\", node.start, node.loc.start);\n          }\n\n          if (this.match(types.bigint)) {\n            return this.parseLiteral(-this.state.value, \"BigIntLiteralTypeAnnotation\", node.start, node.loc.start);\n          }\n\n          throw this.raise(this.state.start, FlowErrors.UnexpectedSubtractionOperand);\n        }\n\n        throw this.unexpected();\n\n      case types.num:\n        return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n\n      case types.bigint:\n        return this.parseLiteral(this.state.value, \"BigIntLiteralTypeAnnotation\");\n\n      case types._void:\n        this.next();\n        return this.finishNode(node, \"VoidTypeAnnotation\");\n\n      case types._null:\n        this.next();\n        return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n      case types._this:\n        this.next();\n        return this.finishNode(node, \"ThisTypeAnnotation\");\n\n      case types.star:\n        this.next();\n        return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n      default:\n        if (this.state.type.keyword === \"typeof\") {\n          return this.flowParseTypeofType();\n        } else if (this.state.type.keyword) {\n          const label = this.state.type.label;\n          this.next();\n          return super.createIdentifier(node, label);\n        }\n\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParsePostfixType() {\n    const startPos = this.state.start,\n          startLoc = this.state.startLoc;\n    let type = this.flowParsePrimaryType();\n\n    while (this.match(types.bracketL) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.elementType = type;\n      this.expect(types.bracketL);\n      this.expect(types.bracketR);\n      type = this.finishNode(node, \"ArrayTypeAnnotation\");\n    }\n\n    return type;\n  }\n\n  flowParsePrefixType() {\n    const node = this.startNode();\n\n    if (this.eat(types.question)) {\n      node.typeAnnotation = this.flowParsePrefixType();\n      return this.finishNode(node, \"NullableTypeAnnotation\");\n    } else {\n      return this.flowParsePostfixType();\n    }\n  }\n\n  flowParseAnonFunctionWithoutParens() {\n    const param = this.flowParsePrefixType();\n\n    if (!this.state.noAnonFunctionType && this.eat(types.arrow)) {\n      const node = this.startNodeAt(param.start, param.loc.start);\n      node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n      node.rest = null;\n      node.returnType = this.flowParseType();\n      node.typeParameters = null;\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    return param;\n  }\n\n  flowParseIntersectionType() {\n    const node = this.startNode();\n    this.eat(types.bitwiseAND);\n    const type = this.flowParseAnonFunctionWithoutParens();\n    node.types = [type];\n\n    while (this.eat(types.bitwiseAND)) {\n      node.types.push(this.flowParseAnonFunctionWithoutParens());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n  }\n\n  flowParseUnionType() {\n    const node = this.startNode();\n    this.eat(types.bitwiseOR);\n    const type = this.flowParseIntersectionType();\n    node.types = [type];\n\n    while (this.eat(types.bitwiseOR)) {\n      node.types.push(this.flowParseIntersectionType());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n  }\n\n  flowParseType() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const type = this.flowParseUnionType();\n    this.state.inType = oldInType;\n    this.state.exprAllowed = this.state.exprAllowed || this.state.noAnonFunctionType;\n    return type;\n  }\n\n  flowParseTypeOrImplicitInstantiation() {\n    if (this.state.type === types.name && this.state.value === \"_\") {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.parseIdentifier();\n      return this.flowParseGenericType(startPos, startLoc, node);\n    } else {\n      return this.flowParseType();\n    }\n  }\n\n  flowParseTypeAnnotation() {\n    const node = this.startNode();\n    node.typeAnnotation = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"TypeAnnotation\");\n  }\n\n  flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n    const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n\n    if (this.match(types.colon)) {\n      ident.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(ident);\n    }\n\n    return ident;\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  flowParseVariance() {\n    let variance = null;\n\n    if (this.match(types.plusMin)) {\n      variance = this.startNode();\n\n      if (this.state.value === \"+\") {\n        variance.kind = \"plus\";\n      } else {\n        variance.kind = \"minus\";\n      }\n\n      this.next();\n      this.finishNode(variance, \"Variance\");\n    }\n\n    return variance;\n  }\n\n  parseFunctionBody(node, allowExpressionBody, isMethod = false) {\n    if (allowExpressionBody) {\n      return this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));\n    }\n\n    return super.parseFunctionBody(node, false, isMethod);\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(types.colon)) {\n      const typeNode = this.startNode();\n      [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n      node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.state.strict && this.match(types.name) && this.state.value === \"interface\") {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseInterface(node);\n    } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    } else {\n      const stmt = super.parseStatement(context, topLevel);\n\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n\n      return stmt;\n    }\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type === \"Identifier\") {\n      if (expr.name === \"declare\") {\n        if (this.match(types._class) || this.match(types.name) || this.match(types._function) || this.match(types._var) || this.match(types._export)) {\n          return this.flowParseDeclare(node);\n        }\n      } else if (this.match(types.name)) {\n        if (expr.name === \"interface\") {\n          return this.flowParseInterface(node);\n        } else if (expr.name === \"type\") {\n          return this.flowParseTypeAlias(node);\n        } else if (expr.name === \"opaque\") {\n          return this.flowParseOpaqueType(node, false);\n        }\n      }\n    }\n\n    return super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    return this.isContextual(\"type\") || this.isContextual(\"interface\") || this.isContextual(\"opaque\") || this.shouldParseEnums() && this.isContextual(\"enum\") || super.shouldParseExportDeclaration();\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types.name) && (this.state.value === \"type\" || this.state.value === \"interface\" || this.state.value === \"opaque\" || this.shouldParseEnums() && this.state.value === \"enum\")) {\n      return false;\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseExportDefaultExpression() {\n    if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseConditional(expr, noIn, startPos, startLoc, refNeedsArrowPos) {\n    if (!this.match(types.question)) return expr;\n\n    if (refNeedsArrowPos) {\n      const result = this.tryParse(() => super.parseConditional(expr, noIn, startPos, startLoc));\n\n      if (!result.node) {\n        refNeedsArrowPos.start = result.error.pos || this.state.start;\n        return expr;\n      }\n\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    this.expect(types.question);\n    const state = this.state.clone();\n    const originalNoArrowAt = this.state.noArrowAt;\n    const node = this.startNodeAt(startPos, startLoc);\n    let {\n      consequent,\n      failed\n    } = this.tryParseConditionalConsequent();\n    let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n    if (failed || invalid.length > 0) {\n      const noArrowAt = [...originalNoArrowAt];\n\n      if (invalid.length > 0) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt;\n\n        for (let i = 0; i < invalid.length; i++) {\n          noArrowAt.push(invalid[i].start);\n        }\n\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n        [valid, invalid] = this.getArrowLikeExpressions(consequent);\n      }\n\n      if (failed && valid.length > 1) {\n        this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);\n      }\n\n      if (failed && valid.length === 1) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt.concat(valid[0].start);\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n      }\n    }\n\n    this.getArrowLikeExpressions(consequent, true);\n    this.state.noArrowAt = originalNoArrowAt;\n    this.expect(types.colon);\n    node.test = expr;\n    node.consequent = consequent;\n    node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(noIn, undefined, undefined, undefined));\n    return this.finishNode(node, \"ConditionalExpression\");\n  }\n\n  tryParseConditionalConsequent() {\n    this.state.noArrowParamsConversionAt.push(this.state.start);\n    const consequent = this.parseMaybeAssign();\n    const failed = !this.match(types.colon);\n    this.state.noArrowParamsConversionAt.pop();\n    return {\n      consequent,\n      failed\n    };\n  }\n\n  getArrowLikeExpressions(node, disallowInvalid) {\n    const stack = [node];\n    const arrows = [];\n\n    while (stack.length !== 0) {\n      const node = stack.pop();\n\n      if (node.type === \"ArrowFunctionExpression\") {\n        if (node.typeParameters || !node.returnType) {\n          this.finishArrowValidation(node);\n        } else {\n          arrows.push(node);\n        }\n\n        stack.push(node.body);\n      } else if (node.type === \"ConditionalExpression\") {\n        stack.push(node.consequent);\n        stack.push(node.alternate);\n      }\n    }\n\n    if (disallowInvalid) {\n      arrows.forEach(node => this.finishArrowValidation(node));\n      return [arrows, []];\n    }\n\n    return partition(arrows, node => node.params.every(param => this.isAssignable(param, true)));\n  }\n\n  finishArrowValidation(node) {\n    var _node$extra;\n\n    this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingComma);\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    super.checkParams(node, false, true);\n    this.scope.exit();\n  }\n\n  forwardNoArrowParamsConversionAt(node, parse) {\n    let result;\n\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n      result = parse();\n      this.state.noArrowParamsConversionAt.pop();\n    } else {\n      result = parse();\n    }\n\n    return result;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(types.question)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(types.colon)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\n      return;\n    }\n\n    super.assertModuleNodeAllowed(node);\n  }\n\n  parseExport(node) {\n    const decl = super.parseExport(node);\n\n    if (decl.type === \"ExportNamedDeclaration\" || decl.type === \"ExportAllDeclaration\") {\n      decl.exportKind = decl.exportKind || \"value\";\n    }\n\n    return decl;\n  }\n\n  parseExportDeclaration(node) {\n    if (this.isContextual(\"type\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n\n      if (this.match(types.braceL)) {\n        node.specifiers = this.parseExportSpecifiers();\n        this.parseExportFrom(node);\n        return null;\n      } else {\n        return this.flowParseTypeAlias(declarationNode);\n      }\n    } else if (this.isContextual(\"opaque\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseOpaqueType(declarationNode, false);\n    } else if (this.isContextual(\"interface\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseInterface(declarationNode);\n    } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      node.exportKind = \"value\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(declarationNode);\n    } else {\n      return super.parseExportDeclaration(node);\n    }\n  }\n\n  eatExportStar(node) {\n    if (super.eatExportStar(...arguments)) return true;\n\n    if (this.isContextual(\"type\") && this.lookahead().type === types.star) {\n      node.exportKind = \"type\";\n      this.next();\n      this.next();\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    const pos = this.state.start;\n    const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n\n    if (hasNamespace && node.exportKind === \"type\") {\n      this.unexpected(pos);\n    }\n\n    return hasNamespace;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    super.parseClassId(node, isStatement, optionalId);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n  }\n\n  parseClassMember(classBody, member, state, constructorAllowsSuper) {\n    const pos = this.state.start;\n\n    if (this.isContextual(\"declare\")) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      member.declare = true;\n    }\n\n    super.parseClassMember(classBody, member, state, constructorAllowsSuper);\n\n    if (member.declare) {\n      if (member.type !== \"ClassProperty\" && member.type !== \"ClassPrivateProperty\") {\n        this.raise(pos, FlowErrors.DeclareClassElement);\n      } else if (member.value) {\n        this.raise(member.value.start, FlowErrors.DeclareClassFieldInitializer);\n      }\n    }\n  }\n\n  getTokenFromCode(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 123 && next === 124) {\n      return this.finishOp(types.braceBarL, 2);\n    } else if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(types.relational, 1);\n    } else if (isIteratorStart(code, next)) {\n      this.state.isIterator = true;\n      return super.readWord();\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n        return true;\n\n      case \"ObjectExpression\":\n        {\n          const last = node.properties.length - 1;\n          return node.properties.every((prop, i) => {\n            return prop.type !== \"ObjectMethod\" && (i === last || prop.type === \"SpreadElement\") && this.isAssignable(prop);\n          });\n        }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(element => this.isAssignable(element));\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n      case \"TypeCastExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  toAssignable(node) {\n    if (node.type === \"TypeCastExpression\") {\n      return super.toAssignable(this.typeCastToParameter(node));\n    } else {\n      return super.toAssignable(node);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n\n      if (expr && expr.type === \"TypeCastExpression\") {\n        exprList[i] = this.typeCastToParameter(expr);\n      }\n    }\n\n    return super.toAssignableList(exprList, trailingCommaPos);\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n\n      if (expr && expr.type === \"TypeCastExpression\" && (!expr.extra || !expr.extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\n        this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);\n      }\n    }\n\n    return exprList;\n  }\n\n  checkLVal(expr, bindingType = BIND_NONE, checkClashes, contextDescription) {\n    if (expr.type !== \"TypeCastExpression\") {\n      return super.checkLVal(expr, bindingType, checkClashes, contextDescription);\n    }\n  }\n\n  parseClassProperty(node) {\n    if (this.match(types.colon)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (this.match(types.colon)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassPrivateProperty(node);\n  }\n\n  isClassMethod() {\n    return this.isRelational(\"<\") || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(types.colon) || super.isClassProperty();\n  }\n\n  isNonstaticConstructor(method) {\n    return !this.match(types.colon) && super.isNonstaticConstructor(method);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    if (method.variance) {\n      this.unexpected(method.variance.start);\n    }\n\n    delete method.variance;\n\n    if (this.isRelational(\"<\")) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    if (method.variance) {\n      this.unexpected(method.variance.start);\n    }\n\n    delete method.variance;\n\n    if (this.isRelational(\"<\")) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.isRelational(\"<\")) {\n      node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    if (this.isContextual(\"implements\")) {\n      this.next();\n      const implemented = node.implements = [];\n\n      do {\n        const node = this.startNode();\n        node.id = this.flowParseRestrictedIdentifier(true);\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterInstantiation();\n        } else {\n          node.typeParameters = null;\n        }\n\n        implemented.push(this.finishNode(node, \"ClassImplements\"));\n      } while (this.eat(types.comma));\n    }\n  }\n\n  parsePropertyName(node, isPrivateNameAllowed) {\n    const variance = this.flowParseVariance();\n    const key = super.parsePropertyName(node, isPrivateNameAllowed);\n    node.variance = variance;\n    return key;\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refExpressionErrors, containsEsc) {\n    if (prop.variance) {\n      this.unexpected(prop.variance.start);\n    }\n\n    delete prop.variance;\n    let typeParameters;\n\n    if (this.isRelational(\"<\")) {\n      typeParameters = this.flowParseTypeParameterDeclaration();\n      if (!this.match(types.parenL)) this.unexpected();\n    }\n\n    super.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refExpressionErrors, containsEsc);\n\n    if (typeParameters) {\n      (prop.value || prop).typeParameters = typeParameters;\n    }\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(types.question)) {\n      if (param.type !== \"Identifier\") {\n        this.raise(param.start, FlowErrors.OptionalBindingPattern);\n      }\n\n      param.optional = true;\n    }\n\n    if (this.match(types.colon)) {\n      param.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);\n    }\n\n    return node;\n  }\n\n  shouldParseDefaultImport(node) {\n    if (!hasTypeImportKind(node)) {\n      return super.shouldParseDefaultImport(node);\n    }\n\n    return isMaybeDefaultImport(this.state);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();\n    this.checkLVal(specifier.local, BIND_LEXICAL, undefined, contextDescription);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    node.importKind = \"value\";\n    let kind = null;\n\n    if (this.match(types._typeof)) {\n      kind = \"typeof\";\n    } else if (this.isContextual(\"type\")) {\n      kind = \"type\";\n    }\n\n    if (kind) {\n      const lh = this.lookahead();\n\n      if (kind === \"type\" && lh.type === types.star) {\n        this.unexpected(lh.start);\n      }\n\n      if (isMaybeDefaultImport(lh) || lh.type === types.braceL || lh.type === types.star) {\n        this.next();\n        node.importKind = kind;\n      }\n    }\n\n    return super.maybeParseDefaultImportSpecifier(node);\n  }\n\n  parseImportSpecifier(node) {\n    const specifier = this.startNode();\n    const firstIdentLoc = this.state.start;\n    const firstIdent = this.parseIdentifier(true);\n    let specifierTypeKind = null;\n\n    if (firstIdent.name === \"type\") {\n      specifierTypeKind = \"type\";\n    } else if (firstIdent.name === \"typeof\") {\n      specifierTypeKind = \"typeof\";\n    }\n\n    let isBinding = false;\n\n    if (this.isContextual(\"as\") && !this.isLookaheadContextual(\"as\")) {\n      const as_ident = this.parseIdentifier(true);\n\n      if (specifierTypeKind !== null && !this.match(types.name) && !this.state.type.keyword) {\n        specifier.imported = as_ident;\n        specifier.importKind = specifierTypeKind;\n        specifier.local = as_ident.__clone();\n      } else {\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = this.parseIdentifier();\n      }\n    } else if (specifierTypeKind !== null && (this.match(types.name) || this.state.type.keyword)) {\n      specifier.imported = this.parseIdentifier(true);\n      specifier.importKind = specifierTypeKind;\n\n      if (this.eatContextual(\"as\")) {\n        specifier.local = this.parseIdentifier();\n      } else {\n        isBinding = true;\n        specifier.local = specifier.imported.__clone();\n      }\n    } else {\n      isBinding = true;\n      specifier.imported = firstIdent;\n      specifier.importKind = null;\n      specifier.local = specifier.imported.__clone();\n    }\n\n    const nodeIsTypeImport = hasTypeImportKind(node);\n    const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n    if (nodeIsTypeImport && specifierIsTypeImport) {\n      this.raise(firstIdentLoc, FlowErrors.ImportTypeShorthandOnlyInPureImport);\n    }\n\n    if (nodeIsTypeImport || specifierIsTypeImport) {\n      this.checkReservedType(specifier.local.name, specifier.local.start, true);\n    }\n\n    if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {\n      this.checkReservedWord(specifier.local.name, specifier.start, true, true);\n    }\n\n    this.checkLVal(specifier.local, BIND_LEXICAL, undefined, \"import specifier\");\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const kind = node.kind;\n\n    if (kind !== \"get\" && kind !== \"set\" && this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (this.match(types.colon)) {\n      decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(types.colon)) {\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = true;\n      node.returnType = this.flowParseTypeAnnotation();\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types.colon) || super.shouldParseAsyncArrow();\n  }\n\n  parseMaybeAssign(noIn, refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    let state = null;\n    let jsx;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(types.jsxTagStart) || this.isRelational(\"<\"))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(noIn, refExpressionErrors, afterLeftParse, refNeedsArrowPos), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n\n      if (context[context.length - 1] === types$1.j_oTag) {\n        context.length -= 2;\n      } else if (context[context.length - 1] === types$1.j_expr) {\n        context.length -= 1;\n      }\n    }\n\n    if (jsx && jsx.error || this.isRelational(\"<\")) {\n      state = state || this.state.clone();\n      let typeParameters;\n      const arrow = this.tryParse(() => {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => super.parseMaybeAssign(noIn, refExpressionErrors, afterLeftParse, refNeedsArrowPos));\n        arrowExpression.typeParameters = typeParameters;\n        this.resetStartLocationFromNode(arrowExpression, typeParameters);\n        return arrowExpression;\n      }, state);\n      const arrowExpression = arrow.node && arrow.node.type === \"ArrowFunctionExpression\" ? arrow.node : null;\n      if (!arrow.error && arrowExpression) return arrowExpression;\n\n      if (jsx && jsx.node) {\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrowExpression) {\n        this.state = arrow.failState;\n        return arrowExpression;\n      }\n\n      if (jsx && jsx.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      throw this.raise(typeParameters.start, FlowErrors.UnexpectedTokenAfterTypeParameter);\n    }\n\n    return super.parseMaybeAssign(noIn, refExpressionErrors, afterLeftParse, refNeedsArrowPos);\n  }\n\n  parseArrow(node) {\n    if (this.match(types.colon)) {\n      const result = this.tryParse(() => {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        const typeNode = this.startNode();\n        [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        if (this.canInsertSemicolon()) this.unexpected();\n        if (!this.match(types.arrow)) this.unexpected();\n        return typeNode;\n      });\n      if (result.thrown) return null;\n      if (result.error) this.state = result.failState;\n      node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, \"TypeAnnotation\") : null;\n    }\n\n    return super.parseArrow(node);\n  }\n\n  shouldParseArrow() {\n    return this.match(types.colon) || super.shouldParseArrow();\n  }\n\n  setArrowFunctionParameters(node, params) {\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      node.params = params;\n    } else {\n      super.setArrowFunctionParameters(node, params);\n    }\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction) {\n    if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      return;\n    }\n\n    return super.checkParams(...arguments);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.indexOf(startPos) !== -1) {\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n      base = this.finishNode(node, \"CallExpression\");\n    } else if (base.type === \"Identifier\" && base.name === \"async\" && this.isRelational(\"<\")) {\n      const state = this.state.clone();\n      const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort(), state);\n      if (!arrow.error && !arrow.aborted) return arrow.node;\n      const result = this.tryParse(() => super.parseSubscripts(base, startPos, startLoc, noCalls), state);\n      if (result.node && !result.error) return result.node;\n\n      if (arrow.node) {\n        this.state = arrow.failState;\n        return arrow.node;\n      }\n\n      if (result.node) {\n        this.state = result.failState;\n        return result.node;\n      }\n\n      throw arrow.error || result.error;\n    }\n\n    return super.parseSubscripts(base, startPos, startLoc, noCalls);\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {\n    if (this.match(types.questionDot) && this.isLookaheadRelational(\"<\")) {\n      subscriptState.optionalChainMember = true;\n\n      if (noCalls) {\n        subscriptState.stop = true;\n        return base;\n      }\n\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.typeArguments = this.flowParseTypeParameterInstantiation();\n      this.expect(types.parenL);\n      node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n      node.optional = true;\n      return this.finishCallExpression(node, true);\n    } else if (!noCalls && this.shouldParseTypes() && this.isRelational(\"<\")) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      const result = this.tryParse(() => {\n        node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n        this.expect(types.parenL);\n        node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n        if (subscriptState.optionalChainMember) node.optional = false;\n        return this.finishCallExpression(node, subscriptState.optionalChainMember);\n      });\n\n      if (result.node) {\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, subscriptState);\n  }\n\n  parseNewArguments(node) {\n    let targs = null;\n\n    if (this.shouldParseTypes() && this.isRelational(\"<\")) {\n      targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;\n    }\n\n    node.typeArguments = targs;\n    super.parseNewArguments(node);\n  }\n\n  parseAsyncArrowWithTypeParameters(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.parseFunctionParams(node);\n    if (!this.parseArrow(node)) return;\n    return this.parseArrowExpression(node, undefined, true);\n  }\n\n  readToken_mult_modulo(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 42 && next === 47 && this.state.hasFlowComment) {\n      this.state.hasFlowComment = false;\n      this.state.pos += 2;\n      this.nextToken();\n      return;\n    }\n\n    super.readToken_mult_modulo(code);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 124 && next === 125) {\n      this.finishOp(types.braceBarR, 2);\n      return;\n    }\n\n    super.readToken_pipe_amp(code);\n  }\n\n  parseTopLevel(file, program) {\n    const fileNode = super.parseTopLevel(file, program);\n\n    if (this.state.hasFlowComment) {\n      this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);\n    }\n\n    return fileNode;\n  }\n\n  skipBlockComment() {\n    if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n      if (this.state.hasFlowComment) {\n        this.unexpected(null, FlowErrors.NestedFlowComment);\n      }\n\n      this.hasFlowCommentCompletion();\n      this.state.pos += this.skipFlowComment();\n      this.state.hasFlowComment = true;\n      return;\n    }\n\n    if (this.state.hasFlowComment) {\n      const end = this.input.indexOf(\"*-/\", this.state.pos += 2);\n\n      if (end === -1) {\n        throw this.raise(this.state.pos - 2, Errors.UnterminatedComment);\n      }\n\n      this.state.pos = end + 3;\n      return;\n    }\n\n    super.skipBlockComment();\n  }\n\n  skipFlowComment() {\n    const {\n      pos\n    } = this.state;\n    let shiftToFirstNonWhiteSpace = 2;\n\n    while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\n      shiftToFirstNonWhiteSpace++;\n    }\n\n    const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n    const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n    if (ch2 === 58 && ch3 === 58) {\n      return shiftToFirstNonWhiteSpace + 2;\n    }\n\n    if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \"flow-include\") {\n      return shiftToFirstNonWhiteSpace + 12;\n    }\n\n    if (ch2 === 58 && ch3 !== 58) {\n      return shiftToFirstNonWhiteSpace;\n    }\n\n    return false;\n  }\n\n  hasFlowCommentCompletion() {\n    const end = this.input.indexOf(\"*/\", this.state.pos);\n\n    if (end === -1) {\n      throw this.raise(this.state.pos, Errors.UnterminatedComment);\n    }\n  }\n\n  flowEnumErrorBooleanMemberNotInitialized(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumBooleanMemberNotInitialized, memberName, enumName);\n  }\n\n  flowEnumErrorInvalidMemberName(pos, {\n    enumName,\n    memberName\n  }) {\n    const suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n    this.raise(pos, FlowErrors.EnumInvalidMemberName, memberName, suggestion, enumName);\n  }\n\n  flowEnumErrorDuplicateMemberName(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);\n  }\n\n  flowEnumErrorInconsistentMemberValues(pos, {\n    enumName\n  }) {\n    this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);\n  }\n\n  flowEnumErrorInvalidExplicitType(pos, {\n    enumName,\n    suppliedType\n  }) {\n    return this.raise(pos, suppliedType === null ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied : FlowErrors.EnumInvalidExplicitType, enumName, suppliedType);\n  }\n\n  flowEnumErrorInvalidMemberInitializer(pos, {\n    enumName,\n    explicitType,\n    memberName\n  }) {\n    let message = null;\n\n    switch (explicitType) {\n      case \"boolean\":\n      case \"number\":\n      case \"string\":\n        message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;\n        break;\n\n      case \"symbol\":\n        message = FlowErrors.EnumInvalidMemberInitializerSymbolType;\n        break;\n\n      default:\n        message = FlowErrors.EnumInvalidMemberInitializerUnknownType;\n    }\n\n    return this.raise(pos, message, enumName, memberName, explicitType);\n  }\n\n  flowEnumErrorNumberMemberNotInitialized(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumNumberMemberNotInitialized, enumName, memberName);\n  }\n\n  flowEnumErrorStringMemberInconsistentlyInitailized(pos, {\n    enumName\n  }) {\n    this.raise(pos, FlowErrors.EnumStringMemberInconsistentlyInitailized, enumName);\n  }\n\n  flowEnumMemberInit() {\n    const startPos = this.state.start;\n\n    const endOfInit = () => this.match(types.comma) || this.match(types.braceR);\n\n    switch (this.state.type) {\n      case types.num:\n        {\n          const literal = this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n          if (endOfInit()) {\n            return {\n              type: \"number\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      case types.string:\n        {\n          const literal = this.parseLiteral(this.state.value, \"StringLiteral\");\n\n          if (endOfInit()) {\n            return {\n              type: \"string\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      case types._true:\n      case types._false:\n        {\n          const literal = this.parseBooleanLiteral();\n\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      default:\n        return {\n          type: \"invalid\",\n          pos: startPos\n        };\n    }\n  }\n\n  flowEnumMemberRaw() {\n    const pos = this.state.start;\n    const id = this.parseIdentifier(true);\n    const init = this.eat(types.eq) ? this.flowEnumMemberInit() : {\n      type: \"none\",\n      pos\n    };\n    return {\n      id,\n      init\n    };\n  }\n\n  flowEnumCheckExplicitTypeMismatch(pos, context, expectedType) {\n    const {\n      explicitType\n    } = context;\n\n    if (explicitType === null) {\n      return;\n    }\n\n    if (explicitType !== expectedType) {\n      this.flowEnumErrorInvalidMemberInitializer(pos, context);\n    }\n  }\n\n  flowEnumMembers({\n    enumName,\n    explicitType\n  }) {\n    const seenNames = new Set();\n    const members = {\n      booleanMembers: [],\n      numberMembers: [],\n      stringMembers: [],\n      defaultedMembers: []\n    };\n\n    while (!this.match(types.braceR)) {\n      const memberNode = this.startNode();\n      const {\n        id,\n        init\n      } = this.flowEnumMemberRaw();\n      const memberName = id.name;\n\n      if (memberName === \"\") {\n        continue;\n      }\n\n      if (/^[a-z]/.test(memberName)) {\n        this.flowEnumErrorInvalidMemberName(id.start, {\n          enumName,\n          memberName\n        });\n      }\n\n      if (seenNames.has(memberName)) {\n        this.flowEnumErrorDuplicateMemberName(id.start, {\n          enumName,\n          memberName\n        });\n      }\n\n      seenNames.add(memberName);\n      const context = {\n        enumName,\n        explicitType,\n        memberName\n      };\n      memberNode.id = id;\n\n      switch (init.type) {\n        case \"boolean\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"boolean\");\n            memberNode.init = init.value;\n            members.booleanMembers.push(this.finishNode(memberNode, \"EnumBooleanMember\"));\n            break;\n          }\n\n        case \"number\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(this.finishNode(memberNode, \"EnumNumberMember\"));\n            break;\n          }\n\n        case \"string\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(this.finishNode(memberNode, \"EnumStringMember\"));\n            break;\n          }\n\n        case \"invalid\":\n          {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n          }\n\n        case \"none\":\n          {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(init.pos, context);\n                break;\n\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                break;\n\n              default:\n                members.defaultedMembers.push(this.finishNode(memberNode, \"EnumDefaultedMember\"));\n            }\n          }\n      }\n\n      if (!this.match(types.braceR)) {\n        this.expect(types.comma);\n      }\n    }\n\n    return members;\n  }\n\n  flowEnumStringMembers(initializedMembers, defaultedMembers, {\n    enumName\n  }) {\n    if (initializedMembers.length === 0) {\n      return defaultedMembers;\n    } else if (defaultedMembers.length === 0) {\n      return initializedMembers;\n    } else if (defaultedMembers.length > initializedMembers.length) {\n      for (let _i = 0; _i < initializedMembers.length; _i++) {\n        const member = initializedMembers[_i];\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n          enumName\n        });\n      }\n\n      return defaultedMembers;\n    } else {\n      for (let _i2 = 0; _i2 < defaultedMembers.length; _i2++) {\n        const member = defaultedMembers[_i2];\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n          enumName\n        });\n      }\n\n      return initializedMembers;\n    }\n  }\n\n  flowEnumParseExplicitType({\n    enumName\n  }) {\n    if (this.eatContextual(\"of\")) {\n      if (!this.match(types.name)) {\n        throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n          enumName,\n          suppliedType: null\n        });\n      }\n\n      const {\n        value\n      } = this.state;\n      this.next();\n\n      if (value !== \"boolean\" && value !== \"number\" && value !== \"string\" && value !== \"symbol\") {\n        this.flowEnumErrorInvalidExplicitType(this.state.start, {\n          enumName,\n          suppliedType: value\n        });\n      }\n\n      return value;\n    }\n\n    return null;\n  }\n\n  flowEnumBody(node, {\n    enumName,\n    nameLoc\n  }) {\n    const explicitType = this.flowEnumParseExplicitType({\n      enumName\n    });\n    this.expect(types.braceL);\n    const members = this.flowEnumMembers({\n      enumName,\n      explicitType\n    });\n\n    switch (explicitType) {\n      case \"boolean\":\n        node.explicitType = true;\n        node.members = members.booleanMembers;\n        this.expect(types.braceR);\n        return this.finishNode(node, \"EnumBooleanBody\");\n\n      case \"number\":\n        node.explicitType = true;\n        node.members = members.numberMembers;\n        this.expect(types.braceR);\n        return this.finishNode(node, \"EnumNumberBody\");\n\n      case \"string\":\n        node.explicitType = true;\n        node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n          enumName\n        });\n        this.expect(types.braceR);\n        return this.finishNode(node, \"EnumStringBody\");\n\n      case \"symbol\":\n        node.members = members.defaultedMembers;\n        this.expect(types.braceR);\n        return this.finishNode(node, \"EnumSymbolBody\");\n\n      default:\n        {\n          const empty = () => {\n            node.members = [];\n            this.expect(types.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n\n          node.explicitType = false;\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n              enumName\n            });\n            this.expect(types.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (let _i3 = 0, _members$defaultedMem = members.defaultedMembers; _i3 < _members$defaultedMem.length; _i3++) {\n              const member = _members$defaultedMem[_i3];\n              this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.booleanMembers;\n            this.expect(types.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (let _i4 = 0, _members$defaultedMem2 = members.defaultedMembers; _i4 < _members$defaultedMem2.length; _i4++) {\n              const member = _members$defaultedMem2[_i4];\n              this.flowEnumErrorNumberMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.numberMembers;\n            this.expect(types.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.flowEnumErrorInconsistentMemberValues(nameLoc, {\n              enumName\n            });\n            return empty();\n          }\n        }\n    }\n  }\n\n  flowParseEnumDeclaration(node) {\n    const id = this.parseIdentifier();\n    node.id = id;\n    node.body = this.flowEnumBody(this.startNode(), {\n      enumName: id.name,\n      nameLoc: id.start\n    });\n    return this.finishNode(node, \"EnumDeclaration\");\n  }\n\n  updateContext(prevType) {\n    if (this.match(types.name) && this.state.value === \"of\" && prevType === types.name && this.input.slice(this.state.lastTokStart, this.state.lastTokEnd) === \"interface\") {\n      this.state.exprAllowed = false;\n    } else {\n      super.updateContext(prevType);\n    }\n  }\n\n};\n\nconst entities = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\nconst JsxErrors = Object.freeze({\n  AttributeIsEmpty: \"JSX attributes must only be assigned a non-empty expression\",\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>\",\n  MissingClosingTagElement: \"Expected corresponding JSX closing tag for <%0>\",\n  UnsupportedJsxValue: \"JSX value should be either an expression or a quoted JSX text\",\n  UnterminatedJsxContent: \"Unterminated JSX contents\",\n  UnwrappedAdjacentJSXElements: \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\"\n});\ntypes$1.j_oTag = new TokContext(\"<tag\", false);\ntypes$1.j_cTag = new TokContext(\"</tag\", false);\ntypes$1.j_expr = new TokContext(\"<tag>...</tag>\", true, true);\ntypes.jsxName = new TokenType(\"jsxName\");\ntypes.jsxText = new TokenType(\"jsxText\", {\n  beforeExpr: true\n});\ntypes.jsxTagStart = new TokenType(\"jsxTagStart\", {\n  startsExpr: true\n});\ntypes.jsxTagEnd = new TokenType(\"jsxTagEnd\");\n\ntypes.jsxTagStart.updateContext = function () {\n  this.state.context.push(types$1.j_expr);\n  this.state.context.push(types$1.j_oTag);\n  this.state.exprAllowed = false;\n};\n\ntypes.jsxTagEnd.updateContext = function (prevType) {\n  const out = this.state.context.pop();\n\n  if (out === types$1.j_oTag && prevType === types.slash || out === types$1.j_cTag) {\n    this.state.context.pop();\n    this.state.exprAllowed = this.curContext() === types$1.j_expr;\n  } else {\n    this.state.exprAllowed = true;\n  }\n};\n\nfunction isFragment(object) {\n  return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\n}\n\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nvar jsx = superClass => class extends superClass {\n  jsxReadToken() {\n    let out = \"\";\n    let chunkStart = this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 60:\n        case 123:\n          if (this.state.pos === this.state.start) {\n            if (ch === 60 && this.state.exprAllowed) {\n              ++this.state.pos;\n              return this.finishToken(types.jsxTagStart);\n            }\n\n            return super.getTokenFromCode(ch);\n          }\n\n          out += this.input.slice(chunkStart, this.state.pos);\n          return this.finishToken(types.jsxText, out);\n\n        case 38:\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n          break;\n\n        default:\n          if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadNewLine(true);\n            chunkStart = this.state.pos;\n          } else {\n            ++this.state.pos;\n          }\n\n      }\n    }\n  }\n\n  jsxReadNewLine(normalizeCRLF) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let out;\n    ++this.state.pos;\n\n    if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n      ++this.state.pos;\n      out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n    } else {\n      out = String.fromCharCode(ch);\n    }\n\n    ++this.state.curLine;\n    this.state.lineStart = this.state.pos;\n    return out;\n  }\n\n  jsxReadString(quote) {\n    let out = \"\";\n    let chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, Errors.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 38) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadEntity();\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadNewLine(false);\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    return this.finishToken(types.string, out);\n  }\n\n  jsxReadEntity() {\n    let str = \"\";\n    let count = 0;\n    let entity;\n    let ch = this.input[this.state.pos];\n    const startPos = ++this.state.pos;\n\n    while (this.state.pos < this.length && count++ < 10) {\n      ch = this.input[this.state.pos++];\n\n      if (ch === \";\") {\n        if (str[0] === \"#\") {\n          if (str[1] === \"x\") {\n            str = str.substr(2);\n\n            if (HEX_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 16));\n            }\n          } else {\n            str = str.substr(1);\n\n            if (DECIMAL_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 10));\n            }\n          }\n        } else {\n          entity = entities[str];\n        }\n\n        break;\n      }\n\n      str += ch;\n    }\n\n    if (!entity) {\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    return entity;\n  }\n\n  jsxReadWord() {\n    let ch;\n    const start = this.state.pos;\n\n    do {\n      ch = this.input.charCodeAt(++this.state.pos);\n    } while (isIdentifierChar(ch) || ch === 45);\n\n    return this.finishToken(types.jsxName, this.input.slice(start, this.state.pos));\n  }\n\n  jsxParseIdentifier() {\n    const node = this.startNode();\n\n    if (this.match(types.jsxName)) {\n      node.name = this.state.value;\n    } else if (this.state.type.keyword) {\n      node.name = this.state.type.keyword;\n    } else {\n      this.unexpected();\n    }\n\n    this.next();\n    return this.finishNode(node, \"JSXIdentifier\");\n  }\n\n  jsxParseNamespacedName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const name = this.jsxParseIdentifier();\n    if (!this.eat(types.colon)) return name;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.namespace = name;\n    node.name = this.jsxParseIdentifier();\n    return this.finishNode(node, \"JSXNamespacedName\");\n  }\n\n  jsxParseElementName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let node = this.jsxParseNamespacedName();\n\n    if (node.type === \"JSXNamespacedName\") {\n      return node;\n    }\n\n    while (this.eat(types.dot)) {\n      const newNode = this.startNodeAt(startPos, startLoc);\n      newNode.object = node;\n      newNode.property = this.jsxParseIdentifier();\n      node = this.finishNode(newNode, \"JSXMemberExpression\");\n    }\n\n    return node;\n  }\n\n  jsxParseAttributeValue() {\n    let node;\n\n    switch (this.state.type) {\n      case types.braceL:\n        node = this.startNode();\n        this.next();\n        node = this.jsxParseExpressionContainer(node);\n\n        if (node.expression.type === \"JSXEmptyExpression\") {\n          this.raise(node.start, JsxErrors.AttributeIsEmpty);\n        }\n\n        return node;\n\n      case types.jsxTagStart:\n      case types.string:\n        return this.parseExprAtom();\n\n      default:\n        throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);\n    }\n  }\n\n  jsxParseEmptyExpression() {\n    const node = this.startNodeAt(this.state.lastTokEnd, this.state.lastTokEndLoc);\n    return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.start, this.state.startLoc);\n  }\n\n  jsxParseSpreadChild(node) {\n    this.next();\n    node.expression = this.parseExpression();\n    this.expect(types.braceR);\n    return this.finishNode(node, \"JSXSpreadChild\");\n  }\n\n  jsxParseExpressionContainer(node) {\n    if (this.match(types.braceR)) {\n      node.expression = this.jsxParseEmptyExpression();\n    } else {\n      node.expression = this.parseExpression();\n    }\n\n    this.expect(types.braceR);\n    return this.finishNode(node, \"JSXExpressionContainer\");\n  }\n\n  jsxParseAttribute() {\n    const node = this.startNode();\n\n    if (this.eat(types.braceL)) {\n      this.expect(types.ellipsis);\n      node.argument = this.parseMaybeAssign();\n      this.expect(types.braceR);\n      return this.finishNode(node, \"JSXSpreadAttribute\");\n    }\n\n    node.name = this.jsxParseNamespacedName();\n    node.value = this.eat(types.eq) ? this.jsxParseAttributeValue() : null;\n    return this.finishNode(node, \"JSXAttribute\");\n  }\n\n  jsxParseOpeningElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(types.jsxTagEnd)) {\n      this.expect(types.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    return this.jsxParseOpeningElementAfterName(node);\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    const attributes = [];\n\n    while (!this.match(types.slash) && !this.match(types.jsxTagEnd)) {\n      attributes.push(this.jsxParseAttribute());\n    }\n\n    node.attributes = attributes;\n    node.selfClosing = this.eat(types.slash);\n    this.expect(types.jsxTagEnd);\n    return this.finishNode(node, \"JSXOpeningElement\");\n  }\n\n  jsxParseClosingElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(types.jsxTagEnd)) {\n      this.expect(types.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    this.expect(types.jsxTagEnd);\n    return this.finishNode(node, \"JSXClosingElement\");\n  }\n\n  jsxParseElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const children = [];\n    const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n    let closingElement = null;\n\n    if (!openingElement.selfClosing) {\n      contents: for (;;) {\n        switch (this.state.type) {\n          case types.jsxTagStart:\n            startPos = this.state.start;\n            startLoc = this.state.startLoc;\n            this.next();\n\n            if (this.eat(types.slash)) {\n              closingElement = this.jsxParseClosingElementAt(startPos, startLoc);\n              break contents;\n            }\n\n            children.push(this.jsxParseElementAt(startPos, startLoc));\n            break;\n\n          case types.jsxText:\n            children.push(this.parseExprAtom());\n            break;\n\n          case types.braceL:\n            {\n              const node = this.startNode();\n              this.next();\n\n              if (this.match(types.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node));\n              }\n\n              break;\n            }\n\n          default:\n            throw this.unexpected();\n        }\n      }\n\n      if (isFragment(openingElement) && !isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagFragment);\n      } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n      } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n        }\n      }\n    }\n\n    if (isFragment(openingElement)) {\n      node.openingFragment = openingElement;\n      node.closingFragment = closingElement;\n    } else {\n      node.openingElement = openingElement;\n      node.closingElement = closingElement;\n    }\n\n    node.children = children;\n\n    if (this.isRelational(\"<\")) {\n      throw this.raise(this.state.start, JsxErrors.UnwrappedAdjacentJSXElements);\n    }\n\n    return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\n  }\n\n  jsxParseElement() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.next();\n    return this.jsxParseElementAt(startPos, startLoc);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    if (this.match(types.jsxText)) {\n      return this.parseLiteral(this.state.value, \"JSXText\");\n    } else if (this.match(types.jsxTagStart)) {\n      return this.jsxParseElement();\n    } else if (this.isRelational(\"<\") && this.input.charCodeAt(this.state.pos) !== 33) {\n      this.finishToken(types.jsxTagStart);\n      return this.jsxParseElement();\n    } else {\n      return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inPropertyName) return super.getTokenFromCode(code);\n    const context = this.curContext();\n\n    if (context === types$1.j_expr) {\n      return this.jsxReadToken();\n    }\n\n    if (context === types$1.j_oTag || context === types$1.j_cTag) {\n      if (isIdentifierStart(code)) {\n        return this.jsxReadWord();\n      }\n\n      if (code === 62) {\n        ++this.state.pos;\n        return this.finishToken(types.jsxTagEnd);\n      }\n\n      if ((code === 34 || code === 39) && context === types$1.j_oTag) {\n        return this.jsxReadString(code);\n      }\n    }\n\n    if (code === 60 && this.state.exprAllowed && this.input.charCodeAt(this.state.pos + 1) !== 33) {\n      ++this.state.pos;\n      return this.finishToken(types.jsxTagStart);\n    }\n\n    return super.getTokenFromCode(code);\n  }\n\n  updateContext(prevType) {\n    if (this.match(types.braceL)) {\n      const curContext = this.curContext();\n\n      if (curContext === types$1.j_oTag) {\n        this.state.context.push(types$1.braceExpression);\n      } else if (curContext === types$1.j_expr) {\n        this.state.context.push(types$1.templateQuasi);\n      } else {\n        super.updateContext(prevType);\n      }\n\n      this.state.exprAllowed = true;\n    } else if (this.match(types.slash) && prevType === types.jsxTagStart) {\n      this.state.context.length -= 2;\n      this.state.context.push(types$1.j_cTag);\n      this.state.exprAllowed = false;\n    } else {\n      return super.updateContext(prevType);\n    }\n  }\n\n};\n\nclass Scope {\n  constructor(flags) {\n    this.var = [];\n    this.lexical = [];\n    this.functions = [];\n    this.flags = flags;\n  }\n\n}\n\nclass ScopeHandler {\n  constructor(raise, inModule) {\n    this.scopeStack = [];\n    this.undefinedExports = new Map();\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;\n  }\n\n  get allowSuper() {\n    return (this.currentThisScope().flags & SCOPE_SUPER) > 0;\n  }\n\n  get allowDirectSuper() {\n    return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;\n  }\n\n  get inClass() {\n    return (this.currentThisScope().flags & SCOPE_CLASS) > 0;\n  }\n\n  get inNonArrowFunction() {\n    return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0;\n  }\n\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags) {\n    return new Scope(flags);\n  }\n\n  enter(flags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  treatFunctionsAsVarInScope(scope) {\n    return !!(scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_PROGRAM);\n  }\n\n  declareName(name, bindingType, pos) {\n    let scope = this.currentScope();\n\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.push(name);\n      } else {\n        scope.lexical.push(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        scope.var.push(name);\n        this.maybeExportDefined(scope, name);\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope, name) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(scope, name, bindingType, pos) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(pos, Errors.VarRedeclaration, name);\n    }\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return scope.lexical.indexOf(name) > -1 || !this.treatFunctionsAsVarInScope(scope) && scope.var.indexOf(name) > -1;\n    }\n\n    return scope.lexical.indexOf(name) > -1 && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical[0] === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.indexOf(name) > -1;\n  }\n\n  checkLocalExport(id) {\n    if (this.scopeStack[0].lexical.indexOf(id.name) === -1 && this.scopeStack[0].var.indexOf(id.name) === -1 && this.scopeStack[0].functions.indexOf(id.name) === -1) {\n      this.undefinedExports.set(id.name, id.start);\n    }\n  }\n\n  currentScope() {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScope() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const scope = this.scopeStack[i];\n\n      if (scope.flags & SCOPE_VAR) {\n        return scope;\n      }\n    }\n  }\n\n  currentThisScope() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const scope = this.scopeStack[i];\n\n      if ((scope.flags & SCOPE_VAR || scope.flags & SCOPE_CLASS) && !(scope.flags & SCOPE_ARROW)) {\n        return scope;\n      }\n    }\n  }\n\n}\n\nclass TypeScriptScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.types = [];\n    this.enums = [];\n    this.constEnums = [];\n    this.classes = [];\n    this.exportOnlyBindings = [];\n  }\n\n}\n\nclass TypeScriptScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name, bindingType, pos) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.push(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        this.maybeExportDefined(scope, name);\n      }\n\n      scope.types.push(name);\n    }\n\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.push(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.push(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.push(name);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (scope.enums.indexOf(name) > -1) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.indexOf(name) > -1;\n        return isConst !== wasConst;\n      }\n\n      return true;\n    }\n\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.indexOf(name) > -1) {\n      if (scope.lexical.indexOf(name) > -1) {\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        return false;\n      }\n    }\n\n    if (bindingType & BIND_KIND_TYPE && scope.types.indexOf(name) > -1) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id) {\n    if (this.scopeStack[0].types.indexOf(id.name) === -1 && this.scopeStack[0].exportOnlyBindings.indexOf(id.name) === -1) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nconst PARAM = 0b000,\n      PARAM_YIELD = 0b001,\n      PARAM_AWAIT = 0b010,\n      PARAM_RETURN = 0b100;\n\nclass ProductionParameterHandler {\n  constructor() {\n    this.stacks = [];\n  }\n\n  enter(flags) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags() {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait() {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield() {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn() {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n}\n\nfunction functionFlags(isAsync, isGenerator) {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n\nfunction nonNull(x) {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n\n  return x;\n}\n\nfunction assert(x) {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\nconst TSErrors = Object.freeze({\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier\",\n  DeclareClassFieldHasInitializer: \"'declare' class fields cannot have an initializer\",\n  DuplicateModifier: \"Duplicate modifier: '%0'\",\n  EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n  IndexSignatureHasAbstract: \"Index signatures cannot have the 'abstract' modifier\",\n  IndexSignatureHasAccessibility: \"Index signatures cannot have an accessibility modifier ('%0')\",\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier\",\n  OptionalTypeBeforeRequired: \"A required element cannot follow an optional element.\",\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract: \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: \"Private elements cannot have an accessibility modifier ('%0')\",\n  TemplateTypeHasSubstitution: \"Template literal types cannot have any substitution\",\n  TypeAnnotationAfterAssign: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\",\n  UnexpectedReadonly: \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument: \"Argument in a type import must be a string literal\",\n  UnsupportedParameterPropertyKind: \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0\"\n});\n\nfunction keywordTypeFromName(value) {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n\n    case \"never\":\n      return \"TSNeverKeyword\";\n\n    case \"number\":\n      return \"TSNumberKeyword\";\n\n    case \"object\":\n      return \"TSObjectKeyword\";\n\n    case \"string\":\n      return \"TSStringKeyword\";\n\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n\n    default:\n      return undefined;\n  }\n}\n\nvar typescript = superClass => class extends superClass {\n  getScopeHandler() {\n    return TypeScriptScopeHandler;\n  }\n\n  tsIsIdentifier() {\n    return this.match(types.name);\n  }\n\n  tsNextTokenCanFollowModifier() {\n    this.next();\n    return !this.hasPrecedingLineBreak() && !this.match(types.parenL) && !this.match(types.parenR) && !this.match(types.colon) && !this.match(types.eq) && !this.match(types.question) && !this.match(types.bang);\n  }\n\n  tsParseModifier(allowedModifiers) {\n    if (!this.match(types.name)) {\n      return undefined;\n    }\n\n    const modifier = this.state.value;\n\n    if (allowedModifiers.indexOf(modifier) !== -1 && this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n      return modifier;\n    }\n\n    return undefined;\n  }\n\n  tsParseModifiers(modified, allowedModifiers) {\n    for (;;) {\n      const startPos = this.state.start;\n      const modifier = this.tsParseModifier(allowedModifiers);\n      if (!modifier) break;\n\n      if (Object.hasOwnProperty.call(modified, modifier)) {\n        this.raise(startPos, TSErrors.DuplicateModifier, modifier);\n      }\n\n      modified[modifier] = true;\n    }\n  }\n\n  tsIsListTerminator(kind) {\n    switch (kind) {\n      case \"EnumMembers\":\n      case \"TypeMembers\":\n        return this.match(types.braceR);\n\n      case \"HeritageClauseElement\":\n        return this.match(types.braceL);\n\n      case \"TupleElementTypes\":\n        return this.match(types.bracketR);\n\n      case \"TypeParametersOrArguments\":\n        return this.isRelational(\">\");\n    }\n\n    throw new Error(\"Unreachable\");\n  }\n\n  tsParseList(kind, parseElement) {\n    const result = [];\n\n    while (!this.tsIsListTerminator(kind)) {\n      result.push(parseElement());\n    }\n\n    return result;\n  }\n\n  tsParseDelimitedList(kind, parseElement) {\n    return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true));\n  }\n\n  tsParseDelimitedListWorker(kind, parseElement, expectSuccess) {\n    const result = [];\n\n    for (;;) {\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      const element = parseElement();\n\n      if (element == null) {\n        return undefined;\n      }\n\n      result.push(element);\n\n      if (this.eat(types.comma)) {\n        continue;\n      }\n\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      if (expectSuccess) {\n        this.expect(types.comma);\n      }\n\n      return undefined;\n    }\n\n    return result;\n  }\n\n  tsParseBracketedList(kind, parseElement, bracket, skipFirstToken) {\n    if (!skipFirstToken) {\n      if (bracket) {\n        this.expect(types.bracketL);\n      } else {\n        this.expectRelational(\"<\");\n      }\n    }\n\n    const result = this.tsParseDelimitedList(kind, parseElement);\n\n    if (bracket) {\n      this.expect(types.bracketR);\n    } else {\n      this.expectRelational(\">\");\n    }\n\n    return result;\n  }\n\n  tsParseImportType() {\n    const node = this.startNode();\n    this.expect(types._import);\n    this.expect(types.parenL);\n\n    if (!this.match(types.string)) {\n      this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);\n    }\n\n    node.argument = this.parseExprAtom();\n    this.expect(types.parenR);\n\n    if (this.eat(types.dot)) {\n      node.qualifier = this.tsParseEntityName(true);\n    }\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSImportType\");\n  }\n\n  tsParseEntityName(allowReservedWords) {\n    let entity = this.parseIdentifier();\n\n    while (this.eat(types.dot)) {\n      const node = this.startNodeAtNode(entity);\n      node.left = entity;\n      node.right = this.parseIdentifier(allowReservedWords);\n      entity = this.finishNode(node, \"TSQualifiedName\");\n    }\n\n    return entity;\n  }\n\n  tsParseTypeReference() {\n    const node = this.startNode();\n    node.typeName = this.tsParseEntityName(false);\n\n    if (!this.hasPrecedingLineBreak() && this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSTypeReference\");\n  }\n\n  tsParseThisTypePredicate(lhs) {\n    this.next();\n    const node = this.startNodeAtNode(lhs);\n    node.parameterName = lhs;\n    node.typeAnnotation = this.tsParseTypeAnnotation(false);\n    return this.finishNode(node, \"TSTypePredicate\");\n  }\n\n  tsParseThisTypeNode() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"TSThisType\");\n  }\n\n  tsParseTypeQuery() {\n    const node = this.startNode();\n    this.expect(types._typeof);\n\n    if (this.match(types._import)) {\n      node.exprName = this.tsParseImportType();\n    } else {\n      node.exprName = this.tsParseEntityName(true);\n    }\n\n    return this.finishNode(node, \"TSTypeQuery\");\n  }\n\n  tsParseTypeParameter() {\n    const node = this.startNode();\n    node.name = this.parseIdentifierName(node.start);\n    node.constraint = this.tsEatThenParseType(types._extends);\n    node.default = this.tsEatThenParseType(types.eq);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsTryParseTypeParameters() {\n    if (this.isRelational(\"<\")) {\n      return this.tsParseTypeParameters();\n    }\n  }\n\n  tsParseTypeParameters() {\n    const node = this.startNode();\n\n    if (this.isRelational(\"<\") || this.match(types.jsxTagStart)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this), false, true);\n    return this.finishNode(node, \"TSTypeParameterDeclaration\");\n  }\n\n  tsTryNextParseConstantContext() {\n    if (this.lookahead().type === types._const) {\n      this.next();\n      return this.tsParseTypeReference();\n    }\n\n    return null;\n  }\n\n  tsFillSignature(returnToken, signature) {\n    const returnTokenRequired = returnToken === types.arrow;\n    signature.typeParameters = this.tsTryParseTypeParameters();\n    this.expect(types.parenL);\n    signature.parameters = this.tsParseBindingListForSignature();\n\n    if (returnTokenRequired) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    } else if (this.match(returnToken)) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    }\n  }\n\n  tsParseBindingListForSignature() {\n    return this.parseBindingList(types.parenR, 41).map(pattern => {\n      if (pattern.type !== \"Identifier\" && pattern.type !== \"RestElement\" && pattern.type !== \"ObjectPattern\" && pattern.type !== \"ArrayPattern\") {\n        this.raise(pattern.start, TSErrors.UnsupportedSignatureParameterKind, pattern.type);\n      }\n\n      return pattern;\n    });\n  }\n\n  tsParseTypeMemberSemicolon() {\n    if (!this.eat(types.comma)) {\n      this.semicolon();\n    }\n  }\n\n  tsParseSignatureMember(kind, node) {\n    this.tsFillSignature(types.colon, node);\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, kind);\n  }\n\n  tsIsUnambiguouslyIndexSignature() {\n    this.next();\n    return this.eat(types.name) && this.match(types.colon);\n  }\n\n  tsTryParseIndexSignature(node) {\n    if (!(this.match(types.bracketL) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n      return undefined;\n    }\n\n    this.expect(types.bracketL);\n    const id = this.parseIdentifier();\n    id.typeAnnotation = this.tsParseTypeAnnotation();\n    this.resetEndLocation(id);\n    this.expect(types.bracketR);\n    node.parameters = [id];\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, \"TSIndexSignature\");\n  }\n\n  tsParsePropertyOrMethodSignature(node, readonly) {\n    if (this.eat(types.question)) node.optional = true;\n    const nodeAny = node;\n\n    if (!readonly && (this.match(types.parenL) || this.isRelational(\"<\"))) {\n      const method = nodeAny;\n      this.tsFillSignature(types.colon, method);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(method, \"TSMethodSignature\");\n    } else {\n      const property = nodeAny;\n      if (readonly) property.readonly = true;\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) property.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(property, \"TSPropertySignature\");\n    }\n  }\n\n  tsParseTypeMember() {\n    const node = this.startNode();\n\n    if (this.match(types.parenL) || this.isRelational(\"<\")) {\n      return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n    }\n\n    if (this.match(types._new)) {\n      const id = this.startNode();\n      this.next();\n\n      if (this.match(types.parenL) || this.isRelational(\"<\")) {\n        return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\", node);\n      } else {\n        node.key = this.createIdentifier(id, \"new\");\n        return this.tsParsePropertyOrMethodSignature(node, false);\n      }\n    }\n\n    const readonly = !!this.tsParseModifier([\"readonly\"]);\n    const idx = this.tsTryParseIndexSignature(node);\n\n    if (idx) {\n      if (readonly) node.readonly = true;\n      return idx;\n    }\n\n    this.parsePropertyName(node, false);\n    return this.tsParsePropertyOrMethodSignature(node, readonly);\n  }\n\n  tsParseTypeLiteral() {\n    const node = this.startNode();\n    node.members = this.tsParseObjectTypeMembers();\n    return this.finishNode(node, \"TSTypeLiteral\");\n  }\n\n  tsParseObjectTypeMembers() {\n    this.expect(types.braceL);\n    const members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n    this.expect(types.braceR);\n    return members;\n  }\n\n  tsIsStartOfMappedType() {\n    this.next();\n\n    if (this.eat(types.plusMin)) {\n      return this.isContextual(\"readonly\");\n    }\n\n    if (this.isContextual(\"readonly\")) {\n      this.next();\n    }\n\n    if (!this.match(types.bracketL)) {\n      return false;\n    }\n\n    this.next();\n\n    if (!this.tsIsIdentifier()) {\n      return false;\n    }\n\n    this.next();\n    return this.match(types._in);\n  }\n\n  tsParseMappedTypeParameter() {\n    const node = this.startNode();\n    node.name = this.parseIdentifierName(node.start);\n    node.constraint = this.tsExpectThenParseType(types._in);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsParseMappedType() {\n    const node = this.startNode();\n    this.expect(types.braceL);\n\n    if (this.match(types.plusMin)) {\n      node.readonly = this.state.value;\n      this.next();\n      this.expectContextual(\"readonly\");\n    } else if (this.eatContextual(\"readonly\")) {\n      node.readonly = true;\n    }\n\n    this.expect(types.bracketL);\n    node.typeParameter = this.tsParseMappedTypeParameter();\n    this.expect(types.bracketR);\n\n    if (this.match(types.plusMin)) {\n      node.optional = this.state.value;\n      this.next();\n      this.expect(types.question);\n    } else if (this.eat(types.question)) {\n      node.optional = true;\n    }\n\n    node.typeAnnotation = this.tsTryParseType();\n    this.semicolon();\n    this.expect(types.braceR);\n    return this.finishNode(node, \"TSMappedType\");\n  }\n\n  tsParseTupleType() {\n    const node = this.startNode();\n    node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), true, false);\n    let seenOptionalElement = false;\n    node.elementTypes.forEach(elementNode => {\n      if (elementNode.type === \"TSOptionalType\") {\n        seenOptionalElement = true;\n      } else if (seenOptionalElement && elementNode.type !== \"TSRestType\") {\n        this.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);\n      }\n    });\n    return this.finishNode(node, \"TSTupleType\");\n  }\n\n  tsParseTupleElementType() {\n    if (this.match(types.ellipsis)) {\n      const restNode = this.startNode();\n      this.next();\n      restNode.typeAnnotation = this.tsParseType();\n\n      if (this.match(types.comma) && this.lookaheadCharCode() !== 93) {\n        this.raiseRestNotLast(this.state.start);\n      }\n\n      return this.finishNode(restNode, \"TSRestType\");\n    }\n\n    const type = this.tsParseType();\n\n    if (this.eat(types.question)) {\n      const optionalTypeNode = this.startNodeAtNode(type);\n      optionalTypeNode.typeAnnotation = type;\n      return this.finishNode(optionalTypeNode, \"TSOptionalType\");\n    }\n\n    return type;\n  }\n\n  tsParseParenthesizedType() {\n    const node = this.startNode();\n    this.expect(types.parenL);\n    node.typeAnnotation = this.tsParseType();\n    this.expect(types.parenR);\n    return this.finishNode(node, \"TSParenthesizedType\");\n  }\n\n  tsParseFunctionOrConstructorType(type) {\n    const node = this.startNode();\n\n    if (type === \"TSConstructorType\") {\n      this.expect(types._new);\n    }\n\n    this.tsFillSignature(types.arrow, node);\n    return this.finishNode(node, type);\n  }\n\n  tsParseLiteralTypeNode() {\n    const node = this.startNode();\n\n    node.literal = (() => {\n      switch (this.state.type) {\n        case types.num:\n        case types.string:\n        case types._true:\n        case types._false:\n          return this.parseExprAtom();\n\n        default:\n          throw this.unexpected();\n      }\n    })();\n\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  tsParseTemplateLiteralType() {\n    const node = this.startNode();\n    const templateNode = this.parseTemplate(false);\n\n    if (templateNode.expressions.length > 0) {\n      this.raise(templateNode.expressions[0].start, TSErrors.TemplateTypeHasSubstitution);\n    }\n\n    node.literal = templateNode;\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  tsParseThisTypeOrThisTypePredicate() {\n    const thisKeyword = this.tsParseThisTypeNode();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      return this.tsParseThisTypePredicate(thisKeyword);\n    } else {\n      return thisKeyword;\n    }\n  }\n\n  tsParseNonArrayType() {\n    switch (this.state.type) {\n      case types.name:\n      case types._void:\n      case types._null:\n        {\n          const type = this.match(types._void) ? \"TSVoidKeyword\" : this.match(types._null) ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\n\n          if (type !== undefined && this.lookaheadCharCode() !== 46) {\n            const node = this.startNode();\n            this.next();\n            return this.finishNode(node, type);\n          }\n\n          return this.tsParseTypeReference();\n        }\n\n      case types.string:\n      case types.num:\n      case types._true:\n      case types._false:\n        return this.tsParseLiteralTypeNode();\n\n      case types.plusMin:\n        if (this.state.value === \"-\") {\n          const node = this.startNode();\n\n          if (this.lookahead().type !== types.num) {\n            throw this.unexpected();\n          }\n\n          node.literal = this.parseMaybeUnary();\n          return this.finishNode(node, \"TSLiteralType\");\n        }\n\n        break;\n\n      case types._this:\n        return this.tsParseThisTypeOrThisTypePredicate();\n\n      case types._typeof:\n        return this.tsParseTypeQuery();\n\n      case types._import:\n        return this.tsParseImportType();\n\n      case types.braceL:\n        return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n\n      case types.bracketL:\n        return this.tsParseTupleType();\n\n      case types.parenL:\n        return this.tsParseParenthesizedType();\n\n      case types.backQuote:\n        return this.tsParseTemplateLiteralType();\n    }\n\n    throw this.unexpected();\n  }\n\n  tsParseArrayTypeOrHigher() {\n    let type = this.tsParseNonArrayType();\n\n    while (!this.hasPrecedingLineBreak() && this.eat(types.bracketL)) {\n      if (this.match(types.bracketR)) {\n        const node = this.startNodeAtNode(type);\n        node.elementType = type;\n        this.expect(types.bracketR);\n        type = this.finishNode(node, \"TSArrayType\");\n      } else {\n        const node = this.startNodeAtNode(type);\n        node.objectType = type;\n        node.indexType = this.tsParseType();\n        this.expect(types.bracketR);\n        type = this.finishNode(node, \"TSIndexedAccessType\");\n      }\n    }\n\n    return type;\n  }\n\n  tsParseTypeOperator(operator) {\n    const node = this.startNode();\n    this.expectContextual(operator);\n    node.operator = operator;\n    node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n    if (operator === \"readonly\") {\n      this.tsCheckTypeAnnotationForReadOnly(node);\n    }\n\n    return this.finishNode(node, \"TSTypeOperator\");\n  }\n\n  tsCheckTypeAnnotationForReadOnly(node) {\n    switch (node.typeAnnotation.type) {\n      case \"TSTupleType\":\n      case \"TSArrayType\":\n        return;\n\n      default:\n        this.raise(node.start, TSErrors.UnexpectedReadonly);\n    }\n  }\n\n  tsParseInferType() {\n    const node = this.startNode();\n    this.expectContextual(\"infer\");\n    const typeParameter = this.startNode();\n    typeParameter.name = this.parseIdentifierName(typeParameter.start);\n    node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n    return this.finishNode(node, \"TSInferType\");\n  }\n\n  tsParseTypeOperatorOrHigher() {\n    const operator = [\"keyof\", \"unique\", \"readonly\"].find(kw => this.isContextual(kw));\n    return operator ? this.tsParseTypeOperator(operator) : this.isContextual(\"infer\") ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();\n  }\n\n  tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n    this.eat(operator);\n    let type = parseConstituentType();\n\n    if (this.match(operator)) {\n      const types = [type];\n\n      while (this.eat(operator)) {\n        types.push(parseConstituentType());\n      }\n\n      const node = this.startNodeAtNode(type);\n      node.types = types;\n      type = this.finishNode(node, kind);\n    }\n\n    return type;\n  }\n\n  tsParseIntersectionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), types.bitwiseAND);\n  }\n\n  tsParseUnionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), types.bitwiseOR);\n  }\n\n  tsIsStartOfFunctionType() {\n    if (this.isRelational(\"<\")) {\n      return true;\n    }\n\n    return this.match(types.parenL) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n  }\n\n  tsSkipParameterStart() {\n    if (this.match(types.name) || this.match(types._this)) {\n      this.next();\n      return true;\n    }\n\n    if (this.match(types.braceL)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(types.braceL)) {\n          ++braceStackCounter;\n        } else if (this.match(types.braceR)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    if (this.match(types.bracketL)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(types.bracketL)) {\n          ++braceStackCounter;\n        } else if (this.match(types.bracketR)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  tsIsUnambiguouslyStartOfFunctionType() {\n    this.next();\n\n    if (this.match(types.parenR) || this.match(types.ellipsis)) {\n      return true;\n    }\n\n    if (this.tsSkipParameterStart()) {\n      if (this.match(types.colon) || this.match(types.comma) || this.match(types.question) || this.match(types.eq)) {\n        return true;\n      }\n\n      if (this.match(types.parenR)) {\n        this.next();\n\n        if (this.match(types.arrow)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  tsParseTypeOrTypePredicateAnnotation(returnToken) {\n    return this.tsInType(() => {\n      const t = this.startNode();\n      this.expect(returnToken);\n      const asserts = this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));\n\n      if (asserts && this.match(types._this)) {\n        let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n\n        if (thisTypePredicate.type === \"TSThisType\") {\n          const node = this.startNodeAtNode(t);\n          node.parameterName = thisTypePredicate;\n          node.asserts = true;\n          thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n        } else {\n          thisTypePredicate.asserts = true;\n        }\n\n        t.typeAnnotation = thisTypePredicate;\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n      if (!typePredicateVariable) {\n        if (!asserts) {\n          return this.tsParseTypeAnnotation(false, t);\n        }\n\n        const node = this.startNodeAtNode(t);\n        node.parameterName = this.parseIdentifier();\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const type = this.tsParseTypeAnnotation(false);\n      const node = this.startNodeAtNode(t);\n      node.parameterName = typePredicateVariable;\n      node.typeAnnotation = type;\n      node.asserts = asserts;\n      t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    });\n  }\n\n  tsTryParseTypeOrTypePredicateAnnotation() {\n    return this.match(types.colon) ? this.tsParseTypeOrTypePredicateAnnotation(types.colon) : undefined;\n  }\n\n  tsTryParseTypeAnnotation() {\n    return this.match(types.colon) ? this.tsParseTypeAnnotation() : undefined;\n  }\n\n  tsTryParseType() {\n    return this.tsEatThenParseType(types.colon);\n  }\n\n  tsParseTypePredicatePrefix() {\n    const id = this.parseIdentifier();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      this.next();\n      return id;\n    }\n  }\n\n  tsParseTypePredicateAsserts() {\n    if (!this.match(types.name) || this.state.value !== \"asserts\" || this.hasPrecedingLineBreak()) {\n      return false;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    this.next();\n\n    if (!this.match(types.name) && !this.match(types._this)) {\n      return false;\n    }\n\n    if (containsEsc) {\n      this.raise(this.state.lastTokStart, Errors.InvalidEscapedReservedWord, \"asserts\");\n    }\n\n    return true;\n  }\n\n  tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {\n    this.tsInType(() => {\n      if (eatColon) this.expect(types.colon);\n      t.typeAnnotation = this.tsParseType();\n    });\n    return this.finishNode(t, \"TSTypeAnnotation\");\n  }\n\n  tsParseType() {\n    assert(this.state.inType);\n    const type = this.tsParseNonConditionalType();\n\n    if (this.hasPrecedingLineBreak() || !this.eat(types._extends)) {\n      return type;\n    }\n\n    const node = this.startNodeAtNode(type);\n    node.checkType = type;\n    node.extendsType = this.tsParseNonConditionalType();\n    this.expect(types.question);\n    node.trueType = this.tsParseType();\n    this.expect(types.colon);\n    node.falseType = this.tsParseType();\n    return this.finishNode(node, \"TSConditionalType\");\n  }\n\n  tsParseNonConditionalType() {\n    if (this.tsIsStartOfFunctionType()) {\n      return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n    }\n\n    if (this.match(types._new)) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n    }\n\n    return this.tsParseUnionTypeOrHigher();\n  }\n\n  tsParseTypeAssertion() {\n    const node = this.startNode();\n\n    const _const = this.tsTryNextParseConstantContext();\n\n    node.typeAnnotation = _const || this.tsNextThenParseType();\n    this.expectRelational(\">\");\n    node.expression = this.parseMaybeUnary();\n    return this.finishNode(node, \"TSTypeAssertion\");\n  }\n\n  tsParseHeritageClause(descriptor) {\n    const originalStart = this.state.start;\n    const delimitedList = this.tsParseDelimitedList(\"HeritageClauseElement\", this.tsParseExpressionWithTypeArguments.bind(this));\n\n    if (!delimitedList.length) {\n      this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);\n    }\n\n    return delimitedList;\n  }\n\n  tsParseExpressionWithTypeArguments() {\n    const node = this.startNode();\n    node.expression = this.tsParseEntityName(false);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n  }\n\n  tsParseInterfaceDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, BIND_TS_INTERFACE, undefined, \"typescript interface declaration\");\n    node.typeParameters = this.tsTryParseTypeParameters();\n\n    if (this.eat(types._extends)) {\n      node.extends = this.tsParseHeritageClause(\"extends\");\n    }\n\n    const body = this.startNode();\n    body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n    node.body = this.finishNode(body, \"TSInterfaceBody\");\n    return this.finishNode(node, \"TSInterfaceDeclaration\");\n  }\n\n  tsParseTypeAliasDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, BIND_TS_TYPE, undefined, \"typescript type alias\");\n    node.typeParameters = this.tsTryParseTypeParameters();\n    node.typeAnnotation = this.tsExpectThenParseType(types.eq);\n    this.semicolon();\n    return this.finishNode(node, \"TSTypeAliasDeclaration\");\n  }\n\n  tsInNoContext(cb) {\n    const oldContext = this.state.context;\n    this.state.context = [oldContext[0]];\n\n    try {\n      return cb();\n    } finally {\n      this.state.context = oldContext;\n    }\n  }\n\n  tsInType(cb) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.inType = oldInType;\n    }\n  }\n\n  tsEatThenParseType(token) {\n    return !this.match(token) ? undefined : this.tsNextThenParseType();\n  }\n\n  tsExpectThenParseType(token) {\n    return this.tsDoThenParseType(() => this.expect(token));\n  }\n\n  tsNextThenParseType() {\n    return this.tsDoThenParseType(() => this.next());\n  }\n\n  tsDoThenParseType(cb) {\n    return this.tsInType(() => {\n      cb();\n      return this.tsParseType();\n    });\n  }\n\n  tsParseEnumMember() {\n    const node = this.startNode();\n    node.id = this.match(types.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n\n    if (this.eat(types.eq)) {\n      node.initializer = this.parseMaybeAssign();\n    }\n\n    return this.finishNode(node, \"TSEnumMember\");\n  }\n\n  tsParseEnumDeclaration(node, isConst) {\n    if (isConst) node.const = true;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM, undefined, \"typescript enum declaration\");\n    this.expect(types.braceL);\n    node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n    this.expect(types.braceR);\n    return this.finishNode(node, \"TSEnumDeclaration\");\n  }\n\n  tsParseModuleBlock() {\n    const node = this.startNode();\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(types.braceL);\n    this.parseBlockOrModuleBlockBody(node.body = [], undefined, true, types.braceR);\n    this.scope.exit();\n    return this.finishNode(node, \"TSModuleBlock\");\n  }\n\n  tsParseModuleOrNamespaceDeclaration(node, nested = false) {\n    node.id = this.parseIdentifier();\n\n    if (!nested) {\n      this.checkLVal(node.id, BIND_TS_NAMESPACE, null, \"module or namespace declaration\");\n    }\n\n    if (this.eat(types.dot)) {\n      const inner = this.startNode();\n      this.tsParseModuleOrNamespaceDeclaration(inner, true);\n      node.body = inner;\n    } else {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseAmbientExternalModuleDeclaration(node) {\n    if (this.isContextual(\"global\")) {\n      node.global = true;\n      node.id = this.parseIdentifier();\n    } else if (this.match(types.string)) {\n      node.id = this.parseExprAtom();\n    } else {\n      this.unexpected();\n    }\n\n    if (this.match(types.braceL)) {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    } else {\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseImportEqualsDeclaration(node, isExport) {\n    node.isExport = isExport || false;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, BIND_LEXICAL, undefined, \"import equals declaration\");\n    this.expect(types.eq);\n    node.moduleReference = this.tsParseModuleReference();\n    this.semicolon();\n    return this.finishNode(node, \"TSImportEqualsDeclaration\");\n  }\n\n  tsIsExternalModuleReference() {\n    return this.isContextual(\"require\") && this.lookaheadCharCode() === 40;\n  }\n\n  tsParseModuleReference() {\n    return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\n  }\n\n  tsParseExternalModuleReference() {\n    const node = this.startNode();\n    this.expectContextual(\"require\");\n    this.expect(types.parenL);\n\n    if (!this.match(types.string)) {\n      throw this.unexpected();\n    }\n\n    node.expression = this.parseExprAtom();\n    this.expect(types.parenR);\n    return this.finishNode(node, \"TSExternalModuleReference\");\n  }\n\n  tsLookAhead(f) {\n    const state = this.state.clone();\n    const res = f();\n    this.state = state;\n    return res;\n  }\n\n  tsTryParseAndCatch(f) {\n    const result = this.tryParse(abort => f() || abort());\n    if (result.aborted || !result.node) return undefined;\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  tsTryParse(f) {\n    const state = this.state.clone();\n    const result = f();\n\n    if (result !== undefined && result !== false) {\n      return result;\n    } else {\n      this.state = state;\n      return undefined;\n    }\n  }\n\n  tsTryParseDeclare(nany) {\n    if (this.isLineTerminator()) {\n      return;\n    }\n\n    let starttype = this.state.type;\n    let kind;\n\n    if (this.isContextual(\"let\")) {\n      starttype = types._var;\n      kind = \"let\";\n    }\n\n    switch (starttype) {\n      case types._function:\n        return this.parseFunctionStatement(nany, false, true);\n\n      case types._class:\n        nany.declare = true;\n        return this.parseClass(nany, true, false);\n\n      case types._const:\n        if (this.match(types._const) && this.isLookaheadContextual(\"enum\")) {\n          this.expect(types._const);\n          this.expectContextual(\"enum\");\n          return this.tsParseEnumDeclaration(nany, true);\n        }\n\n      case types._var:\n        kind = kind || this.state.value;\n        return this.parseVarStatement(nany, kind);\n\n      case types.name:\n        {\n          const value = this.state.value;\n\n          if (value === \"global\") {\n            return this.tsParseAmbientExternalModuleDeclaration(nany);\n          } else {\n            return this.tsParseDeclaration(nany, value, true);\n          }\n        }\n    }\n  }\n\n  tsTryParseExportDeclaration() {\n    return this.tsParseDeclaration(this.startNode(), this.state.value, true);\n  }\n\n  tsParseExpressionStatement(node, expr) {\n    switch (expr.name) {\n      case \"declare\":\n        {\n          const declaration = this.tsTryParseDeclare(node);\n\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n\n          break;\n        }\n\n      case \"global\":\n        if (this.match(types.braceL)) {\n          this.scope.enter(SCOPE_TS_MODULE);\n          this.prodParam.enter(PARAM);\n          const mod = node;\n          mod.global = true;\n          mod.id = expr;\n          mod.body = this.tsParseModuleBlock();\n          this.scope.exit();\n          this.prodParam.exit();\n          return this.finishNode(mod, \"TSModuleDeclaration\");\n        }\n\n        break;\n\n      default:\n        return this.tsParseDeclaration(node, expr.name, false);\n    }\n  }\n\n  tsParseDeclaration(node, value, next) {\n    switch (value) {\n      case \"abstract\":\n        if (this.tsCheckLineTerminatorAndMatch(types._class, next)) {\n          const cls = node;\n          cls.abstract = true;\n\n          if (next) {\n            this.next();\n\n            if (!this.match(types._class)) {\n              this.unexpected(null, types._class);\n            }\n          }\n\n          return this.parseClass(cls, true, false);\n        }\n\n        break;\n\n      case \"enum\":\n        if (next || this.match(types.name)) {\n          if (next) this.next();\n          return this.tsParseEnumDeclaration(node, false);\n        }\n\n        break;\n\n      case \"interface\":\n        if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          if (next) this.next();\n          return this.tsParseInterfaceDeclaration(node);\n        }\n\n        break;\n\n      case \"module\":\n        if (next) this.next();\n\n        if (this.match(types.string)) {\n          return this.tsParseAmbientExternalModuleDeclaration(node);\n        } else if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n\n        break;\n\n      case \"namespace\":\n        if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          if (next) this.next();\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n\n        break;\n\n      case \"type\":\n        if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          if (next) this.next();\n          return this.tsParseTypeAliasDeclaration(node);\n        }\n\n        break;\n    }\n  }\n\n  tsCheckLineTerminatorAndMatch(tokenType, next) {\n    return (next || this.match(tokenType)) && !this.isLineTerminator();\n  }\n\n  tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {\n    if (!this.isRelational(\"<\")) {\n      return undefined;\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.maybeInArrowParameters = true;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    const res = this.tsTryParseAndCatch(() => {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.typeParameters = this.tsParseTypeParameters();\n      super.parseFunctionParams(node);\n      node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n      this.expect(types.arrow);\n      return node;\n    });\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n\n    if (!res) {\n      return undefined;\n    }\n\n    return this.parseArrowExpression(res, null, true);\n  }\n\n  tsParseTypeArguments() {\n    const node = this.startNode();\n    node.params = this.tsInType(() => this.tsInNoContext(() => {\n      this.expectRelational(\"<\");\n      return this.tsParseDelimitedList(\"TypeParametersOrArguments\", this.tsParseType.bind(this));\n    }));\n    this.state.exprAllowed = false;\n    this.expectRelational(\">\");\n    return this.finishNode(node, \"TSTypeParameterInstantiation\");\n  }\n\n  tsIsDeclarationStart() {\n    if (this.match(types.name)) {\n      switch (this.state.value) {\n        case \"abstract\":\n        case \"declare\":\n        case \"enum\":\n        case \"interface\":\n        case \"module\":\n        case \"namespace\":\n        case \"type\":\n          return true;\n      }\n    }\n\n    return false;\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.tsIsDeclarationStart()) return false;\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let accessibility;\n    let readonly = false;\n\n    if (allowModifiers) {\n      accessibility = this.parseAccessModifier();\n      readonly = !!this.tsParseModifier([\"readonly\"]);\n    }\n\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (accessibility || readonly) {\n      const pp = this.startNodeAt(startPos, startLoc);\n\n      if (decorators.length) {\n        pp.decorators = decorators;\n      }\n\n      if (accessibility) pp.accessibility = accessibility;\n      if (readonly) pp.readonly = readonly;\n\n      if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n        this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);\n      }\n\n      pp.parameter = elt;\n      return this.finishNode(pp, \"TSParameterProperty\");\n    }\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(types.colon)) {\n      node.returnType = this.tsParseTypeOrTypePredicateAnnotation(types.colon);\n    }\n\n    const bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" ? \"TSDeclareMethod\" : undefined;\n\n    if (bodilessType && !this.match(types.braceL) && this.isLineTerminator()) {\n      this.finishNode(node, bodilessType);\n      return;\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.body && node.id) {\n      this.checkLVal(node.id, BIND_TS_AMBIENT, null, \"function name\");\n    } else {\n      super.registerFunctionStatementId(...arguments);\n    }\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!this.hasPrecedingLineBreak() && this.match(types.bang)) {\n      this.state.exprAllowed = false;\n      this.next();\n      const nonNullExpression = this.startNodeAt(startPos, startLoc);\n      nonNullExpression.expression = base;\n      return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n    }\n\n    if (this.isRelational(\"<\")) {\n      const result = this.tsTryParseAndCatch(() => {\n        if (!noCalls && this.atPossibleAsyncArrow(base)) {\n          const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);\n\n          if (asyncArrowFn) {\n            return asyncArrowFn;\n          }\n        }\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        const typeArguments = this.tsParseTypeArguments();\n\n        if (typeArguments) {\n          if (!noCalls && this.eat(types.parenL)) {\n            node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n            node.typeParameters = typeArguments;\n            return this.finishCallExpression(node, state.optionalChainMember);\n          } else if (this.match(types.backQuote)) {\n            return this.parseTaggedTemplateExpression(startPos, startLoc, base, state, typeArguments);\n          }\n        }\n\n        this.unexpected();\n      });\n      if (result) return result;\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n  }\n\n  parseNewArguments(node) {\n    if (this.isRelational(\"<\")) {\n      const typeParameters = this.tsTryParseAndCatch(() => {\n        const args = this.tsParseTypeArguments();\n        if (!this.match(types.parenL)) this.unexpected();\n        return args;\n      });\n\n      if (typeParameters) {\n        node.typeParameters = typeParameters;\n      }\n    }\n\n    super.parseNewArguments(node);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec, noIn) {\n    if (nonNull(types._in.binop) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(\"as\")) {\n      const node = this.startNodeAt(leftStartPos, leftStartLoc);\n      node.expression = left;\n\n      const _const = this.tsTryNextParseConstantContext();\n\n      if (_const) {\n        node.typeAnnotation = _const;\n      } else {\n        node.typeAnnotation = this.tsNextThenParseType();\n      }\n\n      this.finishNode(node, \"TSAsExpression\");\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);\n    }\n\n    return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec, noIn);\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {}\n\n  checkDuplicateExports() {}\n\n  parseImport(node) {\n    if (this.match(types.name) || this.match(types.star) || this.match(types.braceL)) {\n      const ahead = this.lookahead();\n\n      if (this.match(types.name) && ahead.type === types.eq) {\n        return this.tsParseImportEqualsDeclaration(node);\n      }\n\n      if (this.isContextual(\"type\") && ahead.type !== types.comma && !(ahead.type === types.name && ahead.value === \"from\")) {\n        node.importKind = \"type\";\n        this.next();\n      } else {\n        node.importKind = \"value\";\n      }\n    }\n\n    const importNode = super.parseImport(node);\n\n    if (importNode.importKind === \"type\" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === \"ImportDefaultSpecifier\") {\n      this.raise(importNode.start, \"A type-only import can specify a default import or named bindings, but not both.\");\n    }\n\n    return importNode;\n  }\n\n  parseExport(node) {\n    if (this.match(types._import)) {\n      this.expect(types._import);\n      return this.tsParseImportEqualsDeclaration(node, true);\n    } else if (this.eat(types.eq)) {\n      const assign = node;\n      assign.expression = this.parseExpression();\n      this.semicolon();\n      return this.finishNode(assign, \"TSExportAssignment\");\n    } else if (this.eatContextual(\"as\")) {\n      const decl = node;\n      this.expectContextual(\"namespace\");\n      decl.id = this.parseIdentifier();\n      this.semicolon();\n      return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n    } else {\n      if (this.isContextual(\"type\") && this.lookahead().type === types.braceL) {\n        this.next();\n        node.exportKind = \"type\";\n      } else {\n        node.exportKind = \"value\";\n      }\n\n      return super.parseExport(node);\n    }\n  }\n\n  isAbstractClass() {\n    return this.isContextual(\"abstract\") && this.lookahead().type === types._class;\n  }\n\n  parseExportDefaultExpression() {\n    if (this.isAbstractClass()) {\n      const cls = this.startNode();\n      this.next();\n      this.parseClass(cls, true, true);\n      cls.abstract = true;\n      return cls;\n    }\n\n    if (this.state.value === \"interface\") {\n      const result = this.tsParseDeclaration(this.startNode(), this.state.value, true);\n      if (result) return result;\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseStatementContent(context, topLevel) {\n    if (this.state.type === types._const) {\n      const ahead = this.lookahead();\n\n      if (ahead.type === types.name && ahead.value === \"enum\") {\n        const node = this.startNode();\n        this.expect(types._const);\n        this.expectContextual(\"enum\");\n        return this.tsParseEnumDeclaration(node, true);\n      }\n    }\n\n    return super.parseStatementContent(context, topLevel);\n  }\n\n  parseAccessModifier() {\n    return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n  }\n\n  parseClassMember(classBody, member, state, constructorAllowsSuper) {\n    this.tsParseModifiers(member, [\"declare\"]);\n    const accessibility = this.parseAccessModifier();\n    if (accessibility) member.accessibility = accessibility;\n    this.tsParseModifiers(member, [\"declare\"]);\n    super.parseClassMember(classBody, member, state, constructorAllowsSuper);\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic, constructorAllowsSuper) {\n    this.tsParseModifiers(member, [\"abstract\", \"readonly\", \"declare\"]);\n    const idx = this.tsTryParseIndexSignature(member);\n\n    if (idx) {\n      classBody.body.push(idx);\n\n      if (member.abstract) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAbstract);\n      }\n\n      if (isStatic) {\n        this.raise(member.start, TSErrors.IndexSignatureHasStatic);\n      }\n\n      if (member.accessibility) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAccessibility, member.accessibility);\n      }\n\n      return;\n    }\n\n    super.parseClassMemberWithIsStatic(classBody, member, state, isStatic, constructorAllowsSuper);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {\n    const optional = this.eat(types.question);\n    if (optional) methodOrProp.optional = true;\n\n    if (methodOrProp.readonly && this.match(types.parenL)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);\n    }\n\n    if (methodOrProp.declare && this.match(types.parenL)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);\n    }\n  }\n\n  parseExpressionStatement(node, expr) {\n    const decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr) : undefined;\n    return decl || super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.tsIsDeclarationStart()) return true;\n    return super.shouldParseExportDeclaration();\n  }\n\n  parseConditional(expr, noIn, startPos, startLoc, refNeedsArrowPos) {\n    if (!refNeedsArrowPos || !this.match(types.question)) {\n      return super.parseConditional(expr, noIn, startPos, startLoc, refNeedsArrowPos);\n    }\n\n    const result = this.tryParse(() => super.parseConditional(expr, noIn, startPos, startLoc));\n\n    if (!result.node) {\n      refNeedsArrowPos.start = result.error.pos || this.state.start;\n      return expr;\n    }\n\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(types.question)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(types.colon)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  parseExportDeclaration(node) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isDeclare = this.eatContextual(\"declare\");\n    let declaration;\n\n    if (this.match(types.name)) {\n      declaration = this.tsTryParseExportDeclaration();\n    }\n\n    if (!declaration) {\n      declaration = super.parseExportDeclaration(node);\n    }\n\n    if (declaration && (declaration.type === \"TSInterfaceDeclaration\" || declaration.type === \"TSTypeAliasDeclaration\" || isDeclare)) {\n      node.exportKind = \"type\";\n    }\n\n    if (declaration && isDeclare) {\n      this.resetStartLocation(declaration, startPos, startLoc);\n      declaration.declare = true;\n    }\n\n    return declaration;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    if ((!isStatement || optionalId) && this.isContextual(\"implements\")) {\n      return;\n    }\n\n    super.parseClassId(node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n  }\n\n  parseClassPropertyAnnotation(node) {\n    if (!node.optional && this.eat(types.bang)) {\n      node.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n  }\n\n  parseClassProperty(node) {\n    this.parseClassPropertyAnnotation(node);\n\n    if (node.declare && this.match(types.equal)) {\n      this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (node.abstract) {\n      this.raise(node.start, TSErrors.PrivateElementHasAbstract);\n    }\n\n    if (node.accessibility) {\n      this.raise(node.start, TSErrors.PrivateElementHasAccessibility, node.accessibility);\n    }\n\n    this.parseClassPropertyAnnotation(node);\n    return super.parseClassPrivateProperty(node);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.isRelational(\"<\")) {\n      node.superTypeParameters = this.tsParseTypeArguments();\n    }\n\n    if (this.eatContextual(\"implements\")) {\n      node.implements = this.tsParseHeritageClause(\"implements\");\n    }\n  }\n\n  parseObjPropValue(prop, ...args) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) prop.typeParameters = typeParameters;\n    super.parseObjPropValue(prop, ...args);\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (decl.id.type === \"Identifier\" && this.eat(types.bang)) {\n      decl.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      decl.id.typeAnnotation = type;\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(types.colon)) {\n      node.returnType = this.tsParseTypeAnnotation();\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  parseMaybeAssign(...args) {\n    let state;\n    let jsx;\n    let typeCast;\n\n    if (this.match(types.jsxTagStart)) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n\n      if (context[context.length - 1] === types$1.j_oTag) {\n        context.length -= 2;\n      } else if (context[context.length - 1] === types$1.j_expr) {\n        context.length -= 1;\n      }\n    }\n\n    if (!(jsx && jsx.error) && !this.isRelational(\"<\")) {\n      return super.parseMaybeAssign(...args);\n    }\n\n    let typeParameters;\n    state = state || this.state.clone();\n    const arrow = this.tryParse(abort => {\n      typeParameters = this.tsParseTypeParameters();\n      const expr = super.parseMaybeAssign(...args);\n\n      if (expr.type !== \"ArrowFunctionExpression\" || expr.extra && expr.extra.parenthesized) {\n        abort();\n      }\n\n      if (typeParameters && typeParameters.params.length !== 0) {\n        this.resetStartLocationFromNode(expr, typeParameters);\n      }\n\n      expr.typeParameters = typeParameters;\n      return expr;\n    }, state);\n    if (!arrow.error && !arrow.aborted) return arrow.node;\n\n    if (!jsx) {\n      assert(!this.hasPlugin(\"jsx\"));\n      typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!typeCast.error) return typeCast.node;\n    }\n\n    if (jsx && jsx.node) {\n      this.state = jsx.failState;\n      return jsx.node;\n    }\n\n    if (arrow.node) {\n      this.state = arrow.failState;\n      return arrow.node;\n    }\n\n    if (typeCast && typeCast.node) {\n      this.state = typeCast.failState;\n      return typeCast.node;\n    }\n\n    if (jsx && jsx.thrown) throw jsx.error;\n    if (arrow.thrown) throw arrow.error;\n    if (typeCast && typeCast.thrown) throw typeCast.error;\n    throw jsx && jsx.error || arrow.error || typeCast && typeCast.error;\n  }\n\n  parseMaybeUnary(refExpressionErrors) {\n    if (!this.hasPlugin(\"jsx\") && this.isRelational(\"<\")) {\n      return this.tsParseTypeAssertion();\n    } else {\n      return super.parseMaybeUnary(refExpressionErrors);\n    }\n  }\n\n  parseArrow(node) {\n    if (this.match(types.colon)) {\n      const result = this.tryParse(abort => {\n        const returnType = this.tsParseTypeOrTypePredicateAnnotation(types.colon);\n        if (this.canInsertSemicolon() || !this.match(types.arrow)) abort();\n        return returnType;\n      });\n      if (result.aborted) return;\n\n      if (!result.thrown) {\n        if (result.error) this.state = result.failState;\n        node.returnType = result.node;\n      }\n    }\n\n    return super.parseArrow(node);\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(types.question)) {\n      if (param.type !== \"Identifier\") {\n        this.raise(param.start, TSErrors.PatternIsOptional);\n      }\n\n      param.optional = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) param.typeAnnotation = type;\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  toAssignable(node) {\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return super.toAssignable(this.typeCastToParameter(node));\n\n      case \"TSParameterProperty\":\n        return super.toAssignable(node);\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        node.expression = this.toAssignable(node.expression);\n        return node;\n\n      default:\n        return super.toAssignable(node);\n    }\n  }\n\n  checkLVal(expr, bindingType = BIND_NONE, checkClashes, contextDescription) {\n    switch (expr.type) {\n      case \"TSTypeCastExpression\":\n        return;\n\n      case \"TSParameterProperty\":\n        this.checkLVal(expr.parameter, bindingType, checkClashes, \"parameter property\");\n        return;\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        this.checkLVal(expr.expression, bindingType, checkClashes, contextDescription);\n        return;\n\n      default:\n        super.checkLVal(expr, bindingType, checkClashes, contextDescription);\n        return;\n    }\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types._this:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsParseTypeArguments();\n\n      if (this.match(types.parenL)) {\n        const call = super.parseMaybeDecoratorArguments(expr);\n        call.typeParameters = typeArguments;\n        return call;\n      }\n\n      this.unexpected(this.state.start, types.parenL);\n    }\n\n    return super.parseMaybeDecoratorArguments(expr);\n  }\n\n  isClassMethod() {\n    return this.isRelational(\"<\") || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(types.bang) || this.match(types.colon) || super.isClassProperty();\n  }\n\n  parseMaybeDefault(...args) {\n    const node = super.parseMaybeDefault(...args);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, TSErrors.TypeAnnotationAfterAssign);\n    }\n\n    return node;\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(types.relational, 1);\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  toAssignableList(exprList) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n      if (!expr) continue;\n\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          exprList[i] = this.typeCastToParameter(expr);\n          break;\n\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n          if (!this.state.maybeInArrowParameters) {\n            exprList[i] = this.typeCastToParameter(expr);\n          } else {\n            this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);\n          }\n\n          break;\n      }\n    }\n\n    return super.toAssignableList(...arguments);\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  toReferencedList(exprList, isInParens) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n\n      if (expr && expr.type === \"TSTypeCastExpression\") {\n        this.raise(expr.start, TSErrors.UnexpectedTypeAnnotation);\n      }\n    }\n\n    return exprList;\n  }\n\n  shouldParseArrow() {\n    return this.match(types.colon) || super.shouldParseArrow();\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types.colon) || super.shouldParseAsyncArrow();\n  }\n\n  canHaveLeadingDecorator() {\n    return super.canHaveLeadingDecorator() || this.isAbstractClass();\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArguments());\n      if (typeArguments) node.typeParameters = typeArguments;\n    }\n\n    return super.jsxParseOpeningElementAfterName(node);\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    const baseCount = super.getGetterSetterExpectedParamCount(method);\n    const firstParam = method.params[0];\n    const hasContextParam = firstParam && firstParam.type === \"Identifier\" && firstParam.name === \"this\";\n    return hasContextParam ? baseCount + 1 : baseCount;\n  }\n\n};\n\ntypes.placeholder = new TokenType(\"%%\", {\n  startsExpr: true\n});\n\nvar placeholders = superClass => class extends superClass {\n  parsePlaceholder(expectedNode) {\n    if (this.match(types.placeholder)) {\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      node.name = super.parseIdentifier(true);\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      this.expect(types.placeholder);\n      return this.finishPlaceholder(node, expectedNode);\n    }\n  }\n\n  finishPlaceholder(node, expectedNode) {\n    const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n    node.expectedNode = expectedNode;\n    return isFinished ? node : this.finishNode(node, \"Placeholder\");\n  }\n\n  getTokenFromCode(code) {\n    if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {\n      return this.finishOp(types.placeholder, 2);\n    }\n\n    return super.getTokenFromCode(...arguments);\n  }\n\n  parseExprAtom() {\n    return this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments);\n  }\n\n  parseIdentifier() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(...arguments);\n  }\n\n  checkReservedWord(word) {\n    if (word !== undefined) super.checkReservedWord(...arguments);\n  }\n\n  parseBindingAtom() {\n    return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments);\n  }\n\n  checkLVal(expr) {\n    if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n  }\n\n  toAssignable(node) {\n    if (node && node.type === \"Placeholder\" && node.expectedNode === \"Expression\") {\n      node.expectedNode = \"Pattern\";\n      return node;\n    }\n\n    return super.toAssignable(...arguments);\n  }\n\n  verifyBreakContinue(node) {\n    if (node.label && node.label.type === \"Placeholder\") return;\n    super.verifyBreakContinue(...arguments);\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type !== \"Placeholder\" || expr.extra && expr.extra.parenthesized) {\n      return super.parseExpressionStatement(...arguments);\n    }\n\n    if (this.match(types.colon)) {\n      const stmt = node;\n      stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n      this.next();\n      stmt.body = this.parseStatement(\"label\");\n      return this.finishNode(stmt, \"LabeledStatement\");\n    }\n\n    this.semicolon();\n    node.name = expr.name;\n    return this.finishPlaceholder(node, \"Statement\");\n  }\n\n  parseBlock() {\n    return this.parsePlaceholder(\"BlockStatement\") || super.parseBlock(...arguments);\n  }\n\n  parseFunctionId() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(...arguments);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n    this.next();\n    this.takeDecorators(node);\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n\n    if (placeholder) {\n      if (this.match(types._extends) || this.match(types.placeholder) || this.match(types.braceL)) {\n        node.id = placeholder;\n      } else if (optionalId || !isStatement) {\n        node.id = null;\n        node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n        return this.finishNode(node, type);\n      } else {\n        this.unexpected(null, \"A class name is required\");\n      }\n    } else {\n      this.parseClassId(node, isStatement, optionalId);\n    }\n\n    this.parseClassSuper(node);\n    node.body = this.parsePlaceholder(\"ClassBody\") || this.parseClassBody(!!node.superClass);\n    return this.finishNode(node, type);\n  }\n\n  parseExport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseExport(...arguments);\n\n    if (!this.isContextual(\"from\") && !this.match(types.comma)) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    this.expectPlugin(\"exportDefaultFrom\");\n    const specifier = this.startNode();\n    specifier.exported = placeholder;\n    node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n    return super.parseExport(node);\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (node.specifiers && node.specifiers.length > 0) {\n      return true;\n    }\n\n    return super.maybeParseExportDefaultSpecifier(...arguments);\n  }\n\n  checkExport(node) {\n    const {\n      specifiers\n    } = node;\n\n    if (specifiers && specifiers.length) {\n      node.specifiers = specifiers.filter(node => node.exported.type === \"Placeholder\");\n    }\n\n    super.checkExport(node);\n    node.specifiers = specifiers;\n  }\n\n  parseImport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseImport(...arguments);\n    node.specifiers = [];\n\n    if (!this.isContextual(\"from\") && !this.match(types.comma)) {\n      node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    const specifier = this.startNodeAtNode(placeholder);\n    specifier.local = placeholder;\n    this.finishNode(specifier, \"ImportDefaultSpecifier\");\n    node.specifiers.push(specifier);\n\n    if (this.eat(types.comma)) {\n      const hasStarImport = this.maybeParseStarImportSpecifier(node);\n      if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n    }\n\n    this.expectContextual(\"from\");\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    return this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource(...arguments);\n  }\n\n};\n\nvar v8intrinsic = superClass => class extends superClass {\n  parseV8Intrinsic() {\n    if (this.match(types.modulo)) {\n      const v8IntrinsicStart = this.state.start;\n      const node = this.startNode();\n      this.eat(types.modulo);\n\n      if (this.match(types.name)) {\n        const name = this.parseIdentifierName(this.state.start);\n        const identifier = this.createIdentifier(node, name);\n        identifier.type = \"V8IntrinsicIdentifier\";\n\n        if (this.match(types.parenL)) {\n          return identifier;\n        }\n      }\n\n      this.unexpected(v8IntrinsicStart);\n    }\n  }\n\n  parseExprAtom() {\n    return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n  }\n\n};\n\nfunction hasPlugin(plugins, name) {\n  return plugins.some(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n}\n\nfunction getPluginOption(plugins, name, option) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"smart\", \"fsharp\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nfunction validatePlugins(plugins) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\n    }\n\n    const decoratorsBeforeExport = getPluginOption(plugins, \"decorators\", \"decoratorsBeforeExport\");\n\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" + \" whose value must be a boolean. If you are migrating from\" + \" Babylon/Babel 6 or want to use the old decorators proposal, you\" + \" should use the 'decorators-legacy' plugin instead of 'decorators'.\");\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\") && !PIPELINE_PROPOSALS.includes(getPluginOption(plugins, \"pipelineOperator\", \"proposal\"))) {\n    throw new Error(\"'pipelineOperator' requires 'proposal' option whose value should be one of: \" + PIPELINE_PROPOSALS.map(p => `'${p}'`).join(\", \"));\n  }\n\n  if (hasPlugin(plugins, \"recordAndTuple\") && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"))) {\n    throw new Error(\"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" + RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"));\n  }\n}\n\nconst mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders\n};\nconst mixinPluginNames = Object.keys(mixinPlugins);\nconst defaultOptions = {\n  sourceType: \"script\",\n  sourceFilename: undefined,\n  startLine: 1,\n  allowAwaitOutsideFunction: false,\n  allowReturnOutsideFunction: false,\n  allowImportExportEverywhere: false,\n  allowSuperOutsideMethod: false,\n  allowUndeclaredExports: false,\n  plugins: [],\n  strictMode: null,\n  ranges: false,\n  tokens: false,\n  createParenthesizedExpressions: false,\n  errorRecovery: false\n};\n\nfunction getOptions(opts) {\n  const options = {};\n\n  for (let _i = 0, _Object$keys = Object.keys(defaultOptions); _i < _Object$keys.length; _i++) {\n    const key = _Object$keys[_i];\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n\n  return options;\n}\n\nclass State {\n  constructor() {\n    this.errors = [];\n    this.potentialArrowAt = -1;\n    this.noArrowAt = [];\n    this.noArrowParamsConversionAt = [];\n    this.inParameters = false;\n    this.maybeInArrowParameters = false;\n    this.maybeInAsyncArrowHead = false;\n    this.inPipeline = false;\n    this.inType = false;\n    this.noAnonFunctionType = false;\n    this.inPropertyName = false;\n    this.hasFlowComment = false;\n    this.isIterator = false;\n    this.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n    this.soloAwait = false;\n    this.inFSharpPipelineDirectBody = false;\n    this.labels = [];\n    this.decoratorStack = [[]];\n    this.yieldPos = -1;\n    this.awaitPos = -1;\n    this.comments = [];\n    this.trailingComments = [];\n    this.leadingComments = [];\n    this.commentStack = [];\n    this.commentPreviousNode = null;\n    this.pos = 0;\n    this.lineStart = 0;\n    this.type = types.eof;\n    this.value = null;\n    this.start = 0;\n    this.end = 0;\n    this.lastTokEndLoc = null;\n    this.lastTokStartLoc = null;\n    this.lastTokStart = 0;\n    this.lastTokEnd = 0;\n    this.context = [types$1.braceStatement];\n    this.exprAllowed = true;\n    this.containsEsc = false;\n    this.octalPositions = [];\n    this.exportedIdentifiers = [];\n    this.tokensLength = 0;\n  }\n\n  init(options) {\n    this.strict = options.strictMode === false ? false : options.sourceType === \"module\";\n    this.curLine = options.startLine;\n    this.startLoc = this.endLoc = this.curPosition();\n  }\n\n  curPosition() {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n\n  clone(skipArrays) {\n    const state = new State();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      state[key] = val;\n    }\n\n    return state;\n  }\n\n}\n\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\n\nconst VALID_REGEX_FLAGS = new Set([\"g\", \"m\", \"s\", \"i\", \"y\", \"u\"]);\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [46, 66, 69, 79, 95, 98, 101, 111],\n  hex: [46, 88, 95, 120]\n};\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [48, 49];\nallowedNumericSeparatorSiblings.oct = [...allowedNumericSeparatorSiblings.bin, 50, 51, 52, 53, 54, 55];\nallowedNumericSeparatorSiblings.dec = [...allowedNumericSeparatorSiblings.oct, 56, 57];\nallowedNumericSeparatorSiblings.hex = [...allowedNumericSeparatorSiblings.dec, 65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102];\n\nclass Token {\n  constructor(state) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n}\n\nclass Tokenizer extends LocationParser {\n  constructor(options, input) {\n    super();\n    this.tokens = [];\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token) {\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  next() {\n    if (!this.isLookahead) {\n      this.checkKeywordEscapes();\n\n      if (this.options.tokens) {\n        this.pushToken(new Token(this.state));\n      }\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type) {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  match(type) {\n    return this.state.type === type;\n  }\n\n  lookahead() {\n    const old = this.state;\n    this.state = old.clone(true);\n    this.isLookahead = true;\n    this.next();\n    this.isLookahead = false;\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart() {\n    const thisTokEnd = this.state.pos;\n    skipWhiteSpace.lastIndex = thisTokEnd;\n    const skip = skipWhiteSpace.exec(this.input);\n    return thisTokEnd + skip[0].length;\n  }\n\n  lookaheadCharCode() {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  setStrict(strict) {\n    this.state.strict = strict;\n    if (!this.match(types.num) && !this.match(types.string)) return;\n    this.state.pos = this.state.start;\n\n    while (this.state.pos < this.state.lineStart) {\n      this.state.lineStart = this.input.lastIndexOf(\"\\n\", this.state.lineStart - 2) + 1;\n      --this.state.curLine;\n    }\n\n    this.nextToken();\n  }\n\n  curContext() {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  nextToken() {\n    const curContext = this.curContext();\n    if (!curContext || !curContext.preserveSpace) this.skipSpace();\n    this.state.octalPositions = [];\n    this.state.start = this.state.pos;\n    this.state.startLoc = this.state.curPosition();\n\n    if (this.state.pos >= this.length) {\n      this.finishToken(types.eof);\n      return;\n    }\n\n    const override = curContext == null ? void 0 : curContext.override;\n\n    if (override) {\n      override(this);\n    } else {\n      this.getTokenFromCode(this.input.codePointAt(this.state.pos));\n    }\n  }\n\n  pushComment(block, text, start, end, startLoc, endLoc) {\n    const comment = {\n      type: block ? \"CommentBlock\" : \"CommentLine\",\n      value: text,\n      start: start,\n      end: end,\n      loc: new SourceLocation(startLoc, endLoc)\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    this.state.comments.push(comment);\n    this.addComment(comment);\n  }\n\n  skipBlockComment() {\n    const startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", this.state.pos + 2);\n    if (end === -1) throw this.raise(start, Errors.UnterminatedComment);\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start;\n    let match;\n\n    while ((match = lineBreakG.exec(this.input)) && match.index < this.state.pos) {\n      ++this.state.curLine;\n      this.state.lineStart = match.index + match[0].length;\n    }\n\n    if (this.isLookahead) return;\n    this.pushComment(true, this.input.slice(start + 2, end), start, this.state.pos, startLoc, this.state.curPosition());\n  }\n\n  skipLineComment(startSkip) {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt(this.state.pos += startSkip);\n\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    if (this.isLookahead) return;\n    this.pushComment(false, this.input.slice(start + startSkip, this.state.pos), start, this.state.pos, startLoc, this.state.curPosition());\n  }\n\n  skipSpace() {\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 32:\n        case 160:\n        case 9:\n          ++this.state.pos;\n          break;\n\n        case 13:\n          if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n            ++this.state.pos;\n          }\n\n        case 10:\n        case 8232:\n        case 8233:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case 47:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case 42:\n              this.skipBlockComment();\n              break;\n\n            case 47:\n              this.skipLineComment(2);\n              break;\n\n            default:\n              break loop;\n          }\n\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else {\n            break loop;\n          }\n\n      }\n    }\n  }\n\n  finishToken(type, val) {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n    if (!this.isLookahead) this.updateContext(prevType);\n  }\n\n  readToken_numberSign() {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.input.charCodeAt(nextPos);\n\n    if (next >= 48 && next <= 57) {\n      throw this.raise(this.state.pos, Errors.UnexpectedDigitAfterHash);\n    }\n\n    if (next === 123 || next === 91 && this.hasPlugin(\"recordAndTuple\")) {\n      this.expectPlugin(\"recordAndTuple\");\n\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(this.state.pos, next === 123 ? Errors.RecordExpressionHashIncorrectStartSyntaxType : Errors.TupleExpressionHashIncorrectStartSyntaxType);\n      }\n\n      if (next === 123) {\n        this.finishToken(types.braceHashL);\n      } else {\n        this.finishToken(types.bracketHashL);\n      }\n\n      this.state.pos += 2;\n    } else {\n      this.finishOp(types.hash, 1);\n    }\n  }\n\n  readToken_dot() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next >= 48 && next <= 57) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\n      this.state.pos += 3;\n      this.finishToken(types.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types.dot);\n    }\n  }\n\n  readToken_slash() {\n    if (this.state.exprAllowed && !this.state.inType) {\n      ++this.state.pos;\n      this.readRegexp();\n      return;\n    }\n\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n    } else {\n      this.finishOp(types.slash, 1);\n    }\n  }\n\n  readToken_interpreter() {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== 33) return false;\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n    this.finishToken(types.interpreterDirective, value);\n    return true;\n  }\n\n  readToken_mult_modulo(code) {\n    let type = code === 42 ? types.star : types.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n    const exprAllowed = this.state.exprAllowed;\n\n    if (code === 42 && next === 42) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = types.exponent;\n    }\n\n    if (next === 61 && !exprAllowed) {\n      width++;\n      type = types.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n        this.finishOp(types.assign, 3);\n      } else {\n        this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2);\n      }\n\n      return;\n    }\n\n    if (code === 124) {\n      if (next === 62) {\n        this.finishOp(types.pipeline, 2);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 125) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, Errors.RecordExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.finishOp(types.braceBarR, 2);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 93) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, Errors.TupleExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.finishOp(types.bracketBarR, 2);\n        return;\n      }\n    }\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n      return;\n    }\n\n    this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1);\n  }\n\n  readToken_caret() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n    } else {\n      this.finishOp(types.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_plus_min(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (next === 45 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 62 && (this.state.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.pos)))) {\n        this.skipLineComment(3);\n        this.skipSpace();\n        this.nextToken();\n        return;\n      }\n\n      this.finishOp(types.incDec, 2);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n    } else {\n      this.finishOp(types.plusMin, 1);\n    }\n  }\n\n  readToken_lt_gt(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    let size = 1;\n\n    if (next === code) {\n      size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;\n\n      if (this.input.charCodeAt(this.state.pos + size) === 61) {\n        this.finishOp(types.assign, size + 1);\n        return;\n      }\n\n      this.finishOp(types.bitShift, size);\n      return;\n    }\n\n    if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 45 && this.input.charCodeAt(this.state.pos + 3) === 45) {\n      this.skipLineComment(4);\n      this.skipSpace();\n      this.nextToken();\n      return;\n    }\n\n    if (next === 61) {\n      size = 2;\n    }\n\n    this.finishOp(types.relational, size);\n  }\n\n  readToken_eq_excl(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types.equality, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n      return;\n    }\n\n    if (code === 61 && next === 62) {\n      this.state.pos += 2;\n      this.finishToken(types.arrow);\n      return;\n    }\n\n    this.finishOp(code === 61 ? types.eq : types.bang, 1);\n  }\n\n  readToken_question() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n\n    if (next === 63 && !this.state.inType) {\n      if (next2 === 61) {\n        this.finishOp(types.assign, 3);\n      } else {\n        this.finishOp(types.nullishCoalescing, 2);\n      }\n    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n      this.state.pos += 2;\n      this.finishToken(types.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types.question);\n    }\n  }\n\n  getTokenFromCode(code) {\n    switch (code) {\n      case 46:\n        this.readToken_dot();\n        return;\n\n      case 40:\n        ++this.state.pos;\n        this.finishToken(types.parenL);\n        return;\n\n      case 41:\n        ++this.state.pos;\n        this.finishToken(types.parenR);\n        return;\n\n      case 59:\n        ++this.state.pos;\n        this.finishToken(types.semi);\n        return;\n\n      case 44:\n        ++this.state.pos;\n        this.finishToken(types.comma);\n        return;\n\n      case 91:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, Errors.TupleExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.finishToken(types.bracketBarL);\n          this.state.pos += 2;\n        } else {\n          ++this.state.pos;\n          this.finishToken(types.bracketL);\n        }\n\n        return;\n\n      case 93:\n        ++this.state.pos;\n        this.finishToken(types.bracketR);\n        return;\n\n      case 123:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, Errors.RecordExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.finishToken(types.braceBarL);\n          this.state.pos += 2;\n        } else {\n          ++this.state.pos;\n          this.finishToken(types.braceL);\n        }\n\n        return;\n\n      case 125:\n        ++this.state.pos;\n        this.finishToken(types.braceR);\n        return;\n\n      case 58:\n        if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n          this.finishOp(types.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(types.colon);\n        }\n\n        return;\n\n      case 63:\n        this.readToken_question();\n        return;\n\n      case 96:\n        ++this.state.pos;\n        this.finishToken(types.backQuote);\n        return;\n\n      case 48:\n        {\n          const next = this.input.charCodeAt(this.state.pos + 1);\n\n          if (next === 120 || next === 88) {\n            this.readRadixNumber(16);\n            return;\n          }\n\n          if (next === 111 || next === 79) {\n            this.readRadixNumber(8);\n            return;\n          }\n\n          if (next === 98 || next === 66) {\n            this.readRadixNumber(2);\n            return;\n          }\n        }\n\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        this.readNumber(false);\n        return;\n\n      case 34:\n      case 39:\n        this.readString(code);\n        return;\n\n      case 47:\n        this.readToken_slash();\n        return;\n\n      case 37:\n      case 42:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case 124:\n      case 38:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case 94:\n        this.readToken_caret();\n        return;\n\n      case 43:\n      case 45:\n        this.readToken_plus_min(code);\n        return;\n\n      case 60:\n      case 62:\n        this.readToken_lt_gt(code);\n        return;\n\n      case 61:\n      case 33:\n        this.readToken_eq_excl(code);\n        return;\n\n      case 126:\n        this.finishOp(types.tilde, 1);\n        return;\n\n      case 64:\n        ++this.state.pos;\n        this.finishToken(types.at);\n        return;\n\n      case 35:\n        this.readToken_numberSign();\n        return;\n\n      case 92:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord();\n          return;\n        }\n\n    }\n\n    throw this.raise(this.state.pos, Errors.InvalidOrUnexpectedToken, String.fromCodePoint(code));\n  }\n\n  finishOp(type, size) {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp() {\n    const start = this.state.pos;\n    let escaped, inClass;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(start, Errors.UnterminatedRegExp);\n      }\n\n      const ch = this.input.charAt(this.state.pos);\n\n      if (lineBreak.test(ch)) {\n        throw this.raise(start, Errors.UnterminatedRegExp);\n      }\n\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === \"[\") {\n          inClass = true;\n        } else if (ch === \"]\" && inClass) {\n          inClass = false;\n        } else if (ch === \"/\" && !inClass) {\n          break;\n        }\n\n        escaped = ch === \"\\\\\";\n      }\n\n      ++this.state.pos;\n    }\n\n    const content = this.input.slice(start, this.state.pos);\n    ++this.state.pos;\n    let mods = \"\";\n\n    while (this.state.pos < this.length) {\n      const char = this.input[this.state.pos];\n      const charCode = this.input.codePointAt(this.state.pos);\n\n      if (VALID_REGEX_FLAGS.has(char)) {\n        if (mods.indexOf(char) > -1) {\n          this.raise(this.state.pos + 1, Errors.DuplicateRegExpFlags);\n        }\n      } else if (isIdentifierChar(charCode) || charCode === 92) {\n        this.raise(this.state.pos + 1, Errors.MalformedRegExpFlags);\n      } else {\n        break;\n      }\n\n      ++this.state.pos;\n      mods += char;\n    }\n\n    this.finishToken(types.regexp, {\n      pattern: content,\n      flags: mods\n    });\n  }\n\n  readInt(radix, len, forceLen, allowNumSeparator = true) {\n    const start = this.state.pos;\n    const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings = radix === 16 ? allowedNumericSeparatorSiblings.hex : radix === 10 ? allowedNumericSeparatorSiblings.dec : radix === 8 ? allowedNumericSeparatorSiblings.oct : allowedNumericSeparatorSiblings.bin;\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (this.hasPlugin(\"numericSeparator\")) {\n        if (code === 95) {\n          const prev = this.input.charCodeAt(this.state.pos - 1);\n          const next = this.input.charCodeAt(this.state.pos + 1);\n\n          if (allowedSiblings.indexOf(next) === -1) {\n            this.raise(this.state.pos, Errors.UnexpectedNumericSeparator);\n          } else if (forbiddenSiblings.indexOf(prev) > -1 || forbiddenSiblings.indexOf(next) > -1 || Number.isNaN(next)) {\n            this.raise(this.state.pos, Errors.UnexpectedNumericSeparator);\n          }\n\n          if (!allowNumSeparator) {\n            this.raise(this.state.pos, Errors.NumericSeparatorInEscapeSequence);\n          }\n\n          ++this.state.pos;\n          continue;\n        }\n      }\n\n      if (code >= 97) {\n        val = code - 97 + 10;\n      } else if (code >= 65) {\n        val = code - 65 + 10;\n      } else if (_isDigit(code)) {\n        val = code - 48;\n      } else {\n        val = Infinity;\n      }\n\n      if (val >= radix) {\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(this.state.start + i + 2, Errors.InvalidDigit, radix);\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n\n    if (this.state.pos === start || len != null && this.state.pos - start !== len || invalid) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix) {\n    const start = this.state.pos;\n    let isBigInt = false;\n    this.state.pos += 2;\n    const val = this.readInt(radix);\n\n    if (val == null) {\n      this.raise(this.state.start + 2, Errors.InvalidDigit, radix);\n    }\n\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 95) {\n      this.expectPlugin(\"numericSeparator\", this.state.pos);\n    }\n\n    if (next === 110) {\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      throw this.raise(this.state.pos, Errors.NumberIdentifier);\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(types.bigint, str);\n      return;\n    }\n\n    this.finishToken(types.num, val);\n  }\n\n  readNumber(startsWithDot) {\n    const start = this.state.pos;\n    let isFloat = false;\n    let isBigInt = false;\n    let isNonOctalDecimalInt = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, Errors.InvalidNumber);\n    }\n\n    let octal = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n\n    if (octal) {\n      if (this.state.strict) {\n        this.raise(start, Errors.StrictOctalLiteral);\n      }\n\n      if (/[89]/.test(this.input.slice(start, this.state.pos))) {\n        octal = false;\n        isNonOctalDecimalInt = true;\n      }\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 46 && !octal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if ((next === 69 || next === 101) && !octal) {\n      next = this.input.charCodeAt(++this.state.pos);\n\n      if (next === 43 || next === 45) {\n        ++this.state.pos;\n      }\n\n      if (this.readInt(10) === null) this.raise(start, \"Invalid number\");\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (this.hasPlugin(\"numericSeparator\") && (octal || isNonOctalDecimalInt)) {\n      const underscorePos = this.input.slice(start, this.state.pos).indexOf(\"_\");\n\n      if (underscorePos > 0) {\n        this.raise(underscorePos + start, Errors.ZeroDigitNumericSeparator);\n      }\n    }\n\n    if (next === 95) {\n      this.expectPlugin(\"numericSeparator\", this.state.pos);\n    }\n\n    if (next === 110) {\n      if (isFloat || octal || isNonOctalDecimalInt) {\n        this.raise(start, \"Invalid BigIntLiteral\");\n      }\n\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      throw this.raise(this.state.pos, Errors.NumberIdentifier);\n    }\n\n    const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(types.bigint, str);\n      return;\n    }\n\n    const val = octal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(types.num, val);\n  }\n\n  readCodePoint(throwOnInvalid) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === 123) {\n      const codePos = ++this.state.pos;\n      code = this.readHexChar(this.input.indexOf(\"}\", this.state.pos) - this.state.pos, true, throwOnInvalid);\n      ++this.state.pos;\n\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, Errors.InvalidCodePoint);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n\n    return code;\n  }\n\n  readString(quote) {\n    let out = \"\",\n        chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, Errors.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (ch === 8232 || ch === 8233) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(this.state.start, Errors.UnterminatedString);\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(types.string, out);\n  }\n\n  readTmplToken() {\n    let out = \"\",\n        chunkStart = this.state.pos,\n        containsInvalid = false;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, Errors.UnterminatedTemplate);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {\n        if (this.state.pos === this.state.start && this.match(types.template)) {\n          if (ch === 36) {\n            this.state.pos += 2;\n            this.finishToken(types.dollarBraceL);\n            return;\n          } else {\n            ++this.state.pos;\n            this.finishToken(types.backQuote);\n            return;\n          }\n        }\n\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(types.template, containsInvalid ? null : out);\n        return;\n      }\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n\n        switch (ch) {\n          case 13:\n            if (this.input.charCodeAt(this.state.pos) === 10) {\n              ++this.state.pos;\n            }\n\n          case 10:\n            out += \"\\n\";\n            break;\n\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  readEscapedChar(inTemplate) {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n\n    switch (ch) {\n      case 110:\n        return \"\\n\";\n\n      case 114:\n        return \"\\r\";\n\n      case 120:\n        {\n          const code = this.readHexChar(2, false, throwOnInvalid);\n          return code === null ? null : String.fromCharCode(code);\n        }\n\n      case 117:\n        {\n          const code = this.readCodePoint(throwOnInvalid);\n          return code === null ? null : String.fromCodePoint(code);\n        }\n\n      case 116:\n        return \"\\t\";\n\n      case 98:\n        return \"\\b\";\n\n      case 118:\n        return \"\\u000b\";\n\n      case 102:\n        return \"\\f\";\n\n      case 13:\n        if (this.input.charCodeAt(this.state.pos) === 10) {\n          ++this.state.pos;\n        }\n\n      case 10:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n\n      case 8232:\n      case 8233:\n        return \"\";\n\n      case 56:\n      case 57:\n        if (inTemplate) {\n          return null;\n        }\n\n      default:\n        if (ch >= 48 && ch <= 55) {\n          const codePos = this.state.pos - 1;\n          let octalStr = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/)[0];\n          let octal = parseInt(octalStr, 8);\n\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n\n          if (octalStr !== \"0\" || next === 56 || next === 57) {\n            if (inTemplate) {\n              return null;\n            } else if (this.state.strict) {\n              this.raise(codePos, Errors.StrictOctalLiteral);\n            } else {\n              this.state.octalPositions.push(codePos);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  readHexChar(len, forceLen, throwOnInvalid) {\n    const codePos = this.state.pos;\n    const n = this.readInt(16, len, forceLen, false);\n\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, Errors.InvalidEscapeSequence);\n      } else {\n        this.state.pos = codePos - 1;\n      }\n    }\n\n    return n;\n  }\n\n  readWord1() {\n    let word = \"\";\n    this.state.containsEsc = false;\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n\n    while (this.state.pos < this.length) {\n      const ch = this.input.codePointAt(this.state.pos);\n\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (this.state.isIterator && ch === 64) {\n        ++this.state.pos;\n      } else if (ch === 92) {\n        this.state.containsEsc = true;\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.pos;\n        const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== 117) {\n          this.raise(this.state.pos, Errors.MissingUnicodeEscape);\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(escStart, Errors.EscapedCharNotAnIdentifier);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  isIterator(word) {\n    return word === \"@@iterator\" || word === \"@@asyncIterator\";\n  }\n\n  readWord() {\n    const word = this.readWord1();\n    const type = keywords.get(word) || types.name;\n\n    if (this.state.isIterator && (!this.isIterator(word) || !this.state.inType)) {\n      this.raise(this.state.pos, Errors.InvalidIdentifier, word);\n    }\n\n    this.finishToken(type, word);\n  }\n\n  checkKeywordEscapes() {\n    const kw = this.state.type.keyword;\n\n    if (kw && this.state.containsEsc) {\n      this.raise(this.state.start, Errors.InvalidEscapedReservedWord, kw);\n    }\n  }\n\n  braceIsBlock(prevType) {\n    const parent = this.curContext();\n\n    if (parent === types$1.functionExpression || parent === types$1.functionStatement) {\n      return true;\n    }\n\n    if (prevType === types.colon && (parent === types$1.braceStatement || parent === types$1.braceExpression)) {\n      return !parent.isExpr;\n    }\n\n    if (prevType === types._return || prevType === types.name && this.state.exprAllowed) {\n      return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n    }\n\n    if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType === types.arrow) {\n      return true;\n    }\n\n    if (prevType === types.braceL) {\n      return parent === types$1.braceStatement;\n    }\n\n    if (prevType === types._var || prevType === types._const || prevType === types.name) {\n      return false;\n    }\n\n    if (prevType === types.relational) {\n      return true;\n    }\n\n    return !this.state.exprAllowed;\n  }\n\n  updateContext(prevType) {\n    const type = this.state.type;\n    let update;\n\n    if (type.keyword && (prevType === types.dot || prevType === types.questionDot)) {\n      this.state.exprAllowed = false;\n    } else if (update = type.updateContext) {\n      update.call(this, prevType);\n    } else {\n      this.state.exprAllowed = type.beforeExpr;\n    }\n  }\n\n}\n\nclass UtilParser extends Tokenizer {\n  addExtra(node, key, val) {\n    if (!node) return;\n    const extra = node.extra = node.extra || {};\n    extra[key] = val;\n  }\n\n  isRelational(op) {\n    return this.match(types.relational) && this.state.value === op;\n  }\n\n  isLookaheadRelational(op) {\n    const next = this.nextTokenStart();\n\n    if (this.input.charAt(next) === op) {\n      if (next + 1 === this.input.length) {\n        return true;\n      }\n\n      const afterNext = this.input.charCodeAt(next + 1);\n      return afterNext !== op.charCodeAt(0) && afterNext !== 61;\n    }\n\n    return false;\n  }\n\n  expectRelational(op) {\n    if (this.isRelational(op)) {\n      this.next();\n    } else {\n      this.unexpected(null, types.relational);\n    }\n  }\n\n  isContextual(name) {\n    return this.match(types.name) && this.state.value === name && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart, name) {\n    const nameEnd = nameStart + name.length;\n    return this.input.slice(nameStart, nameEnd) === name && (nameEnd === this.input.length || !isIdentifierChar(this.input.charCodeAt(nameEnd)));\n  }\n\n  isLookaheadContextual(name) {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  eatContextual(name) {\n    return this.isContextual(name) && this.eat(types.name);\n  }\n\n  expectContextual(name, message) {\n    if (!this.eatContextual(name)) this.unexpected(null, message);\n  }\n\n  canInsertSemicolon() {\n    return this.match(types.eof) || this.match(types.braceR) || this.hasPrecedingLineBreak();\n  }\n\n  hasPrecedingLineBreak() {\n    return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n  }\n\n  isLineTerminator() {\n    return this.eat(types.semi) || this.canInsertSemicolon();\n  }\n\n  semicolon() {\n    if (!this.isLineTerminator()) this.unexpected(null, types.semi);\n  }\n\n  expect(type, pos) {\n    this.eat(type) || this.unexpected(pos, type);\n  }\n\n  assertNoSpace(message = \"Unexpected space.\") {\n    if (this.state.start > this.state.lastTokEnd) {\n      this.raise(this.state.lastTokEnd, message);\n    }\n  }\n\n  unexpected(pos, messageOrType = \"Unexpected token\") {\n    if (typeof messageOrType !== \"string\") {\n      messageOrType = `Unexpected token, expected \"${messageOrType.label}\"`;\n    }\n\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n  }\n\n  expectPlugin(name, pos) {\n    if (!this.hasPlugin(name)) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: [name]\n      }, `This experimental syntax requires enabling the parser plugin: '${name}'`);\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(names, pos) {\n    if (!names.some(n => this.hasPlugin(n))) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: names\n      }, `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(\", \")}'`);\n    }\n  }\n\n  checkYieldAwaitInDefaultParams() {\n    if (this.state.yieldPos !== -1 && (this.state.awaitPos === -1 || this.state.yieldPos < this.state.awaitPos)) {\n      this.raise(this.state.yieldPos, \"Yield cannot be used as name inside a generator function\");\n    }\n\n    if (this.state.awaitPos !== -1) {\n      this.raise(this.state.awaitPos, \"Await cannot be used as name inside an async function\");\n    }\n  }\n\n  tryParse(fn, oldState = this.state.clone()) {\n    const abortSignal = {\n      node: null\n    };\n\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n\n      if (error instanceof SyntaxError) {\n        return {\n          node: null,\n          error,\n          thrown: true,\n          aborted: false,\n          failState\n        };\n      }\n\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(refExpressionErrors, andThrow) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssign,\n      doubleProto\n    } = refExpressionErrors;\n    if (!andThrow) return shorthandAssign >= 0 || doubleProto >= 0;\n\n    if (shorthandAssign >= 0) {\n      this.unexpected(shorthandAssign);\n    }\n\n    if (doubleProto >= 0) {\n      this.raise(doubleProto, Errors.DuplicateProto);\n    }\n  }\n\n}\n\nclass ExpressionErrors {\n  constructor() {\n    this.shorthandAssign = -1;\n    this.doubleProto = -1;\n  }\n\n}\n\nclass Node {\n  constructor(parser, pos, loc) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser && parser.options.ranges) this.range = [pos, 0];\n    if (parser && parser.filename) this.loc.filename = parser.filename;\n  }\n\n  __clone() {\n    const newNode = new Node();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n\n      if (key !== \"leadingComments\" && key !== \"trailingComments\" && key !== \"innerComments\") {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  }\n\n}\n\nclass NodeUtils extends UtilParser {\n  startNode() {\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt(pos, loc) {\n    return new Node(this, pos, loc);\n  }\n\n  startNodeAtNode(type) {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  finishNode(node, type) {\n    return this.finishNodeAt(node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);\n  }\n\n  finishNodeAt(node, type, pos, loc) {\n    node.type = type;\n    node.end = pos;\n    node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node, start, startLoc) {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(node, end = this.state.lastTokEnd, endLoc = this.state.lastTokEndLoc) {\n    node.end = end;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = end;\n  }\n\n  resetStartLocationFromNode(node, locationNode) {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n\n}\n\nconst unwrapParenthesizedExpression = node => {\n  return node.type === \"ParenthesizedExpression\" ? unwrapParenthesizedExpression(node.expression) : node;\n};\n\nclass LValParser extends NodeUtils {\n  toAssignable(node) {\n    var _node$extra, _node$extra3;\n\n    let parenthesized = undefined;\n\n    if (node.type === \"ParenthesizedExpression\" || ((_node$extra = node.extra) == null ? void 0 : _node$extra.parenthesized)) {\n      parenthesized = unwrapParenthesizedExpression(node);\n\n      if (parenthesized.type !== \"Identifier\" && parenthesized.type !== \"MemberExpression\") {\n        this.raise(node.start, Errors.InvalidParenthesizedAssignment);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n\n        for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {\n          var _node$extra2;\n\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast);\n\n          if (isLast && prop.type === \"RestElement\" && ((_node$extra2 = node.extra) == null ? void 0 : _node$extra2.trailingComma)) {\n            this.raiseRestNotLast(node.extra.trailingComma);\n          }\n        }\n\n        break;\n\n      case \"ObjectProperty\":\n        this.toAssignable(node.value);\n        break;\n\n      case \"SpreadElement\":\n        {\n          this.checkToRestConversion(node);\n          node.type = \"RestElement\";\n          const arg = node.argument;\n          this.toAssignable(arg);\n          break;\n        }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingComma);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(node.left.end, Errors.MissingEqInAssignment);\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.toAssignable(parenthesized);\n        break;\n    }\n\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(prop, isLast) {\n    if (prop.type === \"ObjectMethod\") {\n      const error = prop.kind === \"get\" || prop.kind === \"set\" ? Errors.PatternHasAccessor : Errors.PatternHasMethod;\n      this.raise(prop.key.start, error);\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raiseRestNotLast(prop.start);\n    } else {\n      this.toAssignable(prop);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos) {\n    let end = exprList.length;\n\n    if (end) {\n      const last = exprList[end - 1];\n\n      if (last && last.type === \"RestElement\") {\n        --end;\n      } else if (last && last.type === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        const arg = last.argument;\n        this.toAssignable(arg);\n\n        if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\" && arg.type !== \"ObjectPattern\") {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaPos) {\n          this.raiseTrailingCommaAfterRest(trailingCommaPos);\n        }\n\n        --end;\n      }\n    }\n\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n\n      if (elt) {\n        this.toAssignable(elt);\n\n        if (elt.type === \"RestElement\") {\n          this.raiseRestNotLast(elt.start);\n        }\n      }\n    }\n\n    return exprList;\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    return exprList;\n  }\n\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (let _i = 0; _i < exprList.length; _i++) {\n      const expr = exprList[_i];\n\n      if (expr && expr.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  parseSpread(refExpressionErrors, refNeedsArrowPos) {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssign(false, refExpressionErrors, undefined, refNeedsArrowPos);\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  parseRestBinding() {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types.bracketL:\n        {\n          const node = this.startNode();\n          this.next();\n          node.elements = this.parseBindingList(types.bracketR, 93, true);\n          return this.finishNode(node, \"ArrayPattern\");\n        }\n\n      case types.braceL:\n        return this.parseObj(types.braceR, true);\n    }\n\n    return this.parseIdentifier();\n  }\n\n  parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n      }\n\n      if (allowEmpty && this.match(types.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(types.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        this.checkCommaAfterRest(closeCharCode);\n        this.expect(close);\n        break;\n      } else {\n        const decorators = [];\n\n        if (this.match(types.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, Errors.UnsupportedParameterDecorator);\n        }\n\n        while (this.match(types.at)) {\n          decorators.push(this.parseDecorator());\n        }\n\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n\n    return elts;\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseAssignableListItemTypes(param) {\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    startLoc = startLoc || this.state.startLoc;\n    startPos = startPos || this.state.start;\n    left = left || this.parseBindingAtom();\n    if (!this.eat(types.eq)) return left;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssign();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  checkLVal(expr, bindingType = BIND_NONE, checkClashes, contextDescription, disallowLetBinding, strictModeChanged = false) {\n    switch (expr.type) {\n      case \"Identifier\":\n        if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(expr.name, this.inModule) : isStrictBindOnlyReservedWord(expr.name))) {\n          this.raise(expr.start, bindingType === BIND_NONE ? Errors.StrictEvalArguments : Errors.StrictEvalArgumentsBinding, expr.name);\n        }\n\n        if (checkClashes) {\n          const key = `_${expr.name}`;\n\n          if (checkClashes[key]) {\n            this.raise(expr.start, Errors.ParamDupe);\n          } else {\n            checkClashes[key] = true;\n          }\n        }\n\n        if (disallowLetBinding && expr.name === \"let\") {\n          this.raise(expr.start, Errors.LetInLexicalBinding);\n        }\n\n        if (!(bindingType & BIND_NONE)) {\n          this.scope.declareName(expr.name, bindingType, expr.start);\n        }\n\n        break;\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(expr.start, Errors.InvalidPropertyBindingPattern);\n        }\n\n        break;\n\n      case \"ObjectPattern\":\n        for (let _i2 = 0, _expr$properties = expr.properties; _i2 < _expr$properties.length; _i2++) {\n          let prop = _expr$properties[_i2];\n          if (prop.type === \"ObjectProperty\") prop = prop.value;else if (prop.type === \"ObjectMethod\") continue;\n          this.checkLVal(prop, bindingType, checkClashes, \"object destructuring pattern\", disallowLetBinding);\n        }\n\n        break;\n\n      case \"ArrayPattern\":\n        for (let _i3 = 0, _expr$elements = expr.elements; _i3 < _expr$elements.length; _i3++) {\n          const elem = _expr$elements[_i3];\n\n          if (elem) {\n            this.checkLVal(elem, bindingType, checkClashes, \"array destructuring pattern\", disallowLetBinding);\n          }\n        }\n\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(expr.left, bindingType, checkClashes, \"assignment pattern\");\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(expr.argument, bindingType, checkClashes, \"rest element\");\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(expr.expression, bindingType, checkClashes, \"parenthesized expression\");\n        break;\n\n      default:\n        {\n          this.raise(expr.start, bindingType === BIND_NONE ? Errors.InvalidLhs : Errors.InvalidLhsBinding, contextDescription);\n        }\n    }\n  }\n\n  checkToRestConversion(node) {\n    if (node.argument.type !== \"Identifier\" && node.argument.type !== \"MemberExpression\") {\n      this.raise(node.argument.start, Errors.InvalidRestAssignmentPattern);\n    }\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.match(types.comma)) {\n      if (this.lookaheadCharCode() === close) {\n        this.raiseTrailingCommaAfterRest(this.state.start);\n      } else {\n        this.raiseRestNotLast(this.state.start);\n      }\n    }\n  }\n\n  raiseRestNotLast(pos) {\n    throw this.raise(pos, Errors.ElementAfterRest);\n  }\n\n  raiseTrailingCommaAfterRest(pos) {\n    this.raise(pos, Errors.RestTrailingComma);\n  }\n\n}\n\nclass ExpressionParser extends LValParser {\n  checkDuplicatedProto(prop, protoRef, refExpressionErrors) {\n    if (prop.type === \"SpreadElement\" || prop.computed || prop.kind || prop.shorthand) {\n      return;\n    }\n\n    const key = prop.key;\n    const name = key.type === \"Identifier\" ? key.name : String(key.value);\n\n    if (name === \"__proto__\") {\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          if (refExpressionErrors.doubleProto === -1) {\n            refExpressionErrors.doubleProto = key.start;\n          }\n        } else {\n          this.raise(key.start, Errors.DuplicateProto);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  getExpression() {\n    let paramFlags = PARAM;\n\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n    this.nextToken();\n    const expr = this.parseExpression();\n\n    if (!this.match(types.eof)) {\n      this.unexpected();\n    }\n\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    return expr;\n  }\n\n  parseExpression(noIn, refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(noIn, refExpressionErrors);\n\n    if (this.match(types.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n\n      while (this.eat(types.comma)) {\n        node.expressions.push(this.parseMaybeAssign(noIn, refExpressionErrors));\n      }\n\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n\n    return expr;\n  }\n\n  parseMaybeAssign(noIn, refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    if (this.isContextual(\"yield\")) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield(noIn);\n\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n\n        return left;\n      } else {\n        this.state.exprAllowed = false;\n      }\n    }\n\n    let ownExpressionErrors;\n\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n\n    if (this.match(types.parenL) || this.match(types.name)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(noIn, refExpressionErrors, refNeedsArrowPos);\n\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n\n    if (this.state.type.isAssign) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (operator === \"??=\") {\n        this.expectPlugin(\"logicalAssignment\");\n      }\n\n      if (operator === \"||=\" || operator === \"&&=\") {\n        this.expectPlugin(\"logicalAssignment\");\n      }\n\n      if (this.match(types.eq)) {\n        node.left = this.toAssignable(left);\n        refExpressionErrors.doubleProto = -1;\n      } else {\n        node.left = left;\n      }\n\n      if (refExpressionErrors.shorthandAssign >= node.left.start) {\n        refExpressionErrors.shorthandAssign = -1;\n      }\n\n      this.checkLVal(left, undefined, undefined, \"assignment expression\");\n      this.next();\n      node.right = this.parseMaybeAssign(noIn);\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  parseMaybeConditional(noIn, refExpressionErrors, refNeedsArrowPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(noIn, refExpressionErrors);\n\n    if (expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt) {\n      return expr;\n    }\n\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    return this.parseConditional(expr, noIn, startPos, startLoc, refNeedsArrowPos);\n  }\n\n  parseConditional(expr, noIn, startPos, startLoc, refNeedsArrowPos) {\n    if (this.eat(types.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssign();\n      this.expect(types.colon);\n      node.alternate = this.parseMaybeAssign(noIn);\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprOps(noIn, refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnary(refExpressionErrors);\n\n    if (expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt) {\n      return expr;\n    }\n\n    if (this.checkExpressionErrors(refExpressionErrors, false)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1, noIn);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec, noIn) {\n    let prec = this.state.type.binop;\n\n    if (prec != null && (!noIn || !this.match(types._in))) {\n      if (prec > minPrec) {\n        const operator = this.state.value;\n\n        if (operator === \"|>\" && this.state.inFSharpPipelineDirectBody) {\n          return left;\n        }\n\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = operator;\n\n        if (operator === \"**\" && left.type === \"UnaryExpression\" && (this.options.createParenthesizedExpressions || !(left.extra && left.extra.parenthesized))) {\n          this.raise(left.argument.start, Errors.UnexpectedTokenUnaryExponentiation);\n        }\n\n        const op = this.state.type;\n        const logical = op === types.logicalOR || op === types.logicalAND;\n        const coalesce = op === types.nullishCoalescing;\n\n        if (op === types.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          this.state.inPipeline = true;\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\n        } else if (coalesce) {\n          prec = types.logicalAND.binop;\n        }\n\n        this.next();\n\n        if (op === types.pipeline && this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\") {\n          if (this.match(types.name) && this.state.value === \"await\" && this.prodParam.hasAwait) {\n            throw this.raise(this.state.start, Errors.UnexpectedAwaitAfterPipelineBody);\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec, noIn);\n        this.finishNode(node, logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\");\n        const nextOp = this.state.type;\n\n        if (coalesce && (nextOp === types.logicalOR || nextOp === types.logicalAND) || logical && nextOp === types.nullishCoalescing) {\n          throw this.raise(this.state.start, Errors.MixingCoalesceWithLogical);\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);\n      }\n    }\n\n    return left;\n  }\n\n  parseExprOpRightExpr(op, prec, noIn) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    switch (op) {\n      case types.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"smart\":\n            return this.withTopicPermittingContext(() => {\n              return this.parseSmartPipelineBody(this.parseExprOpBaseRightExpr(op, prec, noIn), startPos, startLoc);\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec, noIn);\n            });\n        }\n\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec, noIn);\n    }\n  }\n\n  parseExprOpBaseRightExpr(op, prec, noIn) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, op.rightAssociative ? prec - 1 : prec, noIn);\n  }\n\n  parseMaybeUnary(refExpressionErrors) {\n    if (this.isContextual(\"await\") && this.isAwaitAllowed()) {\n      return this.parseAwait();\n    } else if (this.state.type.prefix) {\n      const node = this.startNode();\n      const update = this.match(types.incDec);\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (node.operator === \"throw\") {\n        this.expectPlugin(\"throwExpressions\");\n      }\n\n      this.next();\n      node.argument = this.parseMaybeUnary();\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (update) {\n        this.checkLVal(node.argument, undefined, undefined, \"prefix operation\");\n      } else if (this.state.strict && node.operator === \"delete\") {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(node.start, Errors.StrictDelete);\n        } else if (arg.type === \"MemberExpression\" && arg.property.type === \"PrivateName\") {\n          this.raise(node.start, Errors.DeletePrivateField);\n        }\n      }\n\n      return this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n\n    while (this.state.type.postfix && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, undefined, undefined, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprSubscripts(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false\n    };\n\n    do {\n      const oldMaybeInAsyncArrowHead = this.state.maybeInAsyncArrowHead;\n\n      if (state.maybeAsyncArrow) {\n        this.state.maybeInAsyncArrowHead = true;\n      }\n\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n      state.maybeAsyncArrow = false;\n      this.state.maybeInAsyncArrowHead = oldMaybeInAsyncArrowHead;\n    } while (!state.stop);\n\n    return base;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!noCalls && this.eat(types.doubleColon)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.callee = this.parseNoCallExpr();\n      state.stop = true;\n      return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startPos, startLoc, noCalls);\n    }\n\n    let optional = false;\n\n    if (this.match(types.questionDot)) {\n      state.optionalChainMember = optional = true;\n\n      if (noCalls && this.lookaheadCharCode() === 40) {\n        state.stop = true;\n        return base;\n      }\n\n      this.next();\n    }\n\n    const computed = this.eat(types.bracketL);\n\n    if (optional && !this.match(types.parenL) && !this.match(types.backQuote) || computed || this.eat(types.dot)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.property = computed ? this.parseExpression() : optional ? this.parseIdentifier(true) : this.parseMaybePrivateName(true);\n      node.computed = computed;\n\n      if (node.property.type === \"PrivateName\") {\n        if (node.object.type === \"Super\") {\n          this.raise(startPos, Errors.SuperPrivateField);\n        }\n\n        this.classScope.usePrivateName(node.property.id.name, node.property.start);\n      }\n\n      if (computed) {\n        this.expect(types.bracketR);\n      }\n\n      if (state.optionalChainMember) {\n        node.optional = optional;\n        return this.finishNode(node, \"OptionalMemberExpression\");\n      } else {\n        return this.finishNode(node, \"MemberExpression\");\n      }\n    } else if (!noCalls && this.match(types.parenL)) {\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      const oldYieldPos = this.state.yieldPos;\n      const oldAwaitPos = this.state.awaitPos;\n      this.state.maybeInArrowParameters = true;\n      this.state.yieldPos = -1;\n      this.state.awaitPos = -1;\n      this.next();\n      let node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n\n      if (optional) {\n        node.optional = true;\n        node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n      } else {\n        node.arguments = this.parseCallExpressionArguments(types.parenR, state.maybeAsyncArrow, base.type === \"Import\", base.type !== \"Super\", node);\n      }\n\n      this.finishCallExpression(node, state.optionalChainMember);\n\n      if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n        state.stop = true;\n        node = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);\n        this.checkYieldAwaitInDefaultParams();\n        this.state.yieldPos = oldYieldPos;\n        this.state.awaitPos = oldAwaitPos;\n      } else {\n        this.toReferencedListDeep(node.arguments);\n        if (oldYieldPos !== -1) this.state.yieldPos = oldYieldPos;\n\n        if (!this.isAwaitAllowed() && !oldMaybeInArrowParameters || oldAwaitPos !== -1) {\n          this.state.awaitPos = oldAwaitPos;\n        }\n      }\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n      return node;\n    } else if (this.match(types.backQuote)) {\n      return this.parseTaggedTemplateExpression(startPos, startLoc, base, state);\n    } else {\n      state.stop = true;\n      return base;\n    }\n  }\n\n  parseTaggedTemplateExpression(startPos, startLoc, base, state, typeArguments) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (typeArguments) node.typeParameters = typeArguments;\n\n    if (state.optionalChainMember) {\n      this.raise(startPos, Errors.OptionalChainingNoTemplate);\n    }\n\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base) {\n    return base.type === \"Identifier\" && base.name === \"async\" && this.state.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;\n  }\n\n  finishCallExpression(node, optional) {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length !== 1) {\n        this.raise(node.start, Errors.ImportCallArity);\n      } else {\n        const importArg = node.arguments[0];\n\n        if (importArg && importArg.type === \"SpreadElement\") {\n          this.raise(importArg.start, Errors.ImportCallSpreadArgument);\n        }\n      }\n    }\n\n    return this.finishNode(node, optional ? \"OptionalCallExpression\" : \"CallExpression\");\n  }\n\n  parseCallExpressionArguments(close, possibleAsyncArrow, dynamicImport, allowPlaceholder, nodeForExtra) {\n    const elts = [];\n    let innerParenStart;\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n\n        if (this.match(close)) {\n          if (dynamicImport) {\n            this.raise(this.state.lastTokStart, Errors.ImportCallArgumentTrailingComma);\n          }\n\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      if (this.match(types.parenL) && !innerParenStart) {\n        innerParenStart = this.state.start;\n      }\n\n      elts.push(this.parseExprListItem(false, possibleAsyncArrow ? new ExpressionErrors() : undefined, possibleAsyncArrow ? {\n        start: 0\n      } : undefined, allowPlaceholder));\n    }\n\n    if (possibleAsyncArrow && innerParenStart && this.shouldParseAsyncArrow()) {\n      this.unexpected();\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return elts;\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    var _call$extra;\n\n    this.expect(types.arrow);\n    this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingComma);\n    return node;\n  }\n\n  parseNoCallExpr() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    if (this.state.type === types.slash) this.readRegexp();\n    const canBeArrow = this.state.potentialArrowAt === this.state.start;\n    let node;\n\n    switch (this.state.type) {\n      case types._super:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(types.parenL) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {\n          this.raise(node.start, Errors.SuperNotAllowed);\n        } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\n          this.raise(node.start, Errors.UnexpectedSuper);\n        }\n\n        if (!this.match(types.parenL) && !this.match(types.bracketL) && !this.match(types.dot)) {\n          this.raise(node.start, Errors.UnsupportedSuper);\n        }\n\n        return this.finishNode(node, \"Super\");\n\n      case types._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(types.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(types.parenL)) {\n          this.raise(this.state.lastTokStart, Errors.UnsupportedImport);\n        }\n\n        return this.finishNode(node, \"Import\");\n\n      case types._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case types.name:\n        {\n          node = this.startNode();\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (!containsEsc && id.name === \"async\" && this.match(types._function) && !this.canInsertSemicolon()) {\n            const last = this.state.context.length - 1;\n\n            if (this.state.context[last] !== types$1.functionStatement) {\n              throw new Error(\"Internal error\");\n            }\n\n            this.state.context[last] = types$1.functionExpression;\n            this.next();\n            return this.parseFunction(node, undefined, true);\n          } else if (canBeArrow && !containsEsc && id.name === \"async\" && this.match(types.name) && !this.canInsertSemicolon()) {\n            const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n            const oldMaybeInAsyncArrowHead = this.state.maybeInAsyncArrowHead;\n            const oldYieldPos = this.state.yieldPos;\n            const oldAwaitPos = this.state.awaitPos;\n            this.state.maybeInArrowParameters = true;\n            this.state.maybeInAsyncArrowHead = true;\n            this.state.yieldPos = -1;\n            this.state.awaitPos = -1;\n            const params = [this.parseIdentifier()];\n            this.expect(types.arrow);\n            this.checkYieldAwaitInDefaultParams();\n            this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n            this.state.maybeInAsyncArrowHead = oldMaybeInAsyncArrowHead;\n            this.state.yieldPos = oldYieldPos;\n            this.state.awaitPos = oldAwaitPos;\n            this.parseArrowExpression(node, params, true);\n            return node;\n          }\n\n          if (canBeArrow && this.match(types.arrow) && !this.canInsertSemicolon()) {\n            this.next();\n            this.parseArrowExpression(node, [id], false);\n            return node;\n          }\n\n          return id;\n        }\n\n      case types._do:\n        {\n          this.expectPlugin(\"doExpressions\");\n          const node = this.startNode();\n          this.next();\n          const oldLabels = this.state.labels;\n          this.state.labels = [];\n          node.body = this.parseBlock();\n          this.state.labels = oldLabels;\n          return this.finishNode(node, \"DoExpression\");\n        }\n\n      case types.regexp:\n        {\n          const value = this.state.value;\n          node = this.parseLiteral(value.value, \"RegExpLiteral\");\n          node.pattern = value.pattern;\n          node.flags = value.flags;\n          return node;\n        }\n\n      case types.num:\n        return this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n      case types.bigint:\n        return this.parseLiteral(this.state.value, \"BigIntLiteral\");\n\n      case types.string:\n        return this.parseLiteral(this.state.value, \"StringLiteral\");\n\n      case types._null:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"NullLiteral\");\n\n      case types._true:\n      case types._false:\n        return this.parseBooleanLiteral();\n\n      case types.parenL:\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n\n      case types.bracketBarL:\n      case types.bracketHashL:\n        {\n          this.expectPlugin(\"recordAndTuple\");\n          const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n          const close = this.state.type === types.bracketBarL ? types.bracketBarR : types.bracketR;\n          this.state.inFSharpPipelineDirectBody = false;\n          node = this.startNode();\n          this.next();\n          node.elements = this.parseExprList(close, true, refExpressionErrors, node);\n          this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n          return this.finishNode(node, \"TupleExpression\");\n        }\n\n      case types.bracketL:\n        {\n          const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n          this.state.inFSharpPipelineDirectBody = false;\n          node = this.startNode();\n          this.next();\n          node.elements = this.parseExprList(types.bracketR, true, refExpressionErrors, node);\n\n          if (!this.state.maybeInArrowParameters) {\n            this.toReferencedList(node.elements);\n          }\n\n          this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n          return this.finishNode(node, \"ArrayExpression\");\n        }\n\n      case types.braceBarL:\n      case types.braceHashL:\n        {\n          this.expectPlugin(\"recordAndTuple\");\n          const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n          const close = this.state.type === types.braceBarL ? types.braceBarR : types.braceR;\n          this.state.inFSharpPipelineDirectBody = false;\n          const ret = this.parseObj(close, false, true, refExpressionErrors);\n          this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n          return ret;\n        }\n\n      case types.braceL:\n        {\n          const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n          this.state.inFSharpPipelineDirectBody = false;\n          const ret = this.parseObj(types.braceR, false, false, refExpressionErrors);\n          this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n          return ret;\n        }\n\n      case types._function:\n        return this.parseFunctionExpression();\n\n      case types.at:\n        this.parseDecorators();\n\n      case types._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case types._new:\n        return this.parseNew();\n\n      case types.backQuote:\n        return this.parseTemplate(false);\n\n      case types.doubleColon:\n        {\n          node = this.startNode();\n          this.next();\n          node.object = null;\n          const callee = node.callee = this.parseNoCallExpr();\n\n          if (callee.type === \"MemberExpression\") {\n            return this.finishNode(node, \"BindExpression\");\n          } else {\n            throw this.raise(callee.start, Errors.UnsupportedBind);\n          }\n        }\n\n      case types.hash:\n        {\n          if (this.state.inPipeline) {\n            node = this.startNode();\n\n            if (this.getPluginOption(\"pipelineOperator\", \"proposal\") !== \"smart\") {\n              this.raise(node.start, Errors.PrimaryTopicRequiresSmartPipeline);\n            }\n\n            this.next();\n\n            if (!this.primaryTopicReferenceIsAllowedInCurrentTopicContext()) {\n              this.raise(node.start, Errors.PrimaryTopicNotAllowed);\n            }\n\n            this.registerTopicReference();\n            return this.finishNode(node, \"PipelinePrimaryTopicReference\");\n          }\n        }\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseBooleanLiteral() {\n    const node = this.startNode();\n    node.value = this.match(types._true);\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseMaybePrivateName(isPrivateNameAllowed) {\n    const isPrivate = this.match(types.hash);\n\n    if (isPrivate) {\n      this.expectOnePlugin([\"classPrivateProperties\", \"classPrivateMethods\"]);\n\n      if (!isPrivateNameAllowed) {\n        this.raise(this.state.pos, Errors.UnexpectedPrivateField);\n      }\n\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space between # and identifier\");\n      node.id = this.parseIdentifier(true);\n      return this.finishNode(node, \"PrivateName\");\n    } else {\n      return this.parseIdentifier(true);\n    }\n  }\n\n  parseFunctionExpression() {\n    const node = this.startNode();\n    let meta = this.startNode();\n    this.next();\n    meta = this.createIdentifier(meta, \"function\");\n\n    if (this.prodParam.hasYield && this.eat(types.dot)) {\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(node, meta, propertyName) {\n    node.meta = meta;\n\n    if (meta.name === \"function\" && propertyName === \"sent\") {\n      if (this.isContextual(propertyName)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        this.unexpected();\n      }\n    }\n\n    const containsEsc = this.state.containsEsc;\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(node.property.start, Errors.UnsupportedMetaProperty, meta.name, propertyName);\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  parseImportMetaProperty(node) {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.expect(types.dot);\n\n    if (this.isContextual(\"meta\")) {\n      this.expectPlugin(\"importMeta\");\n\n      if (!this.inModule) {\n        this.raiseWithData(id.start, {\n          code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n        }, Errors.ImportMetaOutsideModule);\n      }\n\n      this.sawUnambiguousESM = true;\n    } else if (!this.hasPlugin(\"importMeta\")) {\n      this.raise(id.start, Errors.ImportCallArityLtOne);\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteral(value, type, startPos, startLoc) {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n    const node = this.startNodeAt(startPos, startLoc);\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(startPos, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let val;\n    this.expect(types.parenL);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.state.inFSharpPipelineDirectBody = false;\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    const refNeedsArrowPos = {\n      start: 0\n    };\n    let first = true;\n    let spreadStart;\n    let optionalCommaStart;\n\n    while (!this.match(types.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma, refNeedsArrowPos.start || null);\n\n        if (this.match(types.parenR)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(types.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));\n        this.checkCommaAfterRest(41);\n        break;\n      } else {\n        exprList.push(this.parseMaybeAssign(false, refExpressionErrors, this.parseParenItem, refNeedsArrowPos));\n      }\n    }\n\n    const innerEndPos = this.state.start;\n    const innerEndLoc = this.state.startLoc;\n    this.expect(types.parenR);\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n\n    if (canBeArrow && this.shouldParseArrow() && (arrowNode = this.parseArrow(arrowNode))) {\n      if (!this.isAwaitAllowed() && !this.state.maybeInAsyncArrowHead) {\n        this.state.awaitPos = oldAwaitPos;\n      }\n\n      this.checkYieldAwaitInDefaultParams();\n      this.state.yieldPos = oldYieldPos;\n      this.state.awaitPos = oldAwaitPos;\n\n      for (let _i = 0; _i < exprList.length; _i++) {\n        const param = exprList[_i];\n\n        if (param.extra && param.extra.parenthesized) {\n          this.unexpected(param.extra.parenStart);\n        }\n      }\n\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n\n    if (oldYieldPos !== -1) this.state.yieldPos = oldYieldPos;\n    if (oldAwaitPos !== -1) this.state.awaitPos = oldAwaitPos;\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refExpressionErrors, true);\n    if (refNeedsArrowPos.start) this.unexpected(refNeedsArrowPos.start);\n    this.toReferencedListDeep(exprList, true);\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  shouldParseArrow() {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node) {\n    if (this.eat(types.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    return node;\n  }\n\n  parseNew() {\n    const node = this.startNode();\n    let meta = this.startNode();\n    this.next();\n    meta = this.createIdentifier(meta, \"new\");\n\n    if (this.eat(types.dot)) {\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        let error = Errors.UnexpectedNewTarget;\n\n        if (this.hasPlugin(\"classProperties\")) {\n          error += \" or class properties\";\n        }\n\n        this.raise(metaProp.start, error);\n      }\n\n      return metaProp;\n    }\n\n    node.callee = this.parseNoCallExpr();\n\n    if (node.callee.type === \"Import\") {\n      this.raise(node.callee.start, Errors.ImportCallNotNewExpression);\n    } else if (node.callee.type === \"OptionalMemberExpression\" || node.callee.type === \"OptionalCallExpression\") {\n      this.raise(this.state.lastTokEnd, Errors.OptionalChainingNoNew);\n    } else if (this.eat(types.questionDot)) {\n      this.raise(this.state.start, Errors.OptionalChainingNoNew);\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node) {\n    if (this.eat(types.parenL)) {\n      const args = this.parseExprList(types.parenR);\n      this.toReferencedList(args);\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  parseTemplateElement(isTagged) {\n    const elem = this.startNode();\n\n    if (this.state.value === null) {\n      if (!isTagged) {\n        this.raise(this.state.start + 1, Errors.InvalidEscapeSequenceTemplate);\n      }\n    }\n\n    elem.value = {\n      raw: this.input.slice(this.state.start, this.state.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.state.value\n    };\n    this.next();\n    elem.tail = this.match(types.backQuote);\n    return this.finishNode(elem, \"TemplateElement\");\n  }\n\n  parseTemplate(isTagged) {\n    const node = this.startNode();\n    this.next();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n\n    while (!curElt.tail) {\n      this.expect(types.dollarBraceL);\n      node.expressions.push(this.parseExpression());\n      this.expect(types.braceR);\n      node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n    }\n\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  parseObj(close, isPattern, isRecord, refExpressionErrors) {\n    const propHash = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n    node.properties = [];\n    this.next();\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n\n        if (this.match(close)) {\n          this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n          this.next();\n          break;\n        }\n      }\n\n      const prop = this.parseObjectMember(isPattern, refExpressionErrors);\n\n      if (!isPattern) {\n        this.checkDuplicatedProto(prop, propHash, refExpressionErrors);\n      }\n\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    let type = \"ObjectExpression\";\n\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n\n    return this.finishNode(node, type);\n  }\n\n  isAsyncProp(prop) {\n    return !prop.computed && prop.key.type === \"Identifier\" && prop.key.name === \"async\" && (this.match(types.name) || this.match(types.num) || this.match(types.string) || this.match(types.bracketL) || this.state.type.keyword || this.match(types.star)) && !this.hasPrecedingLineBreak();\n  }\n\n  parseObjectMember(isPattern, refExpressionErrors) {\n    let decorators = [];\n\n    if (this.match(types.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(this.state.start, Errors.UnsupportedPropertyDecorator);\n      }\n\n      while (this.match(types.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isGenerator = false;\n    let isAsync = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(types.ellipsis)) {\n      if (decorators.length) this.unexpected();\n\n      if (isPattern) {\n        this.next();\n        prop.argument = this.parseIdentifier();\n        this.checkCommaAfterRest(125);\n        return this.finishNode(prop, \"RestElement\");\n      }\n\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (isPattern || refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    if (!isPattern) {\n      isGenerator = this.eat(types.star);\n    }\n\n    const containsEsc = this.state.containsEsc;\n    this.parsePropertyName(prop, false);\n\n    if (!isPattern && !containsEsc && !isGenerator && this.isAsyncProp(prop)) {\n      isAsync = true;\n      isGenerator = this.eat(types.star);\n      this.parsePropertyName(prop, false);\n    } else {\n      isAsync = false;\n    }\n\n    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refExpressionErrors, containsEsc);\n    return prop;\n  }\n\n  isGetterOrSetterMethod(prop, isPattern) {\n    return !isPattern && !prop.computed && prop.key.type === \"Identifier\" && (prop.key.name === \"get\" || prop.key.name === \"set\") && (this.match(types.string) || this.match(types.num) || this.match(types.bracketL) || this.match(types.name) || !!this.state.type.keyword);\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  checkGetterSetterParams(method) {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const start = method.start;\n\n    if (method.params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, Errors.BadGetterArity);\n      } else {\n        this.raise(start, Errors.BadSetterArity);\n      }\n    }\n\n    if (method.kind === \"set\" && method.params[method.params.length - 1].type === \"RestElement\") {\n      this.raise(start, Errors.BadSetterRestParameter);\n    }\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, containsEsc) {\n    if (isAsync || isGenerator || this.match(types.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(prop, isGenerator, isAsync, false, false, \"ObjectMethod\");\n    }\n\n    if (!containsEsc && this.isGetterOrSetterMethod(prop, isPattern)) {\n      if (isGenerator || isAsync) this.unexpected();\n      prop.kind = prop.key.name;\n      this.parsePropertyName(prop, false);\n      this.parseMethod(prop, false, false, false, false, \"ObjectMethod\");\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    prop.shorthand = false;\n\n    if (this.eat(types.colon)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssign(false, refExpressionErrors);\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.start, true, true);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n      } else if (this.match(types.eq) && refExpressionErrors) {\n        if (refExpressionErrors.shorthandAssign === -1) {\n          refExpressionErrors.shorthandAssign = this.state.start;\n        }\n\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n      } else {\n        prop.value = prop.key.__clone();\n      }\n\n      prop.shorthand = true;\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refExpressionErrors, containsEsc) {\n    const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, containsEsc) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n    if (!node) this.unexpected();\n    return node;\n  }\n\n  parsePropertyName(prop, isPrivateNameAllowed) {\n    if (this.eat(types.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssign();\n      this.expect(types.bracketR);\n    } else {\n      const oldInPropertyName = this.state.inPropertyName;\n      this.state.inPropertyName = true;\n      prop.key = this.match(types.num) || this.match(types.string) || this.match(types.bigint) ? this.parseExprAtom() : this.parseMaybePrivateName(isPrivateNameAllowed);\n\n      if (prop.key.type !== \"PrivateName\") {\n        prop.computed = false;\n      }\n\n      this.state.inPropertyName = oldInPropertyName;\n    }\n\n    return prop.key;\n  }\n\n  initFunction(node, isAsync) {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor;\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n    return node;\n  }\n\n  parseArrowExpression(node, params, isAsync, trailingCommaPos) {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    this.prodParam.enter(functionFlags(isAsync, false));\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaPos);\n    }\n\n    this.state.maybeInArrowParameters = false;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.parseFunctionBody(node, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(node, params, trailingCommaPos) {\n    node.params = this.toAssignableList(params, trailingCommaPos);\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    const isExpression = allowExpression && !this.match(types.braceL);\n    const oldInParameters = this.state.inParameters;\n    this.state.inParameters = false;\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(true, false, hasStrictModeDirective => {\n        const nonSimple = !this.isSimpleParamList(node.params);\n\n        if (hasStrictModeDirective && nonSimple) {\n          const errorPos = (node.kind === \"method\" || node.kind === \"constructor\") && !!node.key ? node.key.end : node.start;\n          this.raise(errorPos, Errors.IllegalLanguageModeDirective);\n        }\n\n        const strictModeChanged = !oldStrict && this.state.strict;\n        this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);\n\n        if (this.state.strict && node.id) {\n          this.checkLVal(node.id, BIND_OUTSIDE, undefined, \"function name\", undefined, strictModeChanged);\n        }\n      });\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n\n    this.state.inParameters = oldInParameters;\n  }\n\n  isSimpleParamList(params) {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n\n    return true;\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {\n    const nameHash = Object.create(null);\n\n    for (let i = 0; i < node.params.length; i++) {\n      this.checkLVal(node.params[i], BIND_VAR, allowDuplicates ? null : nameHash, \"function parameter list\", undefined, strictModeChanged);\n    }\n  }\n\n  parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n\n    return elts;\n  }\n\n  parseExprListItem(allowEmpty, refExpressionErrors, refNeedsArrowPos, allowPlaceholder) {\n    let elt;\n\n    if (allowEmpty && this.match(types.comma)) {\n      elt = null;\n    } else if (this.match(types.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(this.parseSpread(refExpressionErrors, refNeedsArrowPos), spreadNodeStartPos, spreadNodeStartLoc);\n    } else if (this.match(types.question)) {\n      this.expectPlugin(\"partialApplication\");\n\n      if (!allowPlaceholder) {\n        this.raise(this.state.start, Errors.UnexpectedArgumentPlaceholder);\n      }\n\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssign(false, refExpressionErrors, this.parseParenItem, refNeedsArrowPos);\n    }\n\n    return elt;\n  }\n\n  parseIdentifier(liberal) {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node, name) {\n    node.name = name;\n    node.loc.identifierName = name;\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos, liberal) {\n    let name;\n\n    if (this.match(types.name)) {\n      name = this.state.value;\n    } else if (this.state.type.keyword) {\n      name = this.state.type.keyword;\n      const context = this.state.context;\n\n      if ((name === \"class\" || name === \"function\") && context[context.length - 1].token === \"function\") {\n        context.pop();\n      }\n    } else {\n      throw this.unexpected();\n    }\n\n    if (liberal) {\n      this.state.type = types.name;\n    } else {\n      this.checkReservedWord(name, this.state.start, !!this.state.type.keyword, false);\n    }\n\n    this.next();\n    return name;\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (this.prodParam.hasYield && word === \"yield\") {\n      this.raise(startLoc, Errors.YieldBindingIdentifier);\n      return;\n    }\n\n    if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(startLoc, Errors.AwaitBindingIdentifier);\n        return;\n      }\n\n      if (this.state.awaitPos === -1 && (this.state.maybeInAsyncArrowHead || this.isAwaitAllowed())) {\n        this.state.awaitPos = this.state.start;\n      }\n    }\n\n    if (this.scope.inClass && !this.scope.inNonArrowFunction && word === \"arguments\") {\n      this.raise(startLoc, Errors.ArgumentsDisallowedInInitializer);\n      return;\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(startLoc, Errors.UnexpectedKeyword, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      if (!this.prodParam.hasAwait && word === \"await\") {\n        this.raise(startLoc, Errors.AwaitNotInAsyncFunction);\n      } else {\n        this.raise(startLoc, Errors.UnexpectedReservedWord, word);\n      }\n    }\n  }\n\n  isAwaitAllowed() {\n    if (this.scope.inFunction) return this.prodParam.hasAwait;\n    if (this.options.allowAwaitOutsideFunction) return true;\n\n    if (this.hasPlugin(\"topLevelAwait\")) {\n      return this.inModule && this.prodParam.hasAwait;\n    }\n\n    return false;\n  }\n\n  parseAwait() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.state.inParameters) {\n      this.raise(node.start, Errors.AwaitExpressionFormalParameter);\n    } else if (this.state.awaitPos === -1) {\n      this.state.awaitPos = node.start;\n    }\n\n    if (this.eat(types.star)) {\n      this.raise(node.start, Errors.ObsoleteAwaitStar);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.hasPrecedingLineBreak() || this.match(types.plusMin) || this.match(types.parenL) || this.match(types.bracketL) || this.match(types.backQuote) || this.match(types.regexp) || this.match(types.slash) || this.hasPlugin(\"v8intrinsic\") && this.match(types.modulo)) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary();\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  parseYield(noIn) {\n    const node = this.startNode();\n\n    if (this.state.inParameters) {\n      this.raise(node.start, Errors.YieldInParameter);\n    } else if (this.state.yieldPos === -1) {\n      this.state.yieldPos = node.start;\n    }\n\n    this.next();\n\n    if (this.match(types.semi) || !this.match(types.star) && !this.state.type.startsExpr || this.hasPrecedingLineBreak()) {\n      node.delegate = false;\n      node.argument = null;\n    } else {\n      node.delegate = this.eat(types.star);\n      node.argument = this.parseMaybeAssign(noIn);\n    }\n\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  checkPipelineAtInfixOperator(left, leftStartPos) {\n    if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n      if (left.type === \"SequenceExpression\") {\n        this.raise(leftStartPos, Errors.PipelineHeadSequenceExpression);\n      }\n    }\n  }\n\n  parseSmartPipelineBody(childExpression, startPos, startLoc) {\n    const pipelineStyle = this.checkSmartPipelineBodyStyle(childExpression);\n    this.checkSmartPipelineBodyEarlyErrors(childExpression, pipelineStyle, startPos);\n    return this.parseSmartPipelineBodyInStyle(childExpression, pipelineStyle, startPos, startLoc);\n  }\n\n  checkSmartPipelineBodyEarlyErrors(childExpression, pipelineStyle, startPos) {\n    if (this.match(types.arrow)) {\n      throw this.raise(this.state.start, Errors.PipelineBodyNoArrow);\n    } else if (pipelineStyle === \"PipelineTopicExpression\" && childExpression.type === \"SequenceExpression\") {\n      this.raise(startPos, Errors.PipelineBodySequenceExpression);\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpression, pipelineStyle, startPos, startLoc) {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n\n    switch (pipelineStyle) {\n      case \"PipelineBareFunction\":\n        bodyNode.callee = childExpression;\n        break;\n\n      case \"PipelineBareConstructor\":\n        bodyNode.callee = childExpression.callee;\n        break;\n\n      case \"PipelineBareAwaitedFunction\":\n        bodyNode.callee = childExpression.argument;\n        break;\n\n      case \"PipelineTopicExpression\":\n        if (!this.topicReferenceWasUsedInCurrentTopicContext()) {\n          this.raise(startPos, Errors.PipelineTopicUnused);\n        }\n\n        bodyNode.expression = childExpression;\n        break;\n\n      default:\n        throw new Error(`Internal @babel/parser error: Unknown pipeline style (${pipelineStyle})`);\n    }\n\n    return this.finishNode(bodyNode, pipelineStyle);\n  }\n\n  checkSmartPipelineBodyStyle(expression) {\n    switch (expression.type) {\n      default:\n        return this.isSimpleReference(expression) ? \"PipelineBareFunction\" : \"PipelineTopicExpression\";\n    }\n  }\n\n  isSimpleReference(expression) {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return !expression.computed && this.isSimpleReference(expression.object);\n\n      case \"Identifier\":\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  withTopicPermittingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 1,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withTopicForbiddingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withSoloAwaitPermittingContext(callback) {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  registerTopicReference() {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  primaryTopicReferenceIsAllowedInCurrentTopicContext() {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentTopicContext() {\n    return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n  }\n\n  parseFSharpPipelineBody(prec, noIn) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n    const ret = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, prec, noIn);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return ret;\n  }\n\n}\n\nconst loopLabel = {\n  kind: \"loop\"\n},\n      switchLabel = {\n  kind: \"switch\"\n};\nconst FUNC_NO_FLAGS = 0b000,\n      FUNC_STATEMENT = 0b001,\n      FUNC_HANGING_STATEMENT = 0b010,\n      FUNC_NULLABLE_ID = 0b100;\n\nclass StatementParser extends ExpressionParser {\n  parseTopLevel(file, program) {\n    program.sourceType = this.options.sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, types.eof);\n\n    if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\n      for (let _i = 0, _Array$from = Array.from(this.scope.undefinedExports); _i < _Array$from.length; _i++) {\n        const [name] = _Array$from[_i];\n        const pos = this.scope.undefinedExports.get(name);\n        this.raise(pos, Errors.ModuleExportUndefined, name);\n      }\n    }\n\n    file.program = this.finishNode(program, \"Program\");\n    file.comments = this.state.comments;\n    if (this.options.tokens) file.tokens = this.tokens;\n    return this.finishNode(file, \"File\");\n  }\n\n  stmtToDirective(stmt) {\n    const expr = stmt.expression;\n    const directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);\n    const directive = this.startNodeAt(stmt.start, stmt.loc.start);\n    const raw = this.input.slice(expr.start, expr.end);\n    const val = directiveLiteral.value = raw.slice(1, -1);\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    directive.value = this.finishNodeAt(directiveLiteral, \"DirectiveLiteral\", expr.end, expr.loc.end);\n    return this.finishNodeAt(directive, \"Directive\", stmt.end, stmt.loc.end);\n  }\n\n  parseInterpreterDirective() {\n    if (!this.match(types.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context) {\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const nextCh = this.input.charCodeAt(next);\n    if (nextCh === 91) return true;\n    if (context) return false;\n    if (nextCh === 123) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      let pos = next + 1;\n\n      while (isIdentifierChar(this.input.charCodeAt(pos))) {\n        ++pos;\n      }\n\n      const ident = this.input.slice(next, pos);\n      if (!keywordRelationalOperator.test(ident)) return true;\n    }\n\n    return false;\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.match(types.at)) {\n      this.parseDecorators(true);\n    }\n\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context, topLevel) {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = types._var;\n      kind = \"let\";\n    }\n\n    switch (starttype) {\n      case types._break:\n      case types._continue:\n        return this.parseBreakContinueStatement(node, starttype.keyword);\n\n      case types._debugger:\n        return this.parseDebuggerStatement(node);\n\n      case types._do:\n        return this.parseDoStatement(node);\n\n      case types._for:\n        return this.parseForStatement(node);\n\n      case types._function:\n        if (this.lookaheadCharCode() === 46) break;\n\n        if (context) {\n          if (this.state.strict) {\n            this.raise(this.state.start, Errors.StrictFunction);\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(this.state.start, Errors.SloppyFunction);\n          }\n        }\n\n        return this.parseFunctionStatement(node, false, !context);\n\n      case types._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case types._if:\n        return this.parseIfStatement(node);\n\n      case types._return:\n        return this.parseReturnStatement(node);\n\n      case types._switch:\n        return this.parseSwitchStatement(node);\n\n      case types._throw:\n        return this.parseThrowStatement(node);\n\n      case types._try:\n        return this.parseTryStatement(node);\n\n      case types._const:\n      case types._var:\n        kind = kind || this.state.value;\n\n        if (context && kind !== \"var\") {\n          this.raise(this.state.start, Errors.UnexpectedLexicalDeclaration);\n        }\n\n        return this.parseVarStatement(node, kind);\n\n      case types._while:\n        return this.parseWhileStatement(node);\n\n      case types._with:\n        return this.parseWithStatement(node);\n\n      case types.braceL:\n        return this.parseBlock();\n\n      case types.semi:\n        return this.parseEmptyStatement(node);\n\n      case types._export:\n      case types._import:\n        {\n          const nextTokenCharCode = this.lookaheadCharCode();\n\n          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n            break;\n          }\n\n          if (!this.options.allowImportExportEverywhere && !topLevel) {\n            this.raise(this.state.start, Errors.UnexpectedImportExport);\n          }\n\n          this.next();\n          let result;\n\n          if (starttype === types._import) {\n            result = this.parseImport(node);\n\n            if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n              this.sawUnambiguousESM = true;\n            }\n          } else {\n            result = this.parseExport(node);\n\n            if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n              this.sawUnambiguousESM = true;\n            }\n          }\n\n          this.assertModuleNodeAllowed(node);\n          return result;\n        }\n\n      default:\n        {\n          if (this.isAsyncFunction()) {\n            if (context) {\n              this.raise(this.state.start, Errors.AsyncFunctionInSingleStatementContext);\n            }\n\n            this.next();\n            return this.parseFunctionStatement(node, true, !context);\n          }\n        }\n    }\n\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (starttype === types.name && expr.type === \"Identifier\" && this.eat(types.colon)) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raiseWithData(node.start, {\n        code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n      }, Errors.ImportOutsideModule);\n    }\n  }\n\n  takeDecorators(node) {\n    const decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator() {\n    return this.match(types._class);\n  }\n\n  parseDecorators(allowExport) {\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    while (this.match(types.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(types._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (this.hasPlugin(\"decorators\") && !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, Errors.DecoratorExportClass);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(this.state.start, Errors.UnexpectedLeadingDecorator);\n    }\n  }\n\n  parseDecorator() {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      this.state.decoratorStack.push([]);\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr;\n\n      if (this.eat(types.parenL)) {\n        expr = this.parseExpression();\n        this.expect(types.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(types.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.eat(types.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(node, keyword) {\n    const isBreak = keyword === \"break\";\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, keyword);\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n  }\n\n  verifyBreakContinue(node, keyword) {\n    const isBreak = keyword === \"break\";\n    let i;\n\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n\n    if (i === this.state.labels.length) {\n      this.raise(node.start, Errors.IllegalBreakContinue, keyword);\n    }\n  }\n\n  parseDebuggerStatement(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression() {\n    this.expect(types.parenL);\n    const val = this.parseExpression();\n    this.expect(types.parenR);\n    return val;\n  }\n\n  parseDoStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"do\"));\n    this.state.labels.pop();\n    this.expect(types._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(types.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  parseForStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    let awaitAt = -1;\n\n    if (this.isAwaitAllowed() && this.eatContextual(\"await\")) {\n      awaitAt = this.state.lastTokStart;\n    }\n\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(types.parenL);\n\n    if (this.match(types.semi)) {\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, null);\n    }\n\n    const isLet = this.isLet();\n\n    if (this.match(types._var) || this.match(types._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if ((this.match(types._in) || this.isContextual(\"of\")) && init.declarations.length === 1) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, init);\n    }\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n\n    if (this.match(types._in) || this.isContextual(\"of\")) {\n      this.toAssignable(init);\n      const description = this.isContextual(\"of\") ? \"for-of statement\" : \"for-in statement\";\n      this.checkLVal(init, undefined, undefined, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(node, isAsync, declarationPosition) {\n    this.next();\n    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);\n  }\n\n  parseIfStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(types._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, Errors.IllegalReturn);\n    }\n\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = node.cases = [];\n    this.expect(types.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n    let cur;\n\n    for (let sawDefault; !this.match(types.braceR);) {\n      if (this.match(types._case) || this.match(types._default)) {\n        const isCase = this.match(types._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(this.state.lastTokStart, Errors.MultipleDefaultsInSwitch);\n          }\n\n          sawDefault = true;\n          cur.test = null;\n        }\n\n        this.expect(types.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next();\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node) {\n    this.next();\n\n    if (lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start))) {\n      this.raise(this.state.lastTokEnd, Errors.NewlineAfterThrow);\n    }\n\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseTryStatement(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(types._catch)) {\n      const clause = this.startNode();\n      this.next();\n\n      if (this.match(types.parenL)) {\n        this.expect(types.parenL);\n        clause.param = this.parseBindingAtom();\n        const simple = clause.param.type === \"Identifier\";\n        this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n        this.checkLVal(clause.param, BIND_LEXICAL, null, \"catch clause\");\n        this.expect(types.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      clause.body = this.withTopicForbiddingContext(() => this.parseBlock(false, false));\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, Errors.NoCatchOrFinally);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(node, kind) {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"while\"));\n    this.state.labels.pop();\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node) {\n    if (this.state.strict) {\n      this.raise(this.state.start, Errors.StrictWith);\n    }\n\n    this.next();\n    node.object = this.parseHeaderExpression();\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"with\"));\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(node, maybeName, expr, context) {\n    for (let _i2 = 0, _this$state$labels = this.state.labels; _i2 < _this$state$labels.length; _i2++) {\n      const label = _this$state$labels[_i2];\n\n      if (label.name === maybeName) {\n        this.raise(expr.start, Errors.LabelRedeclaration, maybeName);\n      }\n    }\n\n    const kind = this.state.type.isLoop ? \"loop\" : this.match(types._switch) ? \"switch\" : null;\n\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start\n    });\n    node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(node, expr) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {\n    const node = this.startNode();\n    this.expect(types.braceL);\n\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n\n    this.parseBlockBody(node, allowDirectives, false, types.braceR, afterBlockParse);\n\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt) {\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n    const body = node.body = [];\n    const directives = node.directives = [];\n    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);\n  }\n\n  parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {\n    const octalPositions = [];\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      if (!parsedNonDirective && this.state.octalPositions.length) {\n        octalPositions.push(...this.state.octalPositions);\n      }\n\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective && this.isValidDirective(stmt)) {\n        const directive = this.stmtToDirective(stmt);\n        directives.push(directive);\n\n        if (!hasStrictModeDirective && directive.value.value === \"use strict\") {\n          hasStrictModeDirective = true;\n          this.setStrict(true);\n        }\n\n        continue;\n      }\n\n      parsedNonDirective = true;\n      body.push(stmt);\n    }\n\n    if (this.state.strict && octalPositions.length) {\n      for (let _i3 = 0; _i3 < octalPositions.length; _i3++) {\n        const pos = octalPositions[_i3];\n        this.raise(pos, Errors.StrictOctalLiteral);\n      }\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  parseFor(node, init) {\n    node.init = init;\n    this.expect(types.semi);\n    node.test = this.match(types.semi) ? null : this.parseExpression();\n    this.expect(types.semi);\n    node.update = this.match(types.parenR) ? null : this.parseExpression();\n    this.expect(types.parenR);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  parseForIn(node, init, awaitAt) {\n    const isForIn = this.match(types._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt > -1) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt > -1;\n    }\n\n    if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n      this.raise(init.start, Errors.ForInOfLoopInitializer, isForIn ? \"for-in\" : \"for-of\");\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, Errors.InvalidLhs, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();\n    this.expect(types.parenR);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  parseVar(node, isFor, kind) {\n    const declarations = node.declarations = [];\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n\n      if (this.eat(types.eq)) {\n        decl.init = this.parseMaybeAssign(isFor);\n      } else {\n        if (kind === \"const\" && !(this.match(types._in) || this.isContextual(\"of\"))) {\n          if (!isTypescript) {\n            this.unexpected();\n          }\n        } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(types._in) || this.isContextual(\"of\")))) {\n          this.raise(this.state.lastTokEnd, Errors.DeclarationMissingInitializer, \"Complex binding patterns\");\n        }\n\n        decl.init = null;\n      }\n\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(types.comma)) break;\n    }\n\n    return node;\n  }\n\n  parseVarId(decl, kind) {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, kind === \"var\" ? BIND_VAR : BIND_LEXICAL, undefined, \"variable declaration\", kind !== \"var\");\n  }\n\n  parseFunction(node, statement = FUNC_NO_FLAGS, isAsync = false) {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n    this.initFunction(node, isAsync);\n\n    if (this.match(types.star) && isHangingStatement) {\n      this.raise(this.state.start, Errors.GeneratorInSingleStatementContext);\n    }\n\n    node.generator = this.eat(types.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.maybeInArrowParameters = false;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node);\n    this.withTopicForbiddingContext(() => {\n      this.parseFunctionBodyAndFinish(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n    });\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n    return node;\n  }\n\n  parseFunctionId(requireId) {\n    return requireId || this.match(types.name) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const oldInParameters = this.state.inParameters;\n    this.state.inParameters = true;\n    this.expect(types.parenL);\n    node.params = this.parseBindingList(types.parenR, 41, false, allowModifiers);\n    this.state.inParameters = oldInParameters;\n    this.checkYieldAwaitInDefaultParams();\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.id) return;\n    this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.start);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n    this.state.strict = oldStrict;\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n  }\n\n  isClassProperty() {\n    return this.match(types.eq) || this.match(types.semi) || this.match(types.braceR);\n  }\n\n  isClassMethod() {\n    return this.match(types.parenL);\n  }\n\n  isNonstaticConstructor(method) {\n    return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n  }\n\n  parseClassBody(constructorAllowsSuper, oldStrict) {\n    this.classScope.enter();\n    const state = {\n      hadConstructor: false\n    };\n    let decorators = [];\n    const classBody = this.startNode();\n    classBody.body = [];\n    this.expect(types.braceL);\n    this.withTopicForbiddingContext(() => {\n      while (!this.match(types.braceR)) {\n        if (this.eat(types.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(this.state.lastTokEnd, Errors.DecoratorSemicolon);\n          }\n\n          continue;\n        }\n\n        if (this.match(types.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state, constructorAllowsSuper);\n\n        if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n          this.raise(member.start, Errors.DecoratorConstructor);\n        }\n      }\n    });\n\n    if (!oldStrict) {\n      this.state.strict = false;\n    }\n\n    this.next();\n\n    if (decorators.length) {\n      throw this.raise(this.state.start, Errors.TrailingDecorator);\n    }\n\n    this.classScope.exit();\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  parseClassMemberFromModifier(classBody, member) {\n    const containsEsc = this.state.containsEsc;\n    const key = this.parseIdentifier(true);\n\n    if (this.isClassMethod()) {\n      const method = member;\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(classBody, method, false, false, false, false);\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop = member;\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    } else if (containsEsc) {\n      throw this.unexpected();\n    }\n\n    return false;\n  }\n\n  parseClassMember(classBody, member, state, constructorAllowsSuper) {\n    const isStatic = this.isContextual(\"static\");\n\n    if (isStatic && this.parseClassMemberFromModifier(classBody, member)) {\n      return;\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic, constructorAllowsSuper);\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic, constructorAllowsSuper) {\n    const publicMethod = member;\n    const privateMethod = member;\n    const publicProp = member;\n    const privateProp = member;\n    const method = publicMethod;\n    const publicMember = publicMethod;\n    member.static = isStatic;\n\n    if (this.eat(types.star)) {\n      method.kind = \"method\";\n      this.parseClassPropertyName(method);\n\n      if (method.key.type === \"PrivateName\") {\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, Errors.ConstructorIsGenerator);\n      }\n\n      this.pushClassMethod(classBody, publicMethod, true, false, false, false);\n      return;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parseClassPropertyName(member);\n    const isPrivate = key.type === \"PrivateName\";\n    const isSimple = key.type === \"Identifier\";\n    const maybeQuestionTokenStart = this.state.start;\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, Errors.DuplicateConstructor);\n        }\n\n        state.hadConstructor = true;\n        allowsDirectSuper = constructorAllowsSuper;\n      }\n\n      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (isSimple && key.name === \"async\" && !containsEsc && !this.isLineTerminator()) {\n      const isGenerator = this.eat(types.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStart);\n      }\n\n      method.kind = \"method\";\n      this.parseClassPropertyName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (method.key.type === \"PrivateName\") {\n        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, Errors.ConstructorIsAsync);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n      }\n    } else if (isSimple && (key.name === \"get\" || key.name === \"set\") && !containsEsc && !(this.match(types.star) && this.isLineTerminator())) {\n      method.kind = key.name;\n      this.parseClassPropertyName(publicMethod);\n\n      if (method.key.type === \"PrivateName\") {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, Errors.ConstructorIsAccessor);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, false, false, false, false);\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  parseClassPropertyName(member) {\n    const key = this.parsePropertyName(member, true);\n\n    if (!member.computed && member.static && (key.name === \"prototype\" || key.value === \"prototype\")) {\n      this.raise(key.start, Errors.StaticPrototype);\n    }\n\n    if (key.type === \"PrivateName\" && key.id.name === \"constructor\") {\n      this.raise(key.start, Errors.ConstructorClassPrivateField);\n    }\n\n    return key;\n  }\n\n  pushClassProperty(classBody, prop) {\n    if (!prop.computed && (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")) {\n      this.raise(prop.key.start, Errors.ConstructorClassField);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(classBody, prop) {\n    this.expectPlugin(\"classPrivateProperties\", prop.key.start);\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n    this.classScope.declarePrivateName(node.key.id.name, CLASS_ELEMENT_OTHER, node.key.start);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    this.expectPlugin(\"classPrivateMethods\", method.key.start);\n    const node = this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true);\n    classBody.body.push(node);\n    const kind = node.kind === \"get\" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === \"set\" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;\n    this.classScope.declarePrivateName(node.key.id.name, kind, node.key.start);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {}\n\n  parseAccessModifier() {\n    return undefined;\n  }\n\n  parseClassPrivateProperty(node) {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(types.eq) ? this.parseMaybeAssign() : null;\n    this.semicolon();\n    this.prodParam.exit();\n    this.scope.exit();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  parseClassProperty(node) {\n    if (!node.typeAnnotation) {\n      this.expectPlugin(\"classProperties\");\n    }\n\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.prodParam.enter(PARAM);\n\n    if (this.match(types.eq)) {\n      this.expectPlugin(\"classProperties\");\n      this.next();\n      node.value = this.parseMaybeAssign();\n    } else {\n      node.value = null;\n    }\n\n    this.semicolon();\n    this.prodParam.exit();\n    this.scope.exit();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassId(node, isStatement, optionalId, bindingType = BIND_CLASS) {\n    if (this.match(types.name)) {\n      node.id = this.parseIdentifier();\n\n      if (isStatement) {\n        this.checkLVal(node.id, bindingType, undefined, \"class name\");\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, Errors.MissingClassName);\n      }\n    }\n  }\n\n  parseClassSuper(node) {\n    node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  parseExport(node) {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(types.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(types.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {\n      throw this.unexpected(null, types.braceL);\n    }\n\n    let hasDeclaration;\n\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(types._default)) {\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, types.braceL);\n  }\n\n  eatExportStar(node) {\n    return this.eat(types.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (this.isExportDefaultSpecifier()) {\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    if (this.isContextual(\"as\")) {\n      if (!node.specifiers) node.specifiers = [];\n      const specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);\n      this.next();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node) {\n    if (this.match(types.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      node.specifiers.push(...this.parseExportSpecifiers());\n      node.source = null;\n      node.declaration = null;\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportDeclaration(node) {\n    if (this.shouldParseExportDeclaration()) {\n      if (this.isContextual(\"async\")) {\n        const next = this.nextTokenStart();\n\n        if (!this.isUnparsedContextual(next, \"function\")) {\n          this.unexpected(next, types._function);\n        }\n      }\n\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n\n    return false;\n  }\n\n  isAsyncFunction() {\n    if (!this.isContextual(\"async\")) return false;\n    const next = this.nextTokenStart();\n    return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression() {\n    const expr = this.startNode();\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(types._function) || isAsync) {\n      this.next();\n\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);\n    } else if (this.match(types._class)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types.at)) {\n      if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, Errors.DecoratorBeforeExport);\n      }\n\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types._const) || this.match(types._var) || this.isLet()) {\n      throw this.raise(this.state.start, Errors.UnsupportedDefaultExport);\n    } else {\n      const res = this.parseMaybeAssign();\n      this.semicolon();\n      return res;\n    }\n  }\n\n  parseExportDeclaration(node) {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types.name)) {\n      const value = this.state.value;\n\n      if (value === \"async\" || value === \"let\") {\n        return false;\n      }\n\n      if ((value === \"type\" || value === \"interface\") && !this.state.containsEsc) {\n        const l = this.lookahead();\n\n        if (l.type === types.name && l.value !== \"from\" || l.type === types.braceL) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(types._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    return this.input.charCodeAt(next) === 44 || this.isUnparsedContextual(next, \"from\");\n  }\n\n  parseExportFrom(node, expect) {\n    if (this.eatContextual(\"from\")) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n    } else {\n      if (expect) {\n        this.unexpected();\n      } else {\n        node.source = null;\n      }\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.match(types.at)) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.unexpected(this.state.start, Errors.DecoratorBeforeExport);\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return this.state.type.keyword === \"var\" || this.state.type.keyword === \"const\" || this.state.type.keyword === \"function\" || this.state.type.keyword === \"class\" || this.isLet() || this.isAsyncFunction();\n  }\n\n  checkExport(node, checkNames, isDefault, isFrom) {\n    if (checkNames) {\n      if (isDefault) {\n        this.checkDuplicateExports(node, \"default\");\n      } else if (node.specifiers && node.specifiers.length) {\n        for (let _i4 = 0, _node$specifiers = node.specifiers; _i4 < _node$specifiers.length; _i4++) {\n          const specifier = _node$specifiers[_i4];\n          this.checkDuplicateExports(specifier, specifier.exported.name);\n\n          if (!isFrom && specifier.local) {\n            this.checkReservedWord(specifier.local.name, specifier.local.start, true, false);\n            this.scope.checkLocalExport(specifier.local);\n          }\n        }\n      } else if (node.declaration) {\n        if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (let _i5 = 0, _node$declaration$dec = node.declaration.declarations; _i5 < _node$declaration$dec.length; _i5++) {\n            const declaration = _node$declaration$dec[_i5];\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (currentContextDecorators.length) {\n      const isClass = node.declaration && (node.declaration.type === \"ClassDeclaration\" || node.declaration.type === \"ClassExpression\");\n\n      if (!node.declaration || !isClass) {\n        throw this.raise(node.start, Errors.UnsupportedDecoratorExport);\n      }\n\n      this.takeDecorators(node.declaration);\n    }\n  }\n\n  checkDeclaration(node) {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (let _i6 = 0, _node$properties = node.properties; _i6 < _node$properties.length; _i6++) {\n        const prop = _node$properties[_i6];\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (let _i7 = 0, _node$elements = node.elements; _i7 < _node$elements.length; _i7++) {\n        const elem = _node$elements[_i7];\n\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(node, name) {\n    if (this.state.exportedIdentifiers.indexOf(name) > -1) {\n      this.raise(node.start, name === \"default\" ? Errors.DuplicateDefaultExport : Errors.DuplicateExport, name);\n    }\n\n    this.state.exportedIdentifiers.push(name);\n  }\n\n  parseExportSpecifiers() {\n    const nodes = [];\n    let first = true;\n    this.expect(types.braceL);\n\n    while (!this.eat(types.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n        if (this.eat(types.braceR)) break;\n      }\n\n      const node = this.startNode();\n      node.local = this.parseIdentifier(true);\n      node.exported = this.eatContextual(\"as\") ? this.parseIdentifier(true) : node.local.__clone();\n      nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n    }\n\n    return nodes;\n  }\n\n  parseImport(node) {\n    node.specifiers = [];\n\n    if (!this.match(types.string)) {\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      const parseNext = !hasDefault || this.eat(types.comma);\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(\"from\");\n    }\n\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    if (!this.match(types.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  shouldParseDefaultImport(node) {\n    return this.match(types.name);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, BIND_LEXICAL, undefined, contextDescription);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    if (this.shouldParseDefaultImport(node)) {\n      this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\", \"default import specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node) {\n    if (this.match(types.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(\"as\");\n      this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\", \"import namespace specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node) {\n    let first = true;\n    this.expect(types.braceL);\n\n    while (!this.eat(types.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        if (this.eat(types.colon)) {\n          throw this.raise(this.state.start, Errors.DestructureNamedImport);\n        }\n\n        this.expect(types.comma);\n        if (this.eat(types.braceR)) break;\n      }\n\n      this.parseImportSpecifier(node);\n    }\n  }\n\n  parseImportSpecifier(node) {\n    const specifier = this.startNode();\n    specifier.imported = this.parseIdentifier(true);\n\n    if (this.eatContextual(\"as\")) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      this.checkReservedWord(specifier.imported.name, specifier.start, true, true);\n      specifier.local = specifier.imported.__clone();\n    }\n\n    this.checkLVal(specifier.local, BIND_LEXICAL, undefined, \"import specifier\");\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n}\n\nclass ClassScope {\n  constructor() {\n    this.privateNames = new Set();\n    this.loneAccessors = new Map();\n    this.undefinedPrivateNames = new Map();\n  }\n\n}\n\nclass ClassScopeHandler {\n  constructor(raise) {\n    this.stack = [];\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n  }\n\n  current() {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n    const current = this.current();\n\n    for (let _i = 0, _Array$from = Array.from(oldClassScope.undefinedPrivateNames); _i < _Array$from.length; _i++) {\n      const [name, pos] = _Array$from[_i];\n\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, pos);\n        }\n      } else {\n        this.raise(pos, Errors.InvalidPrivateFieldResolution, name);\n      }\n    }\n  }\n\n  declarePrivateName(name, elementType, pos) {\n    const classScope = this.current();\n    let redefined = classScope.privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && classScope.loneAccessors.get(name);\n\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n        if (!redefined) classScope.loneAccessors.delete(name);\n      } else if (!redefined) {\n        classScope.loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(pos, Errors.PrivateNameRedeclaration, name);\n    }\n\n    classScope.privateNames.add(name);\n    classScope.undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name, pos) {\n    let classScope;\n\n    for (let _i2 = 0, _this$stack = this.stack; _i2 < _this$stack.length; _i2++) {\n      classScope = _this$stack[_i2];\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, pos);\n    } else {\n      this.raise(pos, Errors.InvalidPrivateFieldResolution, name);\n    }\n  }\n\n}\n\nclass Parser extends StatementParser {\n  constructor(options, input) {\n    options = getOptions(options);\n    super(options, input);\n    const ScopeHandler = this.getScopeHandler();\n    this.options = options;\n    this.inModule = this.options.sourceType === \"module\";\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n    this.prodParam = new ProductionParameterHandler();\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  getScopeHandler() {\n    return ScopeHandler;\n  }\n\n  parse() {\n    let paramFlags = PARAM;\n\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n\n}\n\nfunction pluginsMap(plugins) {\n  const pluginMap = new Map();\n\n  for (let _i = 0; _i < plugins.length; _i++) {\n    const plugin = plugins[_i];\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n\n  return pluginMap;\n}\n\nfunction parse(input, options) {\n  if (options && options.sourceType === \"unambiguous\") {\n    options = Object.assign({}, options);\n\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch (_unused) {}\n      } else {\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch (_unused2) {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nfunction parseExpression(input, options) {\n  const parser = getParser(options, input);\n\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n\n  return parser.getExpression();\n}\n\nfunction getParser(options, input) {\n  let cls = Parser;\n\n  if (options && options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache = {};\n\nfunction getParserClass(pluginsFromOptions) {\n  const pluginList = mixinPluginNames.filter(name => hasPlugin(pluginsFromOptions, name));\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n\n  if (!cls) {\n    cls = Parser;\n\n    for (let _i = 0; _i < pluginList.length; _i++) {\n      const plugin = pluginList[_i];\n      cls = mixinPlugins[plugin](cls);\n    }\n\n    parserClassCache[key] = cls;\n  }\n\n  return cls;\n}\n\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = types;","map":{"version":3,"sources":["/Users/sandornegyeliczky/Desktop/projektek/ScrumTrackerFrontend/frontend/node_modules/@babel/parser/lib/index.js"],"names":["Object","defineProperty","exports","value","beforeExpr","startsExpr","isLoop","isAssign","prefix","postfix","TokenType","constructor","label","conf","keyword","rightAssociative","binop","updateContext","keywords","Map","createKeyword","name","options","token","set","createBinop","types","num","bigint","regexp","string","eof","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","template","ellipsis","backQuote","dollarBraceL","at","hash","interpreterDirective","eq","assign","incDec","bang","tilde","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","relational","bitShift","plusMin","modulo","star","slash","exponent","_break","_case","_catch","_continue","_debugger","_default","_do","_else","_finally","_for","_function","_if","_return","_switch","_throw","_try","_var","_const","_while","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_in","_instanceof","_typeof","_void","_delete","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","lineBreak","lineBreakG","RegExp","source","isNewLine","code","skipWhiteSpace","isWhitespace","Position","line","col","column","SourceLocation","start","end","getLineInfo","input","offset","lineStart","match","lastIndex","exec","index","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","hasPlugin","plugins","has","getPluginOption","plugin","get","last","stack","length","CommentsParser","addComment","comment","filename","loc","state","trailingComments","push","leadingComments","adjustCommentsAfterTrailingComma","node","elements","takeAllComments","lastElement","i","j","commentPreviousNode","splice","newTrailingComments","leadingComment","undefined","processComment","type","body","commentStack","firstChild","lastChild","lastInStack","pop","properties","arguments","slice","innerComments","Errors","freeze","ArgumentsDisallowedInInitializer","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitExpressionFormalParameter","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ForInOfLoopInitializer","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportCallArgumentTrailingComma","ImportCallArity","ImportCallArityLtOne","ImportCallNotNewExpression","ImportCallSpreadArgument","ImportMetaOutsideModule","ImportOutsideModule","InvalidCodePoint","InvalidDigit","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","InvalidIdentifier","InvalidLhs","InvalidLhsBinding","InvalidNumber","InvalidOrUnexpectedToken","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRestAssignmentPattern","LabelRedeclaration","LetInLexicalBinding","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","ParamDupe","PatternHasAccessor","PatternHasMethod","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RestTrailingComma","SloppyFunction","StaticPrototype","StrictDelete","StrictEvalArguments","StrictEvalArgumentsBinding","StrictFunction","StrictOctalLiteral","StrictWith","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","UnexpectedTokenUnaryExponentiation","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","LocationParser","getLocationForPosition","pos","startLoc","lastTokStart","lastTokStartLoc","endLoc","lastTokEnd","lastTokEndLoc","raise","errorTemplate","params","raiseWithData","data","message","replace","_","_raise","errorContext","err","SyntaxError","errorRecovery","isLookahead","errors","isSimpleProperty","kind","method","estree","superClass","estreeParseRegExpLiteral","pattern","flags","regex","e","estreeParseLiteral","estreeParseBigIntLiteral","bigInt","BigInt","String","parseLiteral","directiveToStmt","directive","directiveLiteral","stmt","startNodeAt","expression","raw","extra","finishNodeAt","initFunction","isAsync","checkDeclaration","checkGetterSetterParams","prop","paramCount","checkLVal","expr","bindingType","checkClashes","contextDescription","disallowLetBinding","forEach","checkDuplicatedProto","protoRef","refExpressionErrors","computed","shorthand","key","used","doubleProto","isValidDirective","parenthesized","stmtToDirective","parseBlockBody","allowDirectives","topLevel","directiveStatements","directives","map","d","concat","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","parseExprAtom","startPos","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","finishNode","parseObjectMethod","isPattern","containsEsc","parseObjectProperty","toAssignable","toAssignableObjectExpressionProp","isLast","finishCallExpression","optional","callee","toReferencedListDeep","exprList","isParenthesizedExpr","parseExport","exported","specifiers","TokContext","isExpr","preserveSpace","override","types$1","braceStatement","braceExpression","templateQuasi","parenStatement","parenExpression","p","readTmplToken","functionExpression","functionStatement","context","exprAllowed","out","curContext","prevType","allowed","prodParam","hasYield","isIterator","braceIsBlock","statementParens","test","b_stat","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","keywords$1","Set","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","keywordRelationalOperator","isIteratorStart","current","next","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","OptionalBindingPattern","SpreadVariance","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnsupportedDeclareExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","declaration","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flow","flowPragma","shouldParseTypes","shouldParseEnums","finishToken","val","matches","Error","flowParseTypeInitialiser","tok","oldInType","inType","expect","flowParseType","flowParsePredicate","moduloLoc","moduloPos","checksLoc","expectContextual","eat","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","id","parseIdentifier","typeNode","typeContainer","isRelational","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","rest","returnType","typeAnnotation","resetEndLocation","semicolon","flowParseDeclare","insideModule","flowParseDeclareVariable","eatContextual","flowParseDeclareModuleExports","flowParseDeclareModule","isContextual","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","unexpected","flowParseTypeAnnotatableIdentifier","scope","declareName","enter","bodyNode","parseImport","exit","hasModuleExport","default","isLet","suggestion","exportKind","flowParseTypeAnnotation","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStart","variance","flowParseVariance","ident","bound","jsxTagStart","defaultRequired","typeParameter","expectRelational","oldNoAnonFunctionType","noAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","lookahead","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStart","inexactStart","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","argument","proto","flowCheckGetterSetterParams","property","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","lh","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","createIdentifier","flowParsePostfixType","canInsertSemicolon","elementType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatement","flowParseEnumDeclaration","parseExpressionStatement","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","noIn","refNeedsArrowPos","result","tryParse","error","failState","clone","originalNoArrowAt","noArrowAt","consequent","failed","tryParseConditionalConsequent","valid","invalid","getArrowLikeExpressions","alternate","parseMaybeAssign","noArrowParamsConversionAt","disallowInvalid","arrows","finishArrowValidation","every","isAssignable","_node$extra","toAssignableList","trailingComma","checkParams","parse","indexOf","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","member","constructorAllowsSuper","parseClassMemberFromModifier","getTokenFromCode","charCodeAt","finishOp","readWord","isBinding","element","operator","trailingCommaPos","toReferencedList","parseClassProperty","parseClassPrivateProperty","isClassMethod","isClassProperty","isNonstaticConstructor","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","parsePropertyName","isPrivateNameAllowed","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","left","shouldParseDefaultImport","parseImportSpecifierLocal","specifier","local","maybeParseDefaultImportSpecifier","parseImportSpecifier","firstIdentLoc","firstIdent","specifierTypeKind","isLookaheadContextual","as_ident","imported","__clone","nodeIsTypeImport","specifierIsTypeImport","checkReservedWord","parseFunctionParams","allowModifiers","parseVarId","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","jsx","j_oTag","j_expr","arrowExpression","resetStartLocationFromNode","thrown","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","base","noCalls","parseCallExpressionArguments","abort","parseAsyncArrowWithTypeParameters","aborted","parseSubscript","subscriptState","isLookaheadRelational","optionalChainMember","stop","typeArguments","parseNewArguments","targs","parseArrowExpression","readToken_mult_modulo","hasFlowComment","nextToken","readToken_pipe_amp","parseTopLevel","file","program","fileNode","skipBlockComment","skipFlowComment","hasFlowCommentCompletion","shiftToFirstNonWhiteSpace","includes","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","enumName","memberName","flowEnumErrorInvalidMemberName","toUpperCase","flowEnumErrorDuplicateMemberName","flowEnumErrorInconsistentMemberValues","flowEnumErrorInvalidExplicitType","suppliedType","flowEnumErrorInvalidMemberInitializer","explicitType","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","parseBooleanLiteral","flowEnumMemberRaw","init","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","memberNode","add","flowEnumStringMembers","initializedMembers","_i","_i2","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","_i3","_members$defaultedMem","_i4","_members$defaultedMem2","entities","quot","amp","apos","lt","gt","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","HEX_NUMBER","DECIMAL_NUMBER","JsxErrors","AttributeIsEmpty","MissingClosingTagFragment","MissingClosingTagElement","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","j_cTag","jsxName","jsxText","jsxTagEnd","isFragment","object","getQualifiedJSXName","namespace","jsxReadToken","chunkStart","ch","jsxReadEntity","jsxReadNewLine","normalizeCRLF","curLine","jsxReadString","quote","str","count","entity","substr","fromCodePoint","parseInt","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","newNode","jsxParseAttributeValue","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","attributes","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","inPropertyName","Scope","var","lexical","functions","ScopeHandler","scopeStack","undefinedExports","undefinedPrivateNames","inFunction","currentVarScope","allowSuper","currentThisScope","inClass","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","currentScope","createScope","checkRedeclarationInScope","maybeExportDefined","delete","isRedeclaredInScope","checkLocalExport","TypeScriptScope","args","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","isConst","wasConst","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasReturn","functionFlags","nonNull","x","assert","TSErrors","ClassMethodHasDeclare","ClassMethodHasReadonly","DeclareClassFieldHasInitializer","DuplicateModifier","EmptyHeritageClauseType","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasStatic","OptionalTypeBeforeRequired","PatternIsOptional","PrivateElementHasAbstract","PrivateElementHasAccessibility","TemplateTypeHasSubstitution","TypeAnnotationAfterAssign","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","typescript","getScopeHandler","tsIsIdentifier","tsNextTokenCanFollowModifier","hasPrecedingLineBreak","tsParseModifier","allowedModifiers","modifier","tsTryParse","bind","tsParseModifiers","modified","hasOwnProperty","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","tsParseDelimitedListWorker","expectSuccess","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","startNodeAtNode","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseTypeParameter","parseIdentifierName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsTryNextParseConstantContext","tsFillSignature","returnToken","signature","returnTokenRequired","parameters","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","tsParseTypeMember","idx","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","elementNode","restNode","tsParseType","lookaheadCharCode","raiseRestNotLast","optionalTypeNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","tsParseLiteralTypeNode","tsParseTemplateLiteralType","templateNode","parseTemplate","expressions","tsParseThisTypeOrThisTypePredicate","thisKeyword","tsParseNonArrayType","parseMaybeUnary","tsParseArrayTypeOrHigher","objectType","indexType","tsParseTypeOperator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","find","kw","tsParseUnionOrIntersectionType","parseConstituentType","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","braceStackCounter","tsInType","t","asserts","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","eatColon","tsParseNonConditionalType","checkType","extendsType","trueType","falseType","tsParseTypeAssertion","tsNextThenParseType","tsParseHeritageClause","descriptor","originalStart","delimitedList","tsParseExpressionWithTypeArguments","tsParseInterfaceDeclaration","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","tsDoThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","res","tsTryParseAndCatch","tsTryParseDeclare","nany","isLineTerminator","starttype","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminatorAndMatch","cls","abstract","tokenType","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","maybeInArrowParameters","oldYieldPos","yieldPos","oldAwaitPos","awaitPos","tsIsDeclarationStart","parseAssignableListItem","decorators","accessibility","parseAccessModifier","elt","pp","parameter","bodilessType","registerFunctionStatementId","nonNullExpression","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","parseExprOp","leftStartPos","leftStartLoc","minPrec","checkKeywords","checkDuplicateExports","ahead","importNode","isAbstractClass","parseStatementContent","parseClassMemberWithIsStatic","parsePostMemberNameModifiers","methodOrProp","isDeclare","resetStartLocation","parseClassPropertyAnnotation","definite","equal","typeCast","parseBindingAtom","parseMaybeDecoratorArguments","isInParens","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","placeholder","placeholders","parsePlaceholder","expectedNode","assertNoSpace","finishPlaceholder","isFinished","verifyBreakContinue","parseBlock","parseFunctionId","takeDecorators","parseClassBody","expectPlugin","maybeParseExportDefaultSpecifier","checkExport","filter","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","v8intrinsic","parseV8Intrinsic","v8IntrinsicStart","identifier","some","Array","isArray","option","PIPELINE_PROPOSALS","RECORD_AND_TUPLE_SYNTAX_TYPES","validatePlugins","decoratorsBeforeExport","join","mixinPlugins","mixinPluginNames","keys","defaultOptions","sourceType","sourceFilename","startLine","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","strictMode","ranges","tokens","createParenthesizedExpressions","getOptions","opts","_Object$keys","State","potentialArrowAt","inParameters","maybeInAsyncArrowHead","inPipeline","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","decoratorStack","comments","octalPositions","exportedIdentifiers","tokensLength","curPosition","skipArrays","_isDigit","isDigit","VALID_REGEX_FLAGS","forbiddenNumericSeparatorSiblings","decBinOct","hex","allowedNumericSeparatorSiblings","bin","oct","dec","Token","Tokenizer","pushToken","checkKeywordEscapes","old","curr","nextTokenStart","thisTokEnd","skip","setStrict","lastIndexOf","skipSpace","codePointAt","pushComment","block","text","skipLineComment","startSkip","loop","readToken_numberSign","readToken_interpreter","nextPos","readToken_dot","readNumber","readToken_slash","readRegexp","width","readToken_caret","readToken_plus_min","readToken_lt_gt","size","readToken_eq_excl","readToken_question","next2","readRadixNumber","readString","escaped","charAt","content","mods","char","charCode","readInt","radix","len","forceLen","allowNumSeparator","forbiddenSiblings","allowedSiblings","total","Infinity","prev","Number","isNaN","isBigInt","startsWithDot","isFloat","isNonOctalDecimalInt","octal","underscorePos","parseFloat","readCodePoint","throwOnInvalid","codePos","readHexChar","readEscapedChar","containsInvalid","inTemplate","octalStr","n","readWord1","escStart","identifierCheck","esc","parent","update","UtilParser","addExtra","op","afterNext","isUnparsedContextual","nameStart","nameEnd","messageOrType","missingPlugin","expectOnePlugin","names","checkYieldAwaitInDefaultParams","fn","oldState","abortSignal","checkExpressionErrors","andThrow","shorthandAssign","ExpressionErrors","Node","parser","range","NodeUtils","locationNode","unwrapParenthesizedExpression","LValParser","_node$extra3","_node$extra2","checkToRestConversion","arg","raiseTrailingCommaAfterRest","parseSpread","parseRestBinding","parseObj","close","closeCharCode","allowEmpty","elts","first","checkCommaAfterRest","parseDecorator","strictModeChanged","_expr$properties","_expr$elements","elem","ExpressionParser","getExpression","paramFlags","parseYield","ownExpressionErrors","parseMaybeConditional","parseExprOps","prec","logical","coalesce","checkPipelineAtInfixOperator","parseExprOpRightExpr","nextOp","withTopicPermittingContext","parseSmartPipelineBody","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","isAwaitAllowed","parseAwait","parseExprSubscripts","maybeAsyncArrow","oldMaybeInAsyncArrowHead","parseNoCallExpr","parseMaybePrivateName","classScope","usePrivateName","tag","quasi","importArg","possibleAsyncArrow","dynamicImport","allowPlaceholder","nodeForExtra","innerParenStart","oldInFSharpPipelineDirectBody","parseExprListItem","_call$extra","parseImportMetaProperty","parseFunction","oldLabels","parseExprList","ret","parseFunctionExpression","parseDecorators","parseNew","primaryTopicReferenceIsAllowedInCurrentTopicContext","registerTopicReference","isPrivate","meta","parseMetaProperty","propertyName","innerStartPos","innerStartLoc","spreadStart","optionalCommaStart","spreadNodeStartPos","spreadNodeStartLoc","innerEndPos","innerEndLoc","arrowNode","parenStart","metaProp","parseTemplateElement","isTagged","cooked","tail","curElt","quasis","isRecord","propHash","create","parseObjectMember","isAsyncProp","isGetterOrSetterMethod","oldInPropertyName","generator","async","isExpression","oldInParameters","oldStrict","hasStrictModeDirective","nonSimple","isSimpleParamList","errorPos","nameHash","identifierName","reservedTest","delegate","childExpression","pipelineStyle","checkSmartPipelineBodyStyle","checkSmartPipelineBodyEarlyErrors","parseSmartPipelineBodyInStyle","topicReferenceWasUsedInCurrentTopicContext","isSimpleReference","callback","outerContextTopicState","withTopicForbiddingContext","outerContextSoloAwaitState","loopLabel","switchLabel","FUNC_NO_FLAGS","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","FUNC_NULLABLE_ID","StatementParser","interpreter","parseInterpreterDirective","_Array$from","from","nextCh","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","allowExport","currentContextDecorators","decorator","isBreak","lab","parseHeaderExpression","awaitAt","parseFor","parseVar","declarations","parseForIn","description","declarationPosition","discriminant","cases","cur","sawDefault","isCase","handler","clause","simple","finalizer","_this$state$labels","statementStart","createNewLexicalScope","afterBlockParse","parsedNonDirective","isForIn","await","isFor","isTypescript","statement","isHangingStatement","requireId","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","publicMember","parseClassPropertyName","isSimple","maybeQuestionTokenStart","pushClassPrivateProperty","pushClassProperty","declarePrivateName","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","l","checkNames","isDefault","isFrom","_node$specifiers","_i5","_node$declaration$dec","_i6","_node$properties","_i7","_node$elements","nodes","parseNext","ClassScope","privateNames","loneAccessors","ClassScopeHandler","oldClassScope","redefined","accessor","oldStatic","newStatic","oldKind","newKind","_this$stack","Parser","pluginsMap","pluginMap","getParser","ast","_unused","moduleError","_unused2","getParserClass","parserClassCache","pluginsFromOptions","pluginList","tokTypes"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\nclass TokenType {\n  constructor(label, conf = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    this.updateContext = null;\n  }\n\n}\nconst keywords = new Map();\n\nfunction createKeyword(name, options = {}) {\n  options.keyword = name;\n  const token = new TokenType(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name, binop) {\n  return new TokenType(name, {\n    beforeExpr,\n    binop\n  });\n}\n\nconst types = {\n  num: new TokenType(\"num\", {\n    startsExpr\n  }),\n  bigint: new TokenType(\"bigint\", {\n    startsExpr\n  }),\n  regexp: new TokenType(\"regexp\", {\n    startsExpr\n  }),\n  string: new TokenType(\"string\", {\n    startsExpr\n  }),\n  name: new TokenType(\"name\", {\n    startsExpr\n  }),\n  eof: new TokenType(\"eof\"),\n  bracketL: new TokenType(\"[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketHashL: new TokenType(\"#[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketBarL: new TokenType(\"[|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketR: new TokenType(\"]\"),\n  bracketBarR: new TokenType(\"|]\"),\n  braceL: new TokenType(\"{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceBarL: new TokenType(\"{|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceHashL: new TokenType(\"#{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceR: new TokenType(\"}\"),\n  braceBarR: new TokenType(\"|}\"),\n  parenL: new TokenType(\"(\", {\n    beforeExpr,\n    startsExpr\n  }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", {\n    beforeExpr\n  }),\n  semi: new TokenType(\";\", {\n    beforeExpr\n  }),\n  colon: new TokenType(\":\", {\n    beforeExpr\n  }),\n  doubleColon: new TokenType(\"::\", {\n    beforeExpr\n  }),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", {\n    beforeExpr\n  }),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", {\n    beforeExpr\n  }),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", {\n    beforeExpr\n  }),\n  backQuote: new TokenType(\"`\", {\n    startsExpr\n  }),\n  dollarBraceL: new TokenType(\"${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  at: new TokenType(\"@\"),\n  hash: new TokenType(\"#\", {\n    startsExpr\n  }),\n  interpreterDirective: new TokenType(\"#!...\"),\n  eq: new TokenType(\"=\", {\n    beforeExpr,\n    isAssign\n  }),\n  assign: new TokenType(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  incDec: new TokenType(\"++/--\", {\n    prefix,\n    postfix,\n    startsExpr\n  }),\n  bang: new TokenType(\"!\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  tilde: new TokenType(\"~\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", {\n    beforeExpr,\n    binop: 9,\n    prefix,\n    startsExpr\n  }),\n  modulo: new TokenType(\"%\", {\n    beforeExpr,\n    binop: 10,\n    startsExpr\n  }),\n  star: createBinop(\"*\", 10),\n  slash: createBinop(\"/\", 10),\n  exponent: new TokenType(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true\n  }),\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", {\n    beforeExpr\n  }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", {\n    beforeExpr\n  }),\n  _do: createKeyword(\"do\", {\n    isLoop,\n    beforeExpr\n  }),\n  _else: createKeyword(\"else\", {\n    beforeExpr\n  }),\n  _finally: createKeyword(\"finally\"),\n  _for: createKeyword(\"for\", {\n    isLoop\n  }),\n  _function: createKeyword(\"function\", {\n    startsExpr\n  }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", {\n    beforeExpr\n  }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _while: createKeyword(\"while\", {\n    isLoop\n  }),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", {\n    beforeExpr,\n    startsExpr\n  }),\n  _this: createKeyword(\"this\", {\n    startsExpr\n  }),\n  _super: createKeyword(\"super\", {\n    startsExpr\n  }),\n  _class: createKeyword(\"class\", {\n    startsExpr\n  }),\n  _extends: createKeyword(\"extends\", {\n    beforeExpr\n  }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", {\n    startsExpr\n  }),\n  _null: createKeyword(\"null\", {\n    startsExpr\n  }),\n  _true: createKeyword(\"true\", {\n    startsExpr\n  }),\n  _false: createKeyword(\"false\", {\n    startsExpr\n  }),\n  _in: createKeyword(\"in\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _instanceof: createKeyword(\"instanceof\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _typeof: createKeyword(\"typeof\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _void: createKeyword(\"void\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _delete: createKeyword(\"delete\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  })\n};\n\nconst SCOPE_OTHER = 0b00000000,\n      SCOPE_PROGRAM = 0b00000001,\n      SCOPE_FUNCTION = 0b00000010,\n      SCOPE_ARROW = 0b00000100,\n      SCOPE_SIMPLE_CATCH = 0b00001000,\n      SCOPE_SUPER = 0b00010000,\n      SCOPE_DIRECT_SUPER = 0b00100000,\n      SCOPE_CLASS = 0b01000000,\n      SCOPE_TS_MODULE = 0b10000000,\n      SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\nconst BIND_KIND_VALUE = 0b00000000001,\n      BIND_KIND_TYPE = 0b00000000010,\n      BIND_SCOPE_VAR = 0b00000000100,\n      BIND_SCOPE_LEXICAL = 0b00000001000,\n      BIND_SCOPE_FUNCTION = 0b00000010000,\n      BIND_FLAGS_NONE = 0b00001000000,\n      BIND_FLAGS_CLASS = 0b00010000000,\n      BIND_FLAGS_TS_ENUM = 0b00100000000,\n      BIND_FLAGS_TS_CONST_ENUM = 0b01000000000,\n      BIND_FLAGS_TS_EXPORT_ONLY = 0b10000000000;\nconst BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS,\n      BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,\n      BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,\n      BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,\n      BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,\n      BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,\n      BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM,\n      BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n      BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY;\nconst CLASS_ELEMENT_FLAG_STATIC = 0b100,\n      CLASS_ELEMENT_KIND_GETTER = 0b010,\n      CLASS_ELEMENT_KIND_SETTER = 0b001,\n      CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\nconst CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n      CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n      CLASS_ELEMENT_OTHER = 0;\n\nconst lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nconst lineBreakG = new RegExp(lineBreak.source, \"g\");\nfunction isNewLine(code) {\n  switch (code) {\n    case 10:\n    case 13:\n    case 8232:\n    case 8233:\n      return true;\n\n    default:\n      return false;\n  }\n}\nconst skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\nfunction isWhitespace(code) {\n  switch (code) {\n    case 0x0009:\n    case 0x000b:\n    case 0x000c:\n    case 32:\n    case 160:\n    case 5760:\n    case 0x2000:\n    case 0x2001:\n    case 0x2002:\n    case 0x2003:\n    case 0x2004:\n    case 0x2005:\n    case 0x2006:\n    case 0x2007:\n    case 0x2008:\n    case 0x2009:\n    case 0x200a:\n    case 0x202f:\n    case 0x205f:\n    case 0x3000:\n    case 0xfeff:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nclass Position {\n  constructor(line, col) {\n    this.line = line;\n    this.column = col;\n  }\n\n}\nclass SourceLocation {\n  constructor(start, end) {\n    this.start = start;\n    this.end = end;\n  }\n\n}\nfunction getLineInfo(input, offset) {\n  let line = 1;\n  let lineStart = 0;\n  let match;\n  lineBreakG.lastIndex = 0;\n\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n\nclass BaseParser {\n  constructor() {\n    this.sawUnambiguousESM = false;\n    this.ambiguousScriptDifferentAst = false;\n  }\n\n  hasPlugin(name) {\n    return this.plugins.has(name);\n  }\n\n  getPluginOption(plugin, name) {\n    if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n  }\n\n}\n\nfunction last(stack) {\n  return stack[stack.length - 1];\n}\n\nclass CommentsParser extends BaseParser {\n  addComment(comment) {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.trailingComments.push(comment);\n    this.state.leadingComments.push(comment);\n  }\n\n  adjustCommentsAfterTrailingComma(node, elements, takeAllComments) {\n    if (this.state.leadingComments.length === 0) {\n      return;\n    }\n\n    let lastElement = null;\n    let i = elements.length;\n\n    while (lastElement === null && i > 0) {\n      lastElement = elements[--i];\n    }\n\n    if (lastElement === null) {\n      return;\n    }\n\n    for (let j = 0; j < this.state.leadingComments.length; j++) {\n      if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n        this.state.leadingComments.splice(j, 1);\n        j--;\n      }\n    }\n\n    const newTrailingComments = [];\n\n    for (let i = 0; i < this.state.leadingComments.length; i++) {\n      const leadingComment = this.state.leadingComments[i];\n\n      if (leadingComment.end < node.end) {\n        newTrailingComments.push(leadingComment);\n\n        if (!takeAllComments) {\n          this.state.leadingComments.splice(i, 1);\n          i--;\n        }\n      } else {\n        if (node.trailingComments === undefined) {\n          node.trailingComments = [];\n        }\n\n        node.trailingComments.push(leadingComment);\n      }\n    }\n\n    if (takeAllComments) this.state.leadingComments = [];\n\n    if (newTrailingComments.length > 0) {\n      lastElement.trailingComments = newTrailingComments;\n    } else if (lastElement.trailingComments !== undefined) {\n      lastElement.trailingComments = [];\n    }\n  }\n\n  processComment(node) {\n    if (node.type === \"Program\" && node.body.length > 0) return;\n    const stack = this.state.commentStack;\n    let firstChild, lastChild, trailingComments, i, j;\n\n    if (this.state.trailingComments.length > 0) {\n      if (this.state.trailingComments[0].start >= node.end) {\n        trailingComments = this.state.trailingComments;\n        this.state.trailingComments = [];\n      } else {\n        this.state.trailingComments.length = 0;\n      }\n    } else if (stack.length > 0) {\n      const lastInStack = last(stack);\n\n      if (lastInStack.trailingComments && lastInStack.trailingComments[0].start >= node.end) {\n        trailingComments = lastInStack.trailingComments;\n        delete lastInStack.trailingComments;\n      }\n    }\n\n    if (stack.length > 0 && last(stack).start >= node.start) {\n      firstChild = stack.pop();\n    }\n\n    while (stack.length > 0 && last(stack).start >= node.start) {\n      lastChild = stack.pop();\n    }\n\n    if (!lastChild && firstChild) lastChild = firstChild;\n\n    if (firstChild) {\n      switch (node.type) {\n        case \"ObjectExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties);\n          break;\n\n        case \"ObjectPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties, true);\n          break;\n\n        case \"CallExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.arguments);\n          break;\n\n        case \"ArrayExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements);\n          break;\n\n        case \"ArrayPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements, true);\n          break;\n      }\n    } else if (this.state.commentPreviousNode && (this.state.commentPreviousNode.type === \"ImportSpecifier\" && node.type !== \"ImportSpecifier\" || this.state.commentPreviousNode.type === \"ExportSpecifier\" && node.type !== \"ExportSpecifier\")) {\n      this.adjustCommentsAfterTrailingComma(node, [this.state.commentPreviousNode]);\n    }\n\n    if (lastChild) {\n      if (lastChild.leadingComments) {\n        if (lastChild !== node && lastChild.leadingComments.length > 0 && last(lastChild.leadingComments).end <= node.start) {\n          node.leadingComments = lastChild.leadingComments;\n          delete lastChild.leadingComments;\n        } else {\n          for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {\n            if (lastChild.leadingComments[i].end <= node.start) {\n              node.leadingComments = lastChild.leadingComments.splice(0, i + 1);\n              break;\n            }\n          }\n        }\n      }\n    } else if (this.state.leadingComments.length > 0) {\n      if (last(this.state.leadingComments).end <= node.start) {\n        if (this.state.commentPreviousNode) {\n          for (j = 0; j < this.state.leadingComments.length; j++) {\n            if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n              this.state.leadingComments.splice(j, 1);\n              j--;\n            }\n          }\n        }\n\n        if (this.state.leadingComments.length > 0) {\n          node.leadingComments = this.state.leadingComments;\n          this.state.leadingComments = [];\n        }\n      } else {\n        for (i = 0; i < this.state.leadingComments.length; i++) {\n          if (this.state.leadingComments[i].end > node.start) {\n            break;\n          }\n        }\n\n        const leadingComments = this.state.leadingComments.slice(0, i);\n\n        if (leadingComments.length) {\n          node.leadingComments = leadingComments;\n        }\n\n        trailingComments = this.state.leadingComments.slice(i);\n\n        if (trailingComments.length === 0) {\n          trailingComments = null;\n        }\n      }\n    }\n\n    this.state.commentPreviousNode = node;\n\n    if (trailingComments) {\n      if (trailingComments.length && trailingComments[0].start >= node.start && last(trailingComments).end <= node.end) {\n        node.innerComments = trailingComments;\n      } else {\n        node.trailingComments = trailingComments;\n      }\n    }\n\n    stack.push(node);\n  }\n\n}\n\nconst Errors = Object.freeze({\n  ArgumentsDisallowedInInitializer: \"'arguments' is not allowed in class field initializer\",\n  AsyncFunctionInSingleStatementContext: \"Async functions can only be declared at the top level or inside a block\",\n  AwaitBindingIdentifier: \"Can not use 'await' as identifier inside an async function\",\n  AwaitExpressionFormalParameter: \"await is not allowed in async function parameters\",\n  AwaitNotInAsyncFunction: \"Can not use keyword 'await' outside an async function\",\n  BadGetterArity: \"getter must not have any formal parameters\",\n  BadSetterArity: \"setter must have exactly one formal parameter\",\n  BadSetterRestParameter: \"setter function argument must not be a rest parameter\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'\",\n  ConstructorClassPrivateField: \"Classes may not have a private field named '#constructor'\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor\",\n  ConstructorIsAsync: \"Constructor can't be an async function\",\n  ConstructorIsGenerator: \"Constructor can't be a generator\",\n  DeclarationMissingInitializer: \"%0 require an initialization value\",\n  DecoratorBeforeExport: \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax\",\n  DecoratorConstructor: \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass: \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon\",\n  DeletePrivateField: \"Deleting a private field is not allowed\",\n  DestructureNamedImport: \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: \"`%0` has already been exported. Exported identifiers must be unique.\",\n  DuplicateProto: \"Redefinition of __proto__ property\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag\",\n  ElementAfterRest: \"Rest element must be last element\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape\",\n  ForInOfLoopInitializer: \"%0 loop variable declaration may not have an initializer\",\n  GeneratorInSingleStatementContext: \"Generators can only be declared at the top level or inside a block\",\n  IllegalBreakContinue: \"Unsyntactic %0\",\n  IllegalLanguageModeDirective: \"Illegal 'use strict' directive in function with non-simple parameter list\",\n  IllegalReturn: \"'return' outside of function\",\n  ImportCallArgumentTrailingComma: \"Trailing comma is disallowed inside import(...) arguments\",\n  ImportCallArity: \"import() requires exactly one argument\",\n  ImportCallArityLtOne: \"Dynamic imports require a parameter: import('a.js')\",\n  ImportCallNotNewExpression: \"Cannot use new with import(...)\",\n  ImportCallSpreadArgument: \"... is not allowed in import()\",\n  ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n  ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n  InvalidCodePoint: \"Code point out of bounds\",\n  InvalidDigit: \"Expected number in radix %0\",\n  InvalidEscapeSequence: \"Bad character escape sequence\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template\",\n  InvalidEscapedReservedWord: \"Escape sequence in keyword %0\",\n  InvalidIdentifier: \"Invalid identifier %0\",\n  InvalidLhs: \"Invalid left-hand side in %0\",\n  InvalidLhsBinding: \"Binding invalid left-hand side in %0\",\n  InvalidNumber: \"Invalid number\",\n  InvalidOrUnexpectedToken: \"Unexpected character '%0'\",\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern\",\n  InvalidPrivateFieldResolution: \"Private name #%0 is not defined\",\n  InvalidPropertyBindingPattern: \"Binding member expression\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument\",\n  LabelRedeclaration: \"Label '%0' is already declared\",\n  LetInLexicalBinding: \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag\",\n  MissingClassName: \"A class name is required\",\n  MissingEqInAssignment: \"Only '=' operator can be used for specifying default value.\",\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX\",\n  MixingCoalesceWithLogical: \"Nullish coalescing operator(??) requires parens when mixing with logical operators\",\n  ModuleExportUndefined: \"Export '%0' is not defined\",\n  MultipleDefaultsInSwitch: \"Multiple default clauses\",\n  NewlineAfterThrow: \"Illegal newline after throw\",\n  NoCatchOrFinally: \"Missing catch or finally clause\",\n  NumberIdentifier: \"Identifier directly after number\",\n  NumericSeparatorInEscapeSequence: \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences\",\n  ObsoleteAwaitStar: \"await* has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew: \"constructors in/after an Optional Chain are not allowed\",\n  OptionalChainingNoTemplate: \"Tagged Template Literals are not allowed in optionalChain\",\n  ParamDupe: \"Argument name clash\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter\",\n  PatternHasMethod: \"Object pattern can't contain methods\",\n  PipelineBodyNoArrow: 'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized',\n  PipelineBodySequenceExpression: \"Pipeline body may not be a comma-separated sequence expression\",\n  PipelineHeadSequenceExpression: \"Pipeline head should not be a comma-separated sequence expression\",\n  PipelineTopicUnused: \"Pipeline is in topic style but does not use topic reference\",\n  PrimaryTopicNotAllowed: \"Topic reference was used in a lexical context without topic binding\",\n  PrimaryTopicRequiresSmartPipeline: \"Primary Topic Reference found but pipelineOperator not passed 'smart' for 'proposal' option.\",\n  PrivateNameRedeclaration: \"Duplicate private name #%0\",\n  RecordExpressionBarIncorrectEndSyntaxType: \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  RecordExpressionBarIncorrectStartSyntaxType: \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  RecordExpressionHashIncorrectStartSyntaxType: \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element\",\n  SloppyFunction: \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement\",\n  StaticPrototype: \"Classes may not have static property named prototype\",\n  StrictDelete: \"Deleting local variable in strict mode\",\n  StrictEvalArguments: \"Assigning to '%0' in strict mode\",\n  StrictEvalArgumentsBinding: \"Binding '%0' in strict mode\",\n  StrictFunction: \"In strict mode code, functions can only be declared at top level or inside a block\",\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode\",\n  StrictWith: \"'with' in strict mode\",\n  SuperNotAllowed: \"super() is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super\",\n  TrailingDecorator: \"Decorators must be attached to a class element\",\n  TupleExpressionBarIncorrectEndSyntaxType: \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  TupleExpressionBarIncorrectStartSyntaxType: \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  TupleExpressionHashIncorrectStartSyntaxType: \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder\",\n  UnexpectedAwaitAfterPipelineBody: 'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token\",\n  UnexpectedImportExport: \"'import' and 'export' may only appear at the top level\",\n  UnexpectedKeyword: \"Unexpected keyword '%0'\",\n  UnexpectedLeadingDecorator: \"Leading decorators must be attached to a class declaration\",\n  UnexpectedLexicalDeclaration: \"Lexical declaration cannot appear in a single-statement context\",\n  UnexpectedNewTarget: \"new.target can only be used in functions\",\n  UnexpectedNumericSeparator: \"A numeric separator is only allowed between two digits\",\n  UnexpectedPrivateField: \"Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\\n or a property of member expression (i.e. this.#p).\",\n  UnexpectedReservedWord: \"Unexpected reserved word '%0'\",\n  UnexpectedSuper: \"super is only allowed in object methods and classes\",\n  UnexpectedToken: \"Unexpected token '%'\",\n  UnexpectedTokenUnaryExponentiation: \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport: \"A decorated export must export a class declaration\",\n  UnsupportedDefaultExport: \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"import can only be used in import() or import.meta\",\n  UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1\",\n  UnsupportedParameterDecorator: \"Decorators cannot be used to decorate parameters\",\n  UnsupportedPropertyDecorator: \"Decorators cannot be used to decorate object literal properties\",\n  UnsupportedSuper: \"super can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop])\",\n  UnterminatedComment: \"Unterminated comment\",\n  UnterminatedRegExp: \"Unterminated regular expression\",\n  UnterminatedString: \"Unterminated string constant\",\n  UnterminatedTemplate: \"Unterminated template\",\n  VarRedeclaration: \"Identifier '%0' has already been declared\",\n  YieldBindingIdentifier: \"Can not use 'yield' as identifier inside a generator\",\n  YieldInParameter: \"yield is not allowed in generator parameters\",\n  ZeroDigitNumericSeparator: \"Numeric separator can not be used after leading 0\"\n});\nclass LocationParser extends CommentsParser {\n  getLocationForPosition(pos) {\n    let loc;\n    if (pos === this.state.start) loc = this.state.startLoc;else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;else if (pos === this.state.end) loc = this.state.endLoc;else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;else loc = getLineInfo(this.input, pos);\n    return loc;\n  }\n\n  raise(pos, errorTemplate, ...params) {\n    return this.raiseWithData(pos, undefined, errorTemplate, ...params);\n  }\n\n  raiseWithData(pos, data, errorTemplate, ...params) {\n    const loc = this.getLocationForPosition(pos);\n    const message = errorTemplate.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign({\n      loc,\n      pos\n    }, data), message);\n  }\n\n  _raise(errorContext, message) {\n    const err = new SyntaxError(message);\n    Object.assign(err, errorContext);\n\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n\n}\n\nfunction isSimpleProperty(node) {\n  return node != null && node.type === \"Property\" && node.kind === \"init\" && node.method === false;\n}\n\nvar estree = (superClass => class extends superClass {\n  estreeParseRegExpLiteral({\n    pattern,\n    flags\n  }) {\n    let regex = null;\n\n    try {\n      regex = new RegExp(pattern, flags);\n    } catch (e) {}\n\n    const node = this.estreeParseLiteral(regex);\n    node.regex = {\n      pattern,\n      flags\n    };\n    return node;\n  }\n\n  estreeParseBigIntLiteral(value) {\n    const bigInt = typeof BigInt !== \"undefined\" ? BigInt(value) : null;\n    const node = this.estreeParseLiteral(bigInt);\n    node.bigint = String(node.value || value);\n    return node;\n  }\n\n  estreeParseLiteral(value) {\n    return this.parseLiteral(value, \"Literal\");\n  }\n\n  directiveToStmt(directive) {\n    const directiveLiteral = directive.value;\n    const stmt = this.startNodeAt(directive.start, directive.loc.start);\n    const expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);\n    expression.value = directiveLiteral.value;\n    expression.raw = directiveLiteral.extra.raw;\n    stmt.expression = this.finishNodeAt(expression, \"Literal\", directiveLiteral.end, directiveLiteral.loc.end);\n    stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n    return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.end, directive.loc.end);\n  }\n\n  initFunction(node, isAsync) {\n    super.initFunction(node, isAsync);\n    node.expression = false;\n  }\n\n  checkDeclaration(node) {\n    if (isSimpleProperty(node)) {\n      this.checkDeclaration(node.value);\n    } else {\n      super.checkDeclaration(node);\n    }\n  }\n\n  checkGetterSetterParams(method) {\n    const prop = method;\n    const paramCount = prop.kind === \"get\" ? 0 : 1;\n    const start = prop.start;\n\n    if (prop.value.params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, Errors.BadGetterArity);\n      } else {\n        this.raise(start, Errors.BadSetterArity);\n      }\n    } else if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\") {\n      this.raise(start, Errors.BadSetterRestParameter);\n    }\n  }\n\n  checkLVal(expr, bindingType = BIND_NONE, checkClashes, contextDescription, disallowLetBinding) {\n    switch (expr.type) {\n      case \"ObjectPattern\":\n        expr.properties.forEach(prop => {\n          this.checkLVal(prop.type === \"Property\" ? prop.value : prop, bindingType, checkClashes, \"object destructuring pattern\", disallowLetBinding);\n        });\n        break;\n\n      default:\n        super.checkLVal(expr, bindingType, checkClashes, contextDescription, disallowLetBinding);\n    }\n  }\n\n  checkDuplicatedProto(prop, protoRef, refExpressionErrors) {\n    if (prop.type === \"SpreadElement\" || prop.computed || prop.method || prop.shorthand) {\n      return;\n    }\n\n    const key = prop.key;\n    const name = key.type === \"Identifier\" ? key.name : String(key.value);\n\n    if (name === \"__proto__\" && prop.kind === \"init\") {\n      if (protoRef.used) {\n        if (refExpressionErrors && refExpressionErrors.doubleProto === -1) {\n          refExpressionErrors.doubleProto = key.start;\n        } else {\n          this.raise(key.start, Errors.DuplicateProto);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  isValidDirective(stmt) {\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && (!stmt.expression.extra || !stmt.expression.extra.parenthesized);\n  }\n\n  stmtToDirective(stmt) {\n    const directive = super.stmtToDirective(stmt);\n    const value = stmt.expression.value;\n    directive.value.value = value;\n    return directive;\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end) {\n    super.parseBlockBody(node, allowDirectives, topLevel, end);\n    const directiveStatements = node.directives.map(d => this.directiveToStmt(d));\n    node.body = directiveStatements.concat(node.body);\n    delete node.directives;\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true);\n\n    if (method.typeParameters) {\n      method.value.typeParameters = method.typeParameters;\n      delete method.typeParameters;\n    }\n\n    classBody.body.push(method);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    switch (this.state.type) {\n      case types.num:\n      case types.string:\n        return this.estreeParseLiteral(this.state.value);\n\n      case types.regexp:\n        return this.estreeParseRegExpLiteral(this.state.value);\n\n      case types.bigint:\n        return this.estreeParseBigIntLiteral(this.state.value);\n\n      case types._null:\n        return this.estreeParseLiteral(null);\n\n      case types._true:\n        return this.estreeParseLiteral(true);\n\n      case types._false:\n        return this.estreeParseLiteral(false);\n\n      default:\n        return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n\n  parseLiteral(value, type, startPos, startLoc) {\n    const node = super.parseLiteral(value, type, startPos, startLoc);\n    node.raw = node.extra.raw;\n    delete node.extra;\n    return node;\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    super.parseFunctionBody(node, allowExpression, isMethod);\n    node.expression = node.body.type !== \"BlockStatement\";\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    let funcNode = this.startNode();\n    funcNode.kind = node.kind;\n    funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n    funcNode.type = \"FunctionExpression\";\n    delete funcNode.kind;\n    node.value = funcNode;\n    type = type === \"ClassMethod\" ? \"MethodDefinition\" : type;\n    return this.finishNode(node, type);\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, containsEsc) {\n    const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, containsEsc);\n\n    if (node) {\n      node.type = \"Property\";\n      if (node.kind === \"method\") node.kind = \"init\";\n      node.shorthand = false;\n    }\n\n    return node;\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    const node = super.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n\n    if (node) {\n      node.kind = \"init\";\n      node.type = \"Property\";\n    }\n\n    return node;\n  }\n\n  toAssignable(node) {\n    if (isSimpleProperty(node)) {\n      this.toAssignable(node.value);\n      return node;\n    }\n\n    return super.toAssignable(node);\n  }\n\n  toAssignableObjectExpressionProp(prop, isLast) {\n    if (prop.kind === \"get\" || prop.kind === \"set\") {\n      throw this.raise(prop.key.start, Errors.PatternHasAccessor);\n    } else if (prop.method) {\n      throw this.raise(prop.key.start, Errors.PatternHasMethod);\n    } else {\n      super.toAssignableObjectExpressionProp(prop, isLast);\n    }\n  }\n\n  finishCallExpression(node, optional) {\n    super.finishCallExpression(node, optional);\n\n    if (node.callee.type === \"Import\") {\n      node.type = \"ImportExpression\";\n      node.source = node.arguments[0];\n      delete node.arguments;\n      delete node.callee;\n    }\n\n    return node;\n  }\n\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    if (!exprList) {\n      return;\n    }\n\n    super.toReferencedListDeep(exprList, isParenthesizedExpr);\n  }\n\n  parseExport(node) {\n    super.parseExport(node);\n\n    switch (node.type) {\n      case \"ExportAllDeclaration\":\n        node.exported = null;\n        break;\n\n      case \"ExportNamedDeclaration\":\n        if (node.specifiers.length === 1 && node.specifiers[0].type === \"ExportNamespaceSpecifier\") {\n          node.type = \"ExportAllDeclaration\";\n          node.exported = node.specifiers[0].exported;\n          delete node.specifiers;\n        }\n\n        break;\n    }\n\n    return node;\n  }\n\n});\n\nclass TokContext {\n  constructor(token, isExpr, preserveSpace, override) {\n    this.token = token;\n    this.isExpr = !!isExpr;\n    this.preserveSpace = !!preserveSpace;\n    this.override = override;\n  }\n\n}\nconst types$1 = {\n  braceStatement: new TokContext(\"{\", false),\n  braceExpression: new TokContext(\"{\", true),\n  templateQuasi: new TokContext(\"${\", false),\n  parenStatement: new TokContext(\"(\", false),\n  parenExpression: new TokContext(\"(\", true),\n  template: new TokContext(\"`\", true, true, p => p.readTmplToken()),\n  functionExpression: new TokContext(\"function\", true),\n  functionStatement: new TokContext(\"function\", false)\n};\n\ntypes.parenR.updateContext = types.braceR.updateContext = function () {\n  if (this.state.context.length === 1) {\n    this.state.exprAllowed = true;\n    return;\n  }\n\n  let out = this.state.context.pop();\n\n  if (out === types$1.braceStatement && this.curContext().token === \"function\") {\n    out = this.state.context.pop();\n  }\n\n  this.state.exprAllowed = !out.isExpr;\n};\n\ntypes.name.updateContext = function (prevType) {\n  let allowed = false;\n\n  if (prevType !== types.dot) {\n    if (this.state.value === \"of\" && !this.state.exprAllowed && prevType !== types._function && prevType !== types._class || this.state.value === \"yield\" && this.prodParam.hasYield) {\n      allowed = true;\n    }\n  }\n\n  this.state.exprAllowed = allowed;\n\n  if (this.state.isIterator) {\n    this.state.isIterator = false;\n  }\n};\n\ntypes.braceL.updateContext = function (prevType) {\n  this.state.context.push(this.braceIsBlock(prevType) ? types$1.braceStatement : types$1.braceExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes.dollarBraceL.updateContext = function () {\n  this.state.context.push(types$1.templateQuasi);\n  this.state.exprAllowed = true;\n};\n\ntypes.parenL.updateContext = function (prevType) {\n  const statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;\n  this.state.context.push(statementParens ? types$1.parenStatement : types$1.parenExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes.incDec.updateContext = function () {};\n\ntypes._function.updateContext = types._class.updateContext = function (prevType) {\n  if (prevType === types.dot || prevType === types.questionDot) ; else if (prevType.beforeExpr && prevType !== types.semi && prevType !== types._else && !(prevType === types._return && lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start))) && !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat)) {\n    this.state.context.push(types$1.functionExpression);\n  } else {\n    this.state.context.push(types$1.functionStatement);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntypes.backQuote.updateContext = function () {\n  if (this.curContext() === types$1.template) {\n    this.state.context.pop();\n  } else {\n    this.state.context.push(types$1.template);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntypes.star.updateContext = function () {\n  this.state.exprAllowed = false;\n};\n\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08c7\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\u9ffc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7ca\\ua7f5-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf\\u1ac0\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\nconst nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nconst nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nconst astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 107, 20, 28, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8952, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42717, 35, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];\nconst astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\n\nfunction isInAstralSet(code, set) {\n  let pos = 0x10000;\n\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n\n  return false;\n}\n\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\nconst reservedWords = {\n  keyword: [\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\"],\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n  strictBind: [\"eval\", \"arguments\"]\n};\nconst keywords$1 = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\nfunction isReservedWord(word, inModule) {\n  return inModule && word === \"await\" || word === \"enum\";\n}\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\nfunction isKeyword(word) {\n  return keywords$1.has(word);\n}\n\nconst keywordRelationalOperator = /^in(stanceof)?$/;\nfunction isIteratorStart(current, next) {\n  return current === 64 && next === 64;\n}\n\nconst reservedTypes = new Set([\"_\", \"any\", \"bool\", \"boolean\", \"empty\", \"extends\", \"false\", \"interface\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\"]);\nconst FlowErrors = Object.freeze({\n  AmbiguousConditionalArrow: \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind: \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module\",\n  AssignReservedType: \"Cannot overwrite reserved type %0\",\n  DeclareClassElement: \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer: \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement\",\n  EnumBooleanMemberNotInitialized: \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n  EnumDuplicateMemberName: \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n  EnumInconsistentMemberValues: \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n  EnumInvalidExplicitType: \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidExplicitTypeUnknownSupplied: \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidMemberInitializerPrimaryType: \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n  EnumInvalidMemberInitializerSymbolType: \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n  EnumInvalidMemberInitializerUnknownType: \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n  EnumInvalidMemberName: \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n  EnumNumberMemberNotInitialized: \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n  EnumStringMemberInconsistentlyInitailized: \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n  ImportTypeShorthandOnlyInPureImport: \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements\",\n  InexactInsideExact: \"Explicit inexact syntax cannot appear inside an explicit exact object type\",\n  InexactInsideNonObject: \"Explicit inexact syntax cannot appear in class or interface definitions\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance\",\n  InvalidNonTypeImportInDeclareModule: \"Imports within a `declare module` body must always be `import type` or `import typeof`\",\n  MissingTypeParamDefault: \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule: \"`declare module` cannot be used inside another `declare module`\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment\",\n  OptionalBindingPattern: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  SpreadVariance: \"Spread properties cannot have variance\",\n  TypeBeforeInitializer: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\",\n  TypeCastInPattern: \"The type cast expression is expected to be wrapped with parenthesis\",\n  UnexpectedExplicitInexactInObject: \"Explicit inexact syntax must appear at the end of an inexact object\",\n  UnexpectedReservedType: \"Unexpected reserved type %0\",\n  UnexpectedReservedUnderscore: \"`_` is only allowed as a type argument to call or new\",\n  UnexpectedSpaceBetweenModuloChecks: \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType: \"Spread operator cannot appear in class or interface definitions\",\n  UnexpectedSubtractionOperand: 'Unexpected token, expected \"number\" or \"bigint\"',\n  UnexpectedTokenAfterTypeParameter: \"Expected an arrow function after this type parameter declaration\",\n  UnsupportedDeclareExportKind: \"`declare export %0` is not supported. Use `%1` instead\",\n  UnsupportedStatementInDeclareModule: \"Only declares and type imports are allowed inside declare module\",\n  UnterminatedFlowComment: \"Unterminated flow-comment\"\n});\n\nfunction isEsModuleType(bodyElement) {\n  return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\n}\n\nfunction hasTypeImportKind(node) {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(state) {\n  return (state.type === types.name || !!state.type.keyword) && state.value !== \"from\";\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\"\n};\n\nfunction partition(list, test) {\n  const list1 = [];\n  const list2 = [];\n\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\nvar flow = (superClass => class extends superClass {\n  constructor(options, input) {\n    super(options, input);\n    this.flowPragma = undefined;\n  }\n\n  shouldParseTypes() {\n    return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n  }\n\n  shouldParseEnums() {\n    return !!this.getPluginOption(\"flow\", \"enums\");\n  }\n\n  finishToken(type, val) {\n    if (type !== types.string && type !== types.semi && type !== types.interpreterDirective) {\n      if (this.flowPragma === undefined) {\n        this.flowPragma = null;\n      }\n    }\n\n    return super.finishToken(type, val);\n  }\n\n  addComment(comment) {\n    if (this.flowPragma === undefined) {\n      const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n\n      if (!matches) ; else if (matches[1] === \"flow\") {\n        this.flowPragma = \"flow\";\n      } else if (matches[1] === \"noflow\") {\n        this.flowPragma = \"noflow\";\n      } else {\n        throw new Error(\"Unexpected flow pragma\");\n      }\n    }\n\n    return super.addComment(comment);\n  }\n\n  flowParseTypeInitialiser(tok) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(tok || types.colon);\n    const type = this.flowParseType();\n    this.state.inType = oldInType;\n    return type;\n  }\n\n  flowParsePredicate() {\n    const node = this.startNode();\n    const moduloLoc = this.state.startLoc;\n    const moduloPos = this.state.start;\n    this.expect(types.modulo);\n    const checksLoc = this.state.startLoc;\n    this.expectContextual(\"checks\");\n\n    if (moduloLoc.line !== checksLoc.line || moduloLoc.column !== checksLoc.column - 1) {\n      this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);\n    }\n\n    if (this.eat(types.parenL)) {\n      node.value = this.parseExpression();\n      this.expect(types.parenR);\n      return this.finishNode(node, \"DeclaredPredicate\");\n    } else {\n      return this.finishNode(node, \"InferredPredicate\");\n    }\n  }\n\n  flowParseTypeAndPredicateInitialiser() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(types.colon);\n    let type = null;\n    let predicate = null;\n\n    if (this.match(types.modulo)) {\n      this.state.inType = oldInType;\n      predicate = this.flowParsePredicate();\n    } else {\n      type = this.flowParseType();\n      this.state.inType = oldInType;\n\n      if (this.match(types.modulo)) {\n        predicate = this.flowParsePredicate();\n      }\n    }\n\n    return [type, predicate];\n  }\n\n  flowParseDeclareClass(node) {\n    this.next();\n    this.flowParseInterfaceish(node, true);\n    return this.finishNode(node, \"DeclareClass\");\n  }\n\n  flowParseDeclareFunction(node) {\n    this.next();\n    const id = node.id = this.parseIdentifier();\n    const typeNode = this.startNode();\n    const typeContainer = this.startNode();\n\n    if (this.isRelational(\"<\")) {\n      typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      typeNode.typeParameters = null;\n    }\n\n    this.expect(types.parenL);\n    const tmp = this.flowParseFunctionTypeParams();\n    typeNode.params = tmp.params;\n    typeNode.rest = tmp.rest;\n    this.expect(types.parenR);\n    [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n    typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n    id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n    this.resetEndLocation(id);\n    this.semicolon();\n    return this.finishNode(node, \"DeclareFunction\");\n  }\n\n  flowParseDeclare(node, insideModule) {\n    if (this.match(types._class)) {\n      return this.flowParseDeclareClass(node);\n    } else if (this.match(types._function)) {\n      return this.flowParseDeclareFunction(node);\n    } else if (this.match(types._var)) {\n      return this.flowParseDeclareVariable(node);\n    } else if (this.eatContextual(\"module\")) {\n      if (this.match(types.dot)) {\n        return this.flowParseDeclareModuleExports(node);\n      } else {\n        if (insideModule) {\n          this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);\n        }\n\n        return this.flowParseDeclareModule(node);\n      }\n    } else if (this.isContextual(\"type\")) {\n      return this.flowParseDeclareTypeAlias(node);\n    } else if (this.isContextual(\"opaque\")) {\n      return this.flowParseDeclareOpaqueType(node);\n    } else if (this.isContextual(\"interface\")) {\n      return this.flowParseDeclareInterface(node);\n    } else if (this.match(types._export)) {\n      return this.flowParseDeclareExportDeclaration(node, insideModule);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  flowParseDeclareVariable(node) {\n    this.next();\n    node.id = this.flowParseTypeAnnotatableIdentifier(true);\n    this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n    this.semicolon();\n    return this.finishNode(node, \"DeclareVariable\");\n  }\n\n  flowParseDeclareModule(node) {\n    this.scope.enter(SCOPE_OTHER);\n\n    if (this.match(types.string)) {\n      node.id = this.parseExprAtom();\n    } else {\n      node.id = this.parseIdentifier();\n    }\n\n    const bodyNode = node.body = this.startNode();\n    const body = bodyNode.body = [];\n    this.expect(types.braceL);\n\n    while (!this.match(types.braceR)) {\n      let bodyNode = this.startNode();\n\n      if (this.match(types._import)) {\n        this.next();\n\n        if (!this.isContextual(\"type\") && !this.match(types._typeof)) {\n          this.raise(this.state.lastTokStart, FlowErrors.InvalidNonTypeImportInDeclareModule);\n        }\n\n        this.parseImport(bodyNode);\n      } else {\n        this.expectContextual(\"declare\", FlowErrors.UnsupportedStatementInDeclareModule);\n        bodyNode = this.flowParseDeclare(bodyNode, true);\n      }\n\n      body.push(bodyNode);\n    }\n\n    this.scope.exit();\n    this.expect(types.braceR);\n    this.finishNode(bodyNode, \"BlockStatement\");\n    let kind = null;\n    let hasModuleExport = false;\n    body.forEach(bodyElement => {\n      if (isEsModuleType(bodyElement)) {\n        if (kind === \"CommonJS\") {\n          this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n        }\n\n        kind = \"ES\";\n      } else if (bodyElement.type === \"DeclareModuleExports\") {\n        if (hasModuleExport) {\n          this.raise(bodyElement.start, FlowErrors.DuplicateDeclareModuleExports);\n        }\n\n        if (kind === \"ES\") {\n          this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n        }\n\n        kind = \"CommonJS\";\n        hasModuleExport = true;\n      }\n    });\n    node.kind = kind || \"CommonJS\";\n    return this.finishNode(node, \"DeclareModule\");\n  }\n\n  flowParseDeclareExportDeclaration(node, insideModule) {\n    this.expect(types._export);\n\n    if (this.eat(types._default)) {\n      if (this.match(types._function) || this.match(types._class)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n      } else {\n        node.declaration = this.flowParseType();\n        this.semicolon();\n      }\n\n      node.default = true;\n      return this.finishNode(node, \"DeclareExportDeclaration\");\n    } else {\n      if (this.match(types._const) || this.isLet() || (this.isContextual(\"type\") || this.isContextual(\"interface\")) && !insideModule) {\n        const label = this.state.value;\n        const suggestion = exportSuggestions[label];\n        throw this.raise(this.state.start, FlowErrors.UnsupportedDeclareExportKind, label, suggestion);\n      }\n\n      if (this.match(types._var) || this.match(types._function) || this.match(types._class) || this.isContextual(\"opaque\")) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (this.match(types.star) || this.match(types.braceL) || this.isContextual(\"interface\") || this.isContextual(\"type\") || this.isContextual(\"opaque\")) {\n          node = this.parseExport(node);\n\n          if (node.type === \"ExportNamedDeclaration\") {\n            node.type = \"ExportDeclaration\";\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          node.type = \"Declare\" + node.type;\n          return node;\n        }\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParseDeclareModuleExports(node) {\n    this.next();\n    this.expectContextual(\"exports\");\n    node.typeAnnotation = this.flowParseTypeAnnotation();\n    this.semicolon();\n    return this.finishNode(node, \"DeclareModuleExports\");\n  }\n\n  flowParseDeclareTypeAlias(node) {\n    this.next();\n    this.flowParseTypeAlias(node);\n    node.type = \"DeclareTypeAlias\";\n    return node;\n  }\n\n  flowParseDeclareOpaqueType(node) {\n    this.next();\n    this.flowParseOpaqueType(node, true);\n    node.type = \"DeclareOpaqueType\";\n    return node;\n  }\n\n  flowParseDeclareInterface(node) {\n    this.next();\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"DeclareInterface\");\n  }\n\n  flowParseInterfaceish(node, isClass = false) {\n    node.id = this.flowParseRestrictedIdentifier(!isClass, true);\n    this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.extends = [];\n    node.implements = [];\n    node.mixins = [];\n\n    if (this.eat(types._extends)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (!isClass && this.eat(types.comma));\n    }\n\n    if (this.isContextual(\"mixins\")) {\n      this.next();\n\n      do {\n        node.mixins.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types.comma));\n    }\n\n    if (this.isContextual(\"implements\")) {\n      this.next();\n\n      do {\n        node.implements.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types.comma));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: isClass,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: isClass,\n      allowInexact: false\n    });\n  }\n\n  flowParseInterfaceExtends() {\n    const node = this.startNode();\n    node.id = this.flowParseQualifiedTypeIdentifier();\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    } else {\n      node.typeParameters = null;\n    }\n\n    return this.finishNode(node, \"InterfaceExtends\");\n  }\n\n  flowParseInterface(node) {\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"InterfaceDeclaration\");\n  }\n\n  checkNotUnderscore(word) {\n    if (word === \"_\") {\n      this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);\n    }\n  }\n\n  checkReservedType(word, startLoc, declaration) {\n    if (!reservedTypes.has(word)) return;\n    this.raise(startLoc, declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, word);\n  }\n\n  flowParseRestrictedIdentifier(liberal, declaration) {\n    this.checkReservedType(this.state.value, this.state.start, declaration);\n    return this.parseIdentifier(liberal);\n  }\n\n  flowParseTypeAlias(node) {\n    node.id = this.flowParseRestrictedIdentifier(false, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.right = this.flowParseTypeInitialiser(types.eq);\n    this.semicolon();\n    return this.finishNode(node, \"TypeAlias\");\n  }\n\n  flowParseOpaqueType(node, declare) {\n    this.expectContextual(\"type\");\n    node.id = this.flowParseRestrictedIdentifier(true, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.supertype = null;\n\n    if (this.match(types.colon)) {\n      node.supertype = this.flowParseTypeInitialiser(types.colon);\n    }\n\n    node.impltype = null;\n\n    if (!declare) {\n      node.impltype = this.flowParseTypeInitialiser(types.eq);\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"OpaqueType\");\n  }\n\n  flowParseTypeParameter(requireDefault = false) {\n    const nodeStart = this.state.start;\n    const node = this.startNode();\n    const variance = this.flowParseVariance();\n    const ident = this.flowParseTypeAnnotatableIdentifier();\n    node.name = ident.name;\n    node.variance = variance;\n    node.bound = ident.typeAnnotation;\n\n    if (this.match(types.eq)) {\n      this.eat(types.eq);\n      node.default = this.flowParseType();\n    } else {\n      if (requireDefault) {\n        this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);\n      }\n    }\n\n    return this.finishNode(node, \"TypeParameter\");\n  }\n\n  flowParseTypeParameterDeclaration() {\n    const oldInType = this.state.inType;\n    const node = this.startNode();\n    node.params = [];\n    this.state.inType = true;\n\n    if (this.isRelational(\"<\") || this.match(types.jsxTagStart)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    let defaultRequired = false;\n\n    do {\n      const typeParameter = this.flowParseTypeParameter(defaultRequired);\n      node.params.push(typeParameter);\n\n      if (typeParameter.default) {\n        defaultRequired = true;\n      }\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types.comma);\n      }\n    } while (!this.isRelational(\">\"));\n\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterDeclaration\");\n  }\n\n  flowParseTypeParameterInstantiation() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expectRelational(\"<\");\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n    this.state.noAnonFunctionType = false;\n\n    while (!this.isRelational(\">\")) {\n      node.params.push(this.flowParseType());\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types.comma);\n      }\n    }\n\n    this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseTypeParameterInstantiationCallOrNew() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expectRelational(\"<\");\n\n    while (!this.isRelational(\">\")) {\n      node.params.push(this.flowParseTypeOrImplicitInstantiation());\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types.comma);\n      }\n    }\n\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseInterfaceType() {\n    const node = this.startNode();\n    this.expectContextual(\"interface\");\n    node.extends = [];\n\n    if (this.eat(types._extends)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types.comma));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: false,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: false,\n      allowInexact: false\n    });\n    return this.finishNode(node, \"InterfaceTypeAnnotation\");\n  }\n\n  flowParseObjectPropertyKey() {\n    return this.match(types.num) || this.match(types.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n  }\n\n  flowParseObjectTypeIndexer(node, isStatic, variance) {\n    node.static = isStatic;\n\n    if (this.lookahead().type === types.colon) {\n      node.id = this.flowParseObjectPropertyKey();\n      node.key = this.flowParseTypeInitialiser();\n    } else {\n      node.id = null;\n      node.key = this.flowParseType();\n    }\n\n    this.expect(types.bracketR);\n    node.value = this.flowParseTypeInitialiser();\n    node.variance = variance;\n    return this.finishNode(node, \"ObjectTypeIndexer\");\n  }\n\n  flowParseObjectTypeInternalSlot(node, isStatic) {\n    node.static = isStatic;\n    node.id = this.flowParseObjectPropertyKey();\n    this.expect(types.bracketR);\n    this.expect(types.bracketR);\n\n    if (this.isRelational(\"<\") || this.match(types.parenL)) {\n      node.method = true;\n      node.optional = false;\n      node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n    } else {\n      node.method = false;\n\n      if (this.eat(types.question)) {\n        node.optional = true;\n      }\n\n      node.value = this.flowParseTypeInitialiser();\n    }\n\n    return this.finishNode(node, \"ObjectTypeInternalSlot\");\n  }\n\n  flowParseObjectTypeMethodish(node) {\n    node.params = [];\n    node.rest = null;\n    node.typeParameters = null;\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    this.expect(types.parenL);\n\n    while (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n      node.params.push(this.flowParseFunctionTypeParam());\n\n      if (!this.match(types.parenR)) {\n        this.expect(types.comma);\n      }\n    }\n\n    if (this.eat(types.ellipsis)) {\n      node.rest = this.flowParseFunctionTypeParam();\n    }\n\n    this.expect(types.parenR);\n    node.returnType = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"FunctionTypeAnnotation\");\n  }\n\n  flowParseObjectTypeCallProperty(node, isStatic) {\n    const valueNode = this.startNode();\n    node.static = isStatic;\n    node.value = this.flowParseObjectTypeMethodish(valueNode);\n    return this.finishNode(node, \"ObjectTypeCallProperty\");\n  }\n\n  flowParseObjectType({\n    allowStatic,\n    allowExact,\n    allowSpread,\n    allowProto,\n    allowInexact\n  }) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const nodeStart = this.startNode();\n    nodeStart.callProperties = [];\n    nodeStart.properties = [];\n    nodeStart.indexers = [];\n    nodeStart.internalSlots = [];\n    let endDelim;\n    let exact;\n    let inexact = false;\n\n    if (allowExact && this.match(types.braceBarL)) {\n      this.expect(types.braceBarL);\n      endDelim = types.braceBarR;\n      exact = true;\n    } else {\n      this.expect(types.braceL);\n      endDelim = types.braceR;\n      exact = false;\n    }\n\n    nodeStart.exact = exact;\n\n    while (!this.match(endDelim)) {\n      let isStatic = false;\n      let protoStart = null;\n      let inexactStart = null;\n      const node = this.startNode();\n\n      if (allowProto && this.isContextual(\"proto\")) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== types.colon && lookahead.type !== types.question) {\n          this.next();\n          protoStart = this.state.start;\n          allowStatic = false;\n        }\n      }\n\n      if (allowStatic && this.isContextual(\"static\")) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== types.colon && lookahead.type !== types.question) {\n          this.next();\n          isStatic = true;\n        }\n      }\n\n      const variance = this.flowParseVariance();\n\n      if (this.eat(types.bracketL)) {\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (this.eat(types.bracketL)) {\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\n        } else {\n          nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n        }\n      } else if (this.match(types.parenL) || this.isRelational(\"<\")) {\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.unexpected(variance.start);\n        }\n\n        nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n      } else {\n        let kind = \"init\";\n\n        if (this.isContextual(\"get\") || this.isContextual(\"set\")) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type === types.name || lookahead.type === types.string || lookahead.type === types.num) {\n            kind = this.state.value;\n            this.next();\n          }\n        }\n\n        const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);\n\n        if (propOrInexact === null) {\n          inexact = true;\n          inexactStart = this.state.lastTokStart;\n        } else {\n          nodeStart.properties.push(propOrInexact);\n        }\n      }\n\n      this.flowObjectTypeSemicolon();\n\n      if (inexactStart && !this.match(types.braceR) && !this.match(types.braceBarR)) {\n        this.raise(inexactStart, FlowErrors.UnexpectedExplicitInexactInObject);\n      }\n    }\n\n    this.expect(endDelim);\n\n    if (allowSpread) {\n      nodeStart.inexact = inexact;\n    }\n\n    const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n    this.state.inType = oldInType;\n    return out;\n  }\n\n  flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact) {\n    if (this.eat(types.ellipsis)) {\n      const isInexactToken = this.match(types.comma) || this.match(types.semi) || this.match(types.braceR) || this.match(types.braceBarR);\n\n      if (isInexactToken) {\n        if (!allowSpread) {\n          this.raise(this.state.lastTokStart, FlowErrors.InexactInsideNonObject);\n        } else if (!allowInexact) {\n          this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);\n        }\n\n        if (variance) {\n          this.raise(variance.start, FlowErrors.InexactVariance);\n        }\n\n        return null;\n      }\n\n      if (!allowSpread) {\n        this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);\n      }\n\n      if (protoStart != null) {\n        this.unexpected(protoStart);\n      }\n\n      if (variance) {\n        this.raise(variance.start, FlowErrors.SpreadVariance);\n      }\n\n      node.argument = this.flowParseType();\n      return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n    } else {\n      node.key = this.flowParseObjectPropertyKey();\n      node.static = isStatic;\n      node.proto = protoStart != null;\n      node.kind = kind;\n      let optional = false;\n\n      if (this.isRelational(\"<\") || this.match(types.parenL)) {\n        node.method = true;\n\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.unexpected(variance.start);\n        }\n\n        node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n\n        if (kind === \"get\" || kind === \"set\") {\n          this.flowCheckGetterSetterParams(node);\n        }\n      } else {\n        if (kind !== \"init\") this.unexpected();\n        node.method = false;\n\n        if (this.eat(types.question)) {\n          optional = true;\n        }\n\n        node.value = this.flowParseTypeInitialiser();\n        node.variance = variance;\n      }\n\n      node.optional = optional;\n      return this.finishNode(node, \"ObjectTypeProperty\");\n    }\n  }\n\n  flowCheckGetterSetterParams(property) {\n    const paramCount = property.kind === \"get\" ? 0 : 1;\n    const start = property.start;\n    const length = property.value.params.length + (property.value.rest ? 1 : 0);\n\n    if (length !== paramCount) {\n      if (property.kind === \"get\") {\n        this.raise(start, Errors.BadGetterArity);\n      } else {\n        this.raise(start, Errors.BadSetterArity);\n      }\n    }\n\n    if (property.kind === \"set\" && property.value.rest) {\n      this.raise(start, Errors.BadSetterRestParameter);\n    }\n  }\n\n  flowObjectTypeSemicolon() {\n    if (!this.eat(types.semi) && !this.eat(types.comma) && !this.match(types.braceR) && !this.match(types.braceBarR)) {\n      this.unexpected();\n    }\n  }\n\n  flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n    let node = id || this.flowParseRestrictedIdentifier(true);\n\n    while (this.eat(types.dot)) {\n      const node2 = this.startNodeAt(startPos, startLoc);\n      node2.qualification = node;\n      node2.id = this.flowParseRestrictedIdentifier(true);\n      node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n    }\n\n    return node;\n  }\n\n  flowParseGenericType(startPos, startLoc, id) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.typeParameters = null;\n    node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    return this.finishNode(node, \"GenericTypeAnnotation\");\n  }\n\n  flowParseTypeofType() {\n    const node = this.startNode();\n    this.expect(types._typeof);\n    node.argument = this.flowParsePrimaryType();\n    return this.finishNode(node, \"TypeofTypeAnnotation\");\n  }\n\n  flowParseTupleType() {\n    const node = this.startNode();\n    node.types = [];\n    this.expect(types.bracketL);\n\n    while (this.state.pos < this.length && !this.match(types.bracketR)) {\n      node.types.push(this.flowParseType());\n      if (this.match(types.bracketR)) break;\n      this.expect(types.comma);\n    }\n\n    this.expect(types.bracketR);\n    return this.finishNode(node, \"TupleTypeAnnotation\");\n  }\n\n  flowParseFunctionTypeParam() {\n    let name = null;\n    let optional = false;\n    let typeAnnotation = null;\n    const node = this.startNode();\n    const lh = this.lookahead();\n\n    if (lh.type === types.colon || lh.type === types.question) {\n      name = this.parseIdentifier();\n\n      if (this.eat(types.question)) {\n        optional = true;\n      }\n\n      typeAnnotation = this.flowParseTypeInitialiser();\n    } else {\n      typeAnnotation = this.flowParseType();\n    }\n\n    node.name = name;\n    node.optional = optional;\n    node.typeAnnotation = typeAnnotation;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  reinterpretTypeAsFunctionTypeParam(type) {\n    const node = this.startNodeAt(type.start, type.loc.start);\n    node.name = null;\n    node.optional = false;\n    node.typeAnnotation = type;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  flowParseFunctionTypeParams(params = []) {\n    let rest = null;\n\n    while (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n      params.push(this.flowParseFunctionTypeParam());\n\n      if (!this.match(types.parenR)) {\n        this.expect(types.comma);\n      }\n    }\n\n    if (this.eat(types.ellipsis)) {\n      rest = this.flowParseFunctionTypeParam();\n    }\n\n    return {\n      params,\n      rest\n    };\n  }\n\n  flowIdentToTypeAnnotation(startPos, startLoc, node, id) {\n    switch (id.name) {\n      case \"any\":\n        return this.finishNode(node, \"AnyTypeAnnotation\");\n\n      case \"bool\":\n      case \"boolean\":\n        return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n      case \"mixed\":\n        return this.finishNode(node, \"MixedTypeAnnotation\");\n\n      case \"empty\":\n        return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n      case \"number\":\n        return this.finishNode(node, \"NumberTypeAnnotation\");\n\n      case \"string\":\n        return this.finishNode(node, \"StringTypeAnnotation\");\n\n      case \"symbol\":\n        return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n      default:\n        this.checkNotUnderscore(id.name);\n        return this.flowParseGenericType(startPos, startLoc, id);\n    }\n  }\n\n  flowParsePrimaryType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const node = this.startNode();\n    let tmp;\n    let type;\n    let isGroupedType = false;\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n    switch (this.state.type) {\n      case types.name:\n        if (this.isContextual(\"interface\")) {\n          return this.flowParseInterfaceType();\n        }\n\n        return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());\n\n      case types.braceL:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: false,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: true\n        });\n\n      case types.braceBarL:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: true,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: false\n        });\n\n      case types.bracketL:\n        this.state.noAnonFunctionType = false;\n        type = this.flowParseTupleType();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        return type;\n\n      case types.relational:\n        if (this.state.value === \"<\") {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(types.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          this.expect(types.parenR);\n          this.expect(types.arrow);\n          node.returnType = this.flowParseType();\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        break;\n\n      case types.parenL:\n        this.next();\n\n        if (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n          if (this.match(types.name)) {\n            const token = this.lookahead().type;\n            isGroupedType = token !== types.question && token !== types.colon;\n          } else {\n            isGroupedType = true;\n          }\n        }\n\n        if (isGroupedType) {\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.state.noAnonFunctionType || !(this.match(types.comma) || this.match(types.parenR) && this.lookahead().type === types.arrow)) {\n            this.expect(types.parenR);\n            return type;\n          } else {\n            this.eat(types.comma);\n          }\n        }\n\n        if (type) {\n          tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n        } else {\n          tmp = this.flowParseFunctionTypeParams();\n        }\n\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        this.expect(types.parenR);\n        this.expect(types.arrow);\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n      case types.string:\n        return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n\n      case types._true:\n      case types._false:\n        node.value = this.match(types._true);\n        this.next();\n        return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n      case types.plusMin:\n        if (this.state.value === \"-\") {\n          this.next();\n\n          if (this.match(types.num)) {\n            return this.parseLiteral(-this.state.value, \"NumberLiteralTypeAnnotation\", node.start, node.loc.start);\n          }\n\n          if (this.match(types.bigint)) {\n            return this.parseLiteral(-this.state.value, \"BigIntLiteralTypeAnnotation\", node.start, node.loc.start);\n          }\n\n          throw this.raise(this.state.start, FlowErrors.UnexpectedSubtractionOperand);\n        }\n\n        throw this.unexpected();\n\n      case types.num:\n        return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n\n      case types.bigint:\n        return this.parseLiteral(this.state.value, \"BigIntLiteralTypeAnnotation\");\n\n      case types._void:\n        this.next();\n        return this.finishNode(node, \"VoidTypeAnnotation\");\n\n      case types._null:\n        this.next();\n        return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n      case types._this:\n        this.next();\n        return this.finishNode(node, \"ThisTypeAnnotation\");\n\n      case types.star:\n        this.next();\n        return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n      default:\n        if (this.state.type.keyword === \"typeof\") {\n          return this.flowParseTypeofType();\n        } else if (this.state.type.keyword) {\n          const label = this.state.type.label;\n          this.next();\n          return super.createIdentifier(node, label);\n        }\n\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParsePostfixType() {\n    const startPos = this.state.start,\n          startLoc = this.state.startLoc;\n    let type = this.flowParsePrimaryType();\n\n    while (this.match(types.bracketL) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.elementType = type;\n      this.expect(types.bracketL);\n      this.expect(types.bracketR);\n      type = this.finishNode(node, \"ArrayTypeAnnotation\");\n    }\n\n    return type;\n  }\n\n  flowParsePrefixType() {\n    const node = this.startNode();\n\n    if (this.eat(types.question)) {\n      node.typeAnnotation = this.flowParsePrefixType();\n      return this.finishNode(node, \"NullableTypeAnnotation\");\n    } else {\n      return this.flowParsePostfixType();\n    }\n  }\n\n  flowParseAnonFunctionWithoutParens() {\n    const param = this.flowParsePrefixType();\n\n    if (!this.state.noAnonFunctionType && this.eat(types.arrow)) {\n      const node = this.startNodeAt(param.start, param.loc.start);\n      node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n      node.rest = null;\n      node.returnType = this.flowParseType();\n      node.typeParameters = null;\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    return param;\n  }\n\n  flowParseIntersectionType() {\n    const node = this.startNode();\n    this.eat(types.bitwiseAND);\n    const type = this.flowParseAnonFunctionWithoutParens();\n    node.types = [type];\n\n    while (this.eat(types.bitwiseAND)) {\n      node.types.push(this.flowParseAnonFunctionWithoutParens());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n  }\n\n  flowParseUnionType() {\n    const node = this.startNode();\n    this.eat(types.bitwiseOR);\n    const type = this.flowParseIntersectionType();\n    node.types = [type];\n\n    while (this.eat(types.bitwiseOR)) {\n      node.types.push(this.flowParseIntersectionType());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n  }\n\n  flowParseType() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const type = this.flowParseUnionType();\n    this.state.inType = oldInType;\n    this.state.exprAllowed = this.state.exprAllowed || this.state.noAnonFunctionType;\n    return type;\n  }\n\n  flowParseTypeOrImplicitInstantiation() {\n    if (this.state.type === types.name && this.state.value === \"_\") {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.parseIdentifier();\n      return this.flowParseGenericType(startPos, startLoc, node);\n    } else {\n      return this.flowParseType();\n    }\n  }\n\n  flowParseTypeAnnotation() {\n    const node = this.startNode();\n    node.typeAnnotation = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"TypeAnnotation\");\n  }\n\n  flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n    const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n\n    if (this.match(types.colon)) {\n      ident.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(ident);\n    }\n\n    return ident;\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  flowParseVariance() {\n    let variance = null;\n\n    if (this.match(types.plusMin)) {\n      variance = this.startNode();\n\n      if (this.state.value === \"+\") {\n        variance.kind = \"plus\";\n      } else {\n        variance.kind = \"minus\";\n      }\n\n      this.next();\n      this.finishNode(variance, \"Variance\");\n    }\n\n    return variance;\n  }\n\n  parseFunctionBody(node, allowExpressionBody, isMethod = false) {\n    if (allowExpressionBody) {\n      return this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));\n    }\n\n    return super.parseFunctionBody(node, false, isMethod);\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(types.colon)) {\n      const typeNode = this.startNode();\n      [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n      node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.state.strict && this.match(types.name) && this.state.value === \"interface\") {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseInterface(node);\n    } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    } else {\n      const stmt = super.parseStatement(context, topLevel);\n\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n\n      return stmt;\n    }\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type === \"Identifier\") {\n      if (expr.name === \"declare\") {\n        if (this.match(types._class) || this.match(types.name) || this.match(types._function) || this.match(types._var) || this.match(types._export)) {\n          return this.flowParseDeclare(node);\n        }\n      } else if (this.match(types.name)) {\n        if (expr.name === \"interface\") {\n          return this.flowParseInterface(node);\n        } else if (expr.name === \"type\") {\n          return this.flowParseTypeAlias(node);\n        } else if (expr.name === \"opaque\") {\n          return this.flowParseOpaqueType(node, false);\n        }\n      }\n    }\n\n    return super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    return this.isContextual(\"type\") || this.isContextual(\"interface\") || this.isContextual(\"opaque\") || this.shouldParseEnums() && this.isContextual(\"enum\") || super.shouldParseExportDeclaration();\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types.name) && (this.state.value === \"type\" || this.state.value === \"interface\" || this.state.value === \"opaque\" || this.shouldParseEnums() && this.state.value === \"enum\")) {\n      return false;\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseExportDefaultExpression() {\n    if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseConditional(expr, noIn, startPos, startLoc, refNeedsArrowPos) {\n    if (!this.match(types.question)) return expr;\n\n    if (refNeedsArrowPos) {\n      const result = this.tryParse(() => super.parseConditional(expr, noIn, startPos, startLoc));\n\n      if (!result.node) {\n        refNeedsArrowPos.start = result.error.pos || this.state.start;\n        return expr;\n      }\n\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    this.expect(types.question);\n    const state = this.state.clone();\n    const originalNoArrowAt = this.state.noArrowAt;\n    const node = this.startNodeAt(startPos, startLoc);\n    let {\n      consequent,\n      failed\n    } = this.tryParseConditionalConsequent();\n    let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n    if (failed || invalid.length > 0) {\n      const noArrowAt = [...originalNoArrowAt];\n\n      if (invalid.length > 0) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt;\n\n        for (let i = 0; i < invalid.length; i++) {\n          noArrowAt.push(invalid[i].start);\n        }\n\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n        [valid, invalid] = this.getArrowLikeExpressions(consequent);\n      }\n\n      if (failed && valid.length > 1) {\n        this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);\n      }\n\n      if (failed && valid.length === 1) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt.concat(valid[0].start);\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n      }\n    }\n\n    this.getArrowLikeExpressions(consequent, true);\n    this.state.noArrowAt = originalNoArrowAt;\n    this.expect(types.colon);\n    node.test = expr;\n    node.consequent = consequent;\n    node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(noIn, undefined, undefined, undefined));\n    return this.finishNode(node, \"ConditionalExpression\");\n  }\n\n  tryParseConditionalConsequent() {\n    this.state.noArrowParamsConversionAt.push(this.state.start);\n    const consequent = this.parseMaybeAssign();\n    const failed = !this.match(types.colon);\n    this.state.noArrowParamsConversionAt.pop();\n    return {\n      consequent,\n      failed\n    };\n  }\n\n  getArrowLikeExpressions(node, disallowInvalid) {\n    const stack = [node];\n    const arrows = [];\n\n    while (stack.length !== 0) {\n      const node = stack.pop();\n\n      if (node.type === \"ArrowFunctionExpression\") {\n        if (node.typeParameters || !node.returnType) {\n          this.finishArrowValidation(node);\n        } else {\n          arrows.push(node);\n        }\n\n        stack.push(node.body);\n      } else if (node.type === \"ConditionalExpression\") {\n        stack.push(node.consequent);\n        stack.push(node.alternate);\n      }\n    }\n\n    if (disallowInvalid) {\n      arrows.forEach(node => this.finishArrowValidation(node));\n      return [arrows, []];\n    }\n\n    return partition(arrows, node => node.params.every(param => this.isAssignable(param, true)));\n  }\n\n  finishArrowValidation(node) {\n    var _node$extra;\n\n    this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingComma);\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    super.checkParams(node, false, true);\n    this.scope.exit();\n  }\n\n  forwardNoArrowParamsConversionAt(node, parse) {\n    let result;\n\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n      result = parse();\n      this.state.noArrowParamsConversionAt.pop();\n    } else {\n      result = parse();\n    }\n\n    return result;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(types.question)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(types.colon)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\n      return;\n    }\n\n    super.assertModuleNodeAllowed(node);\n  }\n\n  parseExport(node) {\n    const decl = super.parseExport(node);\n\n    if (decl.type === \"ExportNamedDeclaration\" || decl.type === \"ExportAllDeclaration\") {\n      decl.exportKind = decl.exportKind || \"value\";\n    }\n\n    return decl;\n  }\n\n  parseExportDeclaration(node) {\n    if (this.isContextual(\"type\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n\n      if (this.match(types.braceL)) {\n        node.specifiers = this.parseExportSpecifiers();\n        this.parseExportFrom(node);\n        return null;\n      } else {\n        return this.flowParseTypeAlias(declarationNode);\n      }\n    } else if (this.isContextual(\"opaque\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseOpaqueType(declarationNode, false);\n    } else if (this.isContextual(\"interface\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseInterface(declarationNode);\n    } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      node.exportKind = \"value\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(declarationNode);\n    } else {\n      return super.parseExportDeclaration(node);\n    }\n  }\n\n  eatExportStar(node) {\n    if (super.eatExportStar(...arguments)) return true;\n\n    if (this.isContextual(\"type\") && this.lookahead().type === types.star) {\n      node.exportKind = \"type\";\n      this.next();\n      this.next();\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    const pos = this.state.start;\n    const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n\n    if (hasNamespace && node.exportKind === \"type\") {\n      this.unexpected(pos);\n    }\n\n    return hasNamespace;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    super.parseClassId(node, isStatement, optionalId);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n  }\n\n  parseClassMember(classBody, member, state, constructorAllowsSuper) {\n    const pos = this.state.start;\n\n    if (this.isContextual(\"declare\")) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      member.declare = true;\n    }\n\n    super.parseClassMember(classBody, member, state, constructorAllowsSuper);\n\n    if (member.declare) {\n      if (member.type !== \"ClassProperty\" && member.type !== \"ClassPrivateProperty\") {\n        this.raise(pos, FlowErrors.DeclareClassElement);\n      } else if (member.value) {\n        this.raise(member.value.start, FlowErrors.DeclareClassFieldInitializer);\n      }\n    }\n  }\n\n  getTokenFromCode(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 123 && next === 124) {\n      return this.finishOp(types.braceBarL, 2);\n    } else if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(types.relational, 1);\n    } else if (isIteratorStart(code, next)) {\n      this.state.isIterator = true;\n      return super.readWord();\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n        return true;\n\n      case \"ObjectExpression\":\n        {\n          const last = node.properties.length - 1;\n          return node.properties.every((prop, i) => {\n            return prop.type !== \"ObjectMethod\" && (i === last || prop.type === \"SpreadElement\") && this.isAssignable(prop);\n          });\n        }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(element => this.isAssignable(element));\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n      case \"TypeCastExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  toAssignable(node) {\n    if (node.type === \"TypeCastExpression\") {\n      return super.toAssignable(this.typeCastToParameter(node));\n    } else {\n      return super.toAssignable(node);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n\n      if (expr && expr.type === \"TypeCastExpression\") {\n        exprList[i] = this.typeCastToParameter(expr);\n      }\n    }\n\n    return super.toAssignableList(exprList, trailingCommaPos);\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n\n      if (expr && expr.type === \"TypeCastExpression\" && (!expr.extra || !expr.extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\n        this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);\n      }\n    }\n\n    return exprList;\n  }\n\n  checkLVal(expr, bindingType = BIND_NONE, checkClashes, contextDescription) {\n    if (expr.type !== \"TypeCastExpression\") {\n      return super.checkLVal(expr, bindingType, checkClashes, contextDescription);\n    }\n  }\n\n  parseClassProperty(node) {\n    if (this.match(types.colon)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (this.match(types.colon)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassPrivateProperty(node);\n  }\n\n  isClassMethod() {\n    return this.isRelational(\"<\") || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(types.colon) || super.isClassProperty();\n  }\n\n  isNonstaticConstructor(method) {\n    return !this.match(types.colon) && super.isNonstaticConstructor(method);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    if (method.variance) {\n      this.unexpected(method.variance.start);\n    }\n\n    delete method.variance;\n\n    if (this.isRelational(\"<\")) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    if (method.variance) {\n      this.unexpected(method.variance.start);\n    }\n\n    delete method.variance;\n\n    if (this.isRelational(\"<\")) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.isRelational(\"<\")) {\n      node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    if (this.isContextual(\"implements\")) {\n      this.next();\n      const implemented = node.implements = [];\n\n      do {\n        const node = this.startNode();\n        node.id = this.flowParseRestrictedIdentifier(true);\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterInstantiation();\n        } else {\n          node.typeParameters = null;\n        }\n\n        implemented.push(this.finishNode(node, \"ClassImplements\"));\n      } while (this.eat(types.comma));\n    }\n  }\n\n  parsePropertyName(node, isPrivateNameAllowed) {\n    const variance = this.flowParseVariance();\n    const key = super.parsePropertyName(node, isPrivateNameAllowed);\n    node.variance = variance;\n    return key;\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refExpressionErrors, containsEsc) {\n    if (prop.variance) {\n      this.unexpected(prop.variance.start);\n    }\n\n    delete prop.variance;\n    let typeParameters;\n\n    if (this.isRelational(\"<\")) {\n      typeParameters = this.flowParseTypeParameterDeclaration();\n      if (!this.match(types.parenL)) this.unexpected();\n    }\n\n    super.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refExpressionErrors, containsEsc);\n\n    if (typeParameters) {\n      (prop.value || prop).typeParameters = typeParameters;\n    }\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(types.question)) {\n      if (param.type !== \"Identifier\") {\n        this.raise(param.start, FlowErrors.OptionalBindingPattern);\n      }\n\n      param.optional = true;\n    }\n\n    if (this.match(types.colon)) {\n      param.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);\n    }\n\n    return node;\n  }\n\n  shouldParseDefaultImport(node) {\n    if (!hasTypeImportKind(node)) {\n      return super.shouldParseDefaultImport(node);\n    }\n\n    return isMaybeDefaultImport(this.state);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();\n    this.checkLVal(specifier.local, BIND_LEXICAL, undefined, contextDescription);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    node.importKind = \"value\";\n    let kind = null;\n\n    if (this.match(types._typeof)) {\n      kind = \"typeof\";\n    } else if (this.isContextual(\"type\")) {\n      kind = \"type\";\n    }\n\n    if (kind) {\n      const lh = this.lookahead();\n\n      if (kind === \"type\" && lh.type === types.star) {\n        this.unexpected(lh.start);\n      }\n\n      if (isMaybeDefaultImport(lh) || lh.type === types.braceL || lh.type === types.star) {\n        this.next();\n        node.importKind = kind;\n      }\n    }\n\n    return super.maybeParseDefaultImportSpecifier(node);\n  }\n\n  parseImportSpecifier(node) {\n    const specifier = this.startNode();\n    const firstIdentLoc = this.state.start;\n    const firstIdent = this.parseIdentifier(true);\n    let specifierTypeKind = null;\n\n    if (firstIdent.name === \"type\") {\n      specifierTypeKind = \"type\";\n    } else if (firstIdent.name === \"typeof\") {\n      specifierTypeKind = \"typeof\";\n    }\n\n    let isBinding = false;\n\n    if (this.isContextual(\"as\") && !this.isLookaheadContextual(\"as\")) {\n      const as_ident = this.parseIdentifier(true);\n\n      if (specifierTypeKind !== null && !this.match(types.name) && !this.state.type.keyword) {\n        specifier.imported = as_ident;\n        specifier.importKind = specifierTypeKind;\n        specifier.local = as_ident.__clone();\n      } else {\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = this.parseIdentifier();\n      }\n    } else if (specifierTypeKind !== null && (this.match(types.name) || this.state.type.keyword)) {\n      specifier.imported = this.parseIdentifier(true);\n      specifier.importKind = specifierTypeKind;\n\n      if (this.eatContextual(\"as\")) {\n        specifier.local = this.parseIdentifier();\n      } else {\n        isBinding = true;\n        specifier.local = specifier.imported.__clone();\n      }\n    } else {\n      isBinding = true;\n      specifier.imported = firstIdent;\n      specifier.importKind = null;\n      specifier.local = specifier.imported.__clone();\n    }\n\n    const nodeIsTypeImport = hasTypeImportKind(node);\n    const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n    if (nodeIsTypeImport && specifierIsTypeImport) {\n      this.raise(firstIdentLoc, FlowErrors.ImportTypeShorthandOnlyInPureImport);\n    }\n\n    if (nodeIsTypeImport || specifierIsTypeImport) {\n      this.checkReservedType(specifier.local.name, specifier.local.start, true);\n    }\n\n    if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {\n      this.checkReservedWord(specifier.local.name, specifier.start, true, true);\n    }\n\n    this.checkLVal(specifier.local, BIND_LEXICAL, undefined, \"import specifier\");\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const kind = node.kind;\n\n    if (kind !== \"get\" && kind !== \"set\" && this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (this.match(types.colon)) {\n      decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(types.colon)) {\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = true;\n      node.returnType = this.flowParseTypeAnnotation();\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types.colon) || super.shouldParseAsyncArrow();\n  }\n\n  parseMaybeAssign(noIn, refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    let state = null;\n    let jsx;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(types.jsxTagStart) || this.isRelational(\"<\"))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(noIn, refExpressionErrors, afterLeftParse, refNeedsArrowPos), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n\n      if (context[context.length - 1] === types$1.j_oTag) {\n        context.length -= 2;\n      } else if (context[context.length - 1] === types$1.j_expr) {\n        context.length -= 1;\n      }\n    }\n\n    if (jsx && jsx.error || this.isRelational(\"<\")) {\n      state = state || this.state.clone();\n      let typeParameters;\n      const arrow = this.tryParse(() => {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => super.parseMaybeAssign(noIn, refExpressionErrors, afterLeftParse, refNeedsArrowPos));\n        arrowExpression.typeParameters = typeParameters;\n        this.resetStartLocationFromNode(arrowExpression, typeParameters);\n        return arrowExpression;\n      }, state);\n      const arrowExpression = arrow.node && arrow.node.type === \"ArrowFunctionExpression\" ? arrow.node : null;\n      if (!arrow.error && arrowExpression) return arrowExpression;\n\n      if (jsx && jsx.node) {\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrowExpression) {\n        this.state = arrow.failState;\n        return arrowExpression;\n      }\n\n      if (jsx && jsx.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      throw this.raise(typeParameters.start, FlowErrors.UnexpectedTokenAfterTypeParameter);\n    }\n\n    return super.parseMaybeAssign(noIn, refExpressionErrors, afterLeftParse, refNeedsArrowPos);\n  }\n\n  parseArrow(node) {\n    if (this.match(types.colon)) {\n      const result = this.tryParse(() => {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        const typeNode = this.startNode();\n        [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        if (this.canInsertSemicolon()) this.unexpected();\n        if (!this.match(types.arrow)) this.unexpected();\n        return typeNode;\n      });\n      if (result.thrown) return null;\n      if (result.error) this.state = result.failState;\n      node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, \"TypeAnnotation\") : null;\n    }\n\n    return super.parseArrow(node);\n  }\n\n  shouldParseArrow() {\n    return this.match(types.colon) || super.shouldParseArrow();\n  }\n\n  setArrowFunctionParameters(node, params) {\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      node.params = params;\n    } else {\n      super.setArrowFunctionParameters(node, params);\n    }\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction) {\n    if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      return;\n    }\n\n    return super.checkParams(...arguments);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.indexOf(startPos) !== -1) {\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n      base = this.finishNode(node, \"CallExpression\");\n    } else if (base.type === \"Identifier\" && base.name === \"async\" && this.isRelational(\"<\")) {\n      const state = this.state.clone();\n      const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort(), state);\n      if (!arrow.error && !arrow.aborted) return arrow.node;\n      const result = this.tryParse(() => super.parseSubscripts(base, startPos, startLoc, noCalls), state);\n      if (result.node && !result.error) return result.node;\n\n      if (arrow.node) {\n        this.state = arrow.failState;\n        return arrow.node;\n      }\n\n      if (result.node) {\n        this.state = result.failState;\n        return result.node;\n      }\n\n      throw arrow.error || result.error;\n    }\n\n    return super.parseSubscripts(base, startPos, startLoc, noCalls);\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {\n    if (this.match(types.questionDot) && this.isLookaheadRelational(\"<\")) {\n      subscriptState.optionalChainMember = true;\n\n      if (noCalls) {\n        subscriptState.stop = true;\n        return base;\n      }\n\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.typeArguments = this.flowParseTypeParameterInstantiation();\n      this.expect(types.parenL);\n      node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n      node.optional = true;\n      return this.finishCallExpression(node, true);\n    } else if (!noCalls && this.shouldParseTypes() && this.isRelational(\"<\")) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      const result = this.tryParse(() => {\n        node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n        this.expect(types.parenL);\n        node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n        if (subscriptState.optionalChainMember) node.optional = false;\n        return this.finishCallExpression(node, subscriptState.optionalChainMember);\n      });\n\n      if (result.node) {\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, subscriptState);\n  }\n\n  parseNewArguments(node) {\n    let targs = null;\n\n    if (this.shouldParseTypes() && this.isRelational(\"<\")) {\n      targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;\n    }\n\n    node.typeArguments = targs;\n    super.parseNewArguments(node);\n  }\n\n  parseAsyncArrowWithTypeParameters(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.parseFunctionParams(node);\n    if (!this.parseArrow(node)) return;\n    return this.parseArrowExpression(node, undefined, true);\n  }\n\n  readToken_mult_modulo(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 42 && next === 47 && this.state.hasFlowComment) {\n      this.state.hasFlowComment = false;\n      this.state.pos += 2;\n      this.nextToken();\n      return;\n    }\n\n    super.readToken_mult_modulo(code);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 124 && next === 125) {\n      this.finishOp(types.braceBarR, 2);\n      return;\n    }\n\n    super.readToken_pipe_amp(code);\n  }\n\n  parseTopLevel(file, program) {\n    const fileNode = super.parseTopLevel(file, program);\n\n    if (this.state.hasFlowComment) {\n      this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);\n    }\n\n    return fileNode;\n  }\n\n  skipBlockComment() {\n    if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n      if (this.state.hasFlowComment) {\n        this.unexpected(null, FlowErrors.NestedFlowComment);\n      }\n\n      this.hasFlowCommentCompletion();\n      this.state.pos += this.skipFlowComment();\n      this.state.hasFlowComment = true;\n      return;\n    }\n\n    if (this.state.hasFlowComment) {\n      const end = this.input.indexOf(\"*-/\", this.state.pos += 2);\n\n      if (end === -1) {\n        throw this.raise(this.state.pos - 2, Errors.UnterminatedComment);\n      }\n\n      this.state.pos = end + 3;\n      return;\n    }\n\n    super.skipBlockComment();\n  }\n\n  skipFlowComment() {\n    const {\n      pos\n    } = this.state;\n    let shiftToFirstNonWhiteSpace = 2;\n\n    while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\n      shiftToFirstNonWhiteSpace++;\n    }\n\n    const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n    const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n    if (ch2 === 58 && ch3 === 58) {\n      return shiftToFirstNonWhiteSpace + 2;\n    }\n\n    if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \"flow-include\") {\n      return shiftToFirstNonWhiteSpace + 12;\n    }\n\n    if (ch2 === 58 && ch3 !== 58) {\n      return shiftToFirstNonWhiteSpace;\n    }\n\n    return false;\n  }\n\n  hasFlowCommentCompletion() {\n    const end = this.input.indexOf(\"*/\", this.state.pos);\n\n    if (end === -1) {\n      throw this.raise(this.state.pos, Errors.UnterminatedComment);\n    }\n  }\n\n  flowEnumErrorBooleanMemberNotInitialized(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumBooleanMemberNotInitialized, memberName, enumName);\n  }\n\n  flowEnumErrorInvalidMemberName(pos, {\n    enumName,\n    memberName\n  }) {\n    const suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n    this.raise(pos, FlowErrors.EnumInvalidMemberName, memberName, suggestion, enumName);\n  }\n\n  flowEnumErrorDuplicateMemberName(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);\n  }\n\n  flowEnumErrorInconsistentMemberValues(pos, {\n    enumName\n  }) {\n    this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);\n  }\n\n  flowEnumErrorInvalidExplicitType(pos, {\n    enumName,\n    suppliedType\n  }) {\n    return this.raise(pos, suppliedType === null ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied : FlowErrors.EnumInvalidExplicitType, enumName, suppliedType);\n  }\n\n  flowEnumErrorInvalidMemberInitializer(pos, {\n    enumName,\n    explicitType,\n    memberName\n  }) {\n    let message = null;\n\n    switch (explicitType) {\n      case \"boolean\":\n      case \"number\":\n      case \"string\":\n        message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;\n        break;\n\n      case \"symbol\":\n        message = FlowErrors.EnumInvalidMemberInitializerSymbolType;\n        break;\n\n      default:\n        message = FlowErrors.EnumInvalidMemberInitializerUnknownType;\n    }\n\n    return this.raise(pos, message, enumName, memberName, explicitType);\n  }\n\n  flowEnumErrorNumberMemberNotInitialized(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumNumberMemberNotInitialized, enumName, memberName);\n  }\n\n  flowEnumErrorStringMemberInconsistentlyInitailized(pos, {\n    enumName\n  }) {\n    this.raise(pos, FlowErrors.EnumStringMemberInconsistentlyInitailized, enumName);\n  }\n\n  flowEnumMemberInit() {\n    const startPos = this.state.start;\n\n    const endOfInit = () => this.match(types.comma) || this.match(types.braceR);\n\n    switch (this.state.type) {\n      case types.num:\n        {\n          const literal = this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n          if (endOfInit()) {\n            return {\n              type: \"number\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      case types.string:\n        {\n          const literal = this.parseLiteral(this.state.value, \"StringLiteral\");\n\n          if (endOfInit()) {\n            return {\n              type: \"string\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      case types._true:\n      case types._false:\n        {\n          const literal = this.parseBooleanLiteral();\n\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      default:\n        return {\n          type: \"invalid\",\n          pos: startPos\n        };\n    }\n  }\n\n  flowEnumMemberRaw() {\n    const pos = this.state.start;\n    const id = this.parseIdentifier(true);\n    const init = this.eat(types.eq) ? this.flowEnumMemberInit() : {\n      type: \"none\",\n      pos\n    };\n    return {\n      id,\n      init\n    };\n  }\n\n  flowEnumCheckExplicitTypeMismatch(pos, context, expectedType) {\n    const {\n      explicitType\n    } = context;\n\n    if (explicitType === null) {\n      return;\n    }\n\n    if (explicitType !== expectedType) {\n      this.flowEnumErrorInvalidMemberInitializer(pos, context);\n    }\n  }\n\n  flowEnumMembers({\n    enumName,\n    explicitType\n  }) {\n    const seenNames = new Set();\n    const members = {\n      booleanMembers: [],\n      numberMembers: [],\n      stringMembers: [],\n      defaultedMembers: []\n    };\n\n    while (!this.match(types.braceR)) {\n      const memberNode = this.startNode();\n      const {\n        id,\n        init\n      } = this.flowEnumMemberRaw();\n      const memberName = id.name;\n\n      if (memberName === \"\") {\n        continue;\n      }\n\n      if (/^[a-z]/.test(memberName)) {\n        this.flowEnumErrorInvalidMemberName(id.start, {\n          enumName,\n          memberName\n        });\n      }\n\n      if (seenNames.has(memberName)) {\n        this.flowEnumErrorDuplicateMemberName(id.start, {\n          enumName,\n          memberName\n        });\n      }\n\n      seenNames.add(memberName);\n      const context = {\n        enumName,\n        explicitType,\n        memberName\n      };\n      memberNode.id = id;\n\n      switch (init.type) {\n        case \"boolean\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"boolean\");\n            memberNode.init = init.value;\n            members.booleanMembers.push(this.finishNode(memberNode, \"EnumBooleanMember\"));\n            break;\n          }\n\n        case \"number\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(this.finishNode(memberNode, \"EnumNumberMember\"));\n            break;\n          }\n\n        case \"string\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(this.finishNode(memberNode, \"EnumStringMember\"));\n            break;\n          }\n\n        case \"invalid\":\n          {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n          }\n\n        case \"none\":\n          {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(init.pos, context);\n                break;\n\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                break;\n\n              default:\n                members.defaultedMembers.push(this.finishNode(memberNode, \"EnumDefaultedMember\"));\n            }\n          }\n      }\n\n      if (!this.match(types.braceR)) {\n        this.expect(types.comma);\n      }\n    }\n\n    return members;\n  }\n\n  flowEnumStringMembers(initializedMembers, defaultedMembers, {\n    enumName\n  }) {\n    if (initializedMembers.length === 0) {\n      return defaultedMembers;\n    } else if (defaultedMembers.length === 0) {\n      return initializedMembers;\n    } else if (defaultedMembers.length > initializedMembers.length) {\n      for (let _i = 0; _i < initializedMembers.length; _i++) {\n        const member = initializedMembers[_i];\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n          enumName\n        });\n      }\n\n      return defaultedMembers;\n    } else {\n      for (let _i2 = 0; _i2 < defaultedMembers.length; _i2++) {\n        const member = defaultedMembers[_i2];\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n          enumName\n        });\n      }\n\n      return initializedMembers;\n    }\n  }\n\n  flowEnumParseExplicitType({\n    enumName\n  }) {\n    if (this.eatContextual(\"of\")) {\n      if (!this.match(types.name)) {\n        throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n          enumName,\n          suppliedType: null\n        });\n      }\n\n      const {\n        value\n      } = this.state;\n      this.next();\n\n      if (value !== \"boolean\" && value !== \"number\" && value !== \"string\" && value !== \"symbol\") {\n        this.flowEnumErrorInvalidExplicitType(this.state.start, {\n          enumName,\n          suppliedType: value\n        });\n      }\n\n      return value;\n    }\n\n    return null;\n  }\n\n  flowEnumBody(node, {\n    enumName,\n    nameLoc\n  }) {\n    const explicitType = this.flowEnumParseExplicitType({\n      enumName\n    });\n    this.expect(types.braceL);\n    const members = this.flowEnumMembers({\n      enumName,\n      explicitType\n    });\n\n    switch (explicitType) {\n      case \"boolean\":\n        node.explicitType = true;\n        node.members = members.booleanMembers;\n        this.expect(types.braceR);\n        return this.finishNode(node, \"EnumBooleanBody\");\n\n      case \"number\":\n        node.explicitType = true;\n        node.members = members.numberMembers;\n        this.expect(types.braceR);\n        return this.finishNode(node, \"EnumNumberBody\");\n\n      case \"string\":\n        node.explicitType = true;\n        node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n          enumName\n        });\n        this.expect(types.braceR);\n        return this.finishNode(node, \"EnumStringBody\");\n\n      case \"symbol\":\n        node.members = members.defaultedMembers;\n        this.expect(types.braceR);\n        return this.finishNode(node, \"EnumSymbolBody\");\n\n      default:\n        {\n          const empty = () => {\n            node.members = [];\n            this.expect(types.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n\n          node.explicitType = false;\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n              enumName\n            });\n            this.expect(types.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (let _i3 = 0, _members$defaultedMem = members.defaultedMembers; _i3 < _members$defaultedMem.length; _i3++) {\n              const member = _members$defaultedMem[_i3];\n              this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.booleanMembers;\n            this.expect(types.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (let _i4 = 0, _members$defaultedMem2 = members.defaultedMembers; _i4 < _members$defaultedMem2.length; _i4++) {\n              const member = _members$defaultedMem2[_i4];\n              this.flowEnumErrorNumberMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.numberMembers;\n            this.expect(types.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.flowEnumErrorInconsistentMemberValues(nameLoc, {\n              enumName\n            });\n            return empty();\n          }\n        }\n    }\n  }\n\n  flowParseEnumDeclaration(node) {\n    const id = this.parseIdentifier();\n    node.id = id;\n    node.body = this.flowEnumBody(this.startNode(), {\n      enumName: id.name,\n      nameLoc: id.start\n    });\n    return this.finishNode(node, \"EnumDeclaration\");\n  }\n\n  updateContext(prevType) {\n    if (this.match(types.name) && this.state.value === \"of\" && prevType === types.name && this.input.slice(this.state.lastTokStart, this.state.lastTokEnd) === \"interface\") {\n      this.state.exprAllowed = false;\n    } else {\n      super.updateContext(prevType);\n    }\n  }\n\n});\n\nconst entities = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\n\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\nconst JsxErrors = Object.freeze({\n  AttributeIsEmpty: \"JSX attributes must only be assigned a non-empty expression\",\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>\",\n  MissingClosingTagElement: \"Expected corresponding JSX closing tag for <%0>\",\n  UnsupportedJsxValue: \"JSX value should be either an expression or a quoted JSX text\",\n  UnterminatedJsxContent: \"Unterminated JSX contents\",\n  UnwrappedAdjacentJSXElements: \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\"\n});\ntypes$1.j_oTag = new TokContext(\"<tag\", false);\ntypes$1.j_cTag = new TokContext(\"</tag\", false);\ntypes$1.j_expr = new TokContext(\"<tag>...</tag>\", true, true);\ntypes.jsxName = new TokenType(\"jsxName\");\ntypes.jsxText = new TokenType(\"jsxText\", {\n  beforeExpr: true\n});\ntypes.jsxTagStart = new TokenType(\"jsxTagStart\", {\n  startsExpr: true\n});\ntypes.jsxTagEnd = new TokenType(\"jsxTagEnd\");\n\ntypes.jsxTagStart.updateContext = function () {\n  this.state.context.push(types$1.j_expr);\n  this.state.context.push(types$1.j_oTag);\n  this.state.exprAllowed = false;\n};\n\ntypes.jsxTagEnd.updateContext = function (prevType) {\n  const out = this.state.context.pop();\n\n  if (out === types$1.j_oTag && prevType === types.slash || out === types$1.j_cTag) {\n    this.state.context.pop();\n    this.state.exprAllowed = this.curContext() === types$1.j_expr;\n  } else {\n    this.state.exprAllowed = true;\n  }\n};\n\nfunction isFragment(object) {\n  return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\n}\n\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nvar jsx = (superClass => class extends superClass {\n  jsxReadToken() {\n    let out = \"\";\n    let chunkStart = this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 60:\n        case 123:\n          if (this.state.pos === this.state.start) {\n            if (ch === 60 && this.state.exprAllowed) {\n              ++this.state.pos;\n              return this.finishToken(types.jsxTagStart);\n            }\n\n            return super.getTokenFromCode(ch);\n          }\n\n          out += this.input.slice(chunkStart, this.state.pos);\n          return this.finishToken(types.jsxText, out);\n\n        case 38:\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n          break;\n\n        default:\n          if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadNewLine(true);\n            chunkStart = this.state.pos;\n          } else {\n            ++this.state.pos;\n          }\n\n      }\n    }\n  }\n\n  jsxReadNewLine(normalizeCRLF) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let out;\n    ++this.state.pos;\n\n    if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n      ++this.state.pos;\n      out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n    } else {\n      out = String.fromCharCode(ch);\n    }\n\n    ++this.state.curLine;\n    this.state.lineStart = this.state.pos;\n    return out;\n  }\n\n  jsxReadString(quote) {\n    let out = \"\";\n    let chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, Errors.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 38) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadEntity();\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadNewLine(false);\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    return this.finishToken(types.string, out);\n  }\n\n  jsxReadEntity() {\n    let str = \"\";\n    let count = 0;\n    let entity;\n    let ch = this.input[this.state.pos];\n    const startPos = ++this.state.pos;\n\n    while (this.state.pos < this.length && count++ < 10) {\n      ch = this.input[this.state.pos++];\n\n      if (ch === \";\") {\n        if (str[0] === \"#\") {\n          if (str[1] === \"x\") {\n            str = str.substr(2);\n\n            if (HEX_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 16));\n            }\n          } else {\n            str = str.substr(1);\n\n            if (DECIMAL_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 10));\n            }\n          }\n        } else {\n          entity = entities[str];\n        }\n\n        break;\n      }\n\n      str += ch;\n    }\n\n    if (!entity) {\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    return entity;\n  }\n\n  jsxReadWord() {\n    let ch;\n    const start = this.state.pos;\n\n    do {\n      ch = this.input.charCodeAt(++this.state.pos);\n    } while (isIdentifierChar(ch) || ch === 45);\n\n    return this.finishToken(types.jsxName, this.input.slice(start, this.state.pos));\n  }\n\n  jsxParseIdentifier() {\n    const node = this.startNode();\n\n    if (this.match(types.jsxName)) {\n      node.name = this.state.value;\n    } else if (this.state.type.keyword) {\n      node.name = this.state.type.keyword;\n    } else {\n      this.unexpected();\n    }\n\n    this.next();\n    return this.finishNode(node, \"JSXIdentifier\");\n  }\n\n  jsxParseNamespacedName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const name = this.jsxParseIdentifier();\n    if (!this.eat(types.colon)) return name;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.namespace = name;\n    node.name = this.jsxParseIdentifier();\n    return this.finishNode(node, \"JSXNamespacedName\");\n  }\n\n  jsxParseElementName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let node = this.jsxParseNamespacedName();\n\n    if (node.type === \"JSXNamespacedName\") {\n      return node;\n    }\n\n    while (this.eat(types.dot)) {\n      const newNode = this.startNodeAt(startPos, startLoc);\n      newNode.object = node;\n      newNode.property = this.jsxParseIdentifier();\n      node = this.finishNode(newNode, \"JSXMemberExpression\");\n    }\n\n    return node;\n  }\n\n  jsxParseAttributeValue() {\n    let node;\n\n    switch (this.state.type) {\n      case types.braceL:\n        node = this.startNode();\n        this.next();\n        node = this.jsxParseExpressionContainer(node);\n\n        if (node.expression.type === \"JSXEmptyExpression\") {\n          this.raise(node.start, JsxErrors.AttributeIsEmpty);\n        }\n\n        return node;\n\n      case types.jsxTagStart:\n      case types.string:\n        return this.parseExprAtom();\n\n      default:\n        throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);\n    }\n  }\n\n  jsxParseEmptyExpression() {\n    const node = this.startNodeAt(this.state.lastTokEnd, this.state.lastTokEndLoc);\n    return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.start, this.state.startLoc);\n  }\n\n  jsxParseSpreadChild(node) {\n    this.next();\n    node.expression = this.parseExpression();\n    this.expect(types.braceR);\n    return this.finishNode(node, \"JSXSpreadChild\");\n  }\n\n  jsxParseExpressionContainer(node) {\n    if (this.match(types.braceR)) {\n      node.expression = this.jsxParseEmptyExpression();\n    } else {\n      node.expression = this.parseExpression();\n    }\n\n    this.expect(types.braceR);\n    return this.finishNode(node, \"JSXExpressionContainer\");\n  }\n\n  jsxParseAttribute() {\n    const node = this.startNode();\n\n    if (this.eat(types.braceL)) {\n      this.expect(types.ellipsis);\n      node.argument = this.parseMaybeAssign();\n      this.expect(types.braceR);\n      return this.finishNode(node, \"JSXSpreadAttribute\");\n    }\n\n    node.name = this.jsxParseNamespacedName();\n    node.value = this.eat(types.eq) ? this.jsxParseAttributeValue() : null;\n    return this.finishNode(node, \"JSXAttribute\");\n  }\n\n  jsxParseOpeningElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(types.jsxTagEnd)) {\n      this.expect(types.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    return this.jsxParseOpeningElementAfterName(node);\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    const attributes = [];\n\n    while (!this.match(types.slash) && !this.match(types.jsxTagEnd)) {\n      attributes.push(this.jsxParseAttribute());\n    }\n\n    node.attributes = attributes;\n    node.selfClosing = this.eat(types.slash);\n    this.expect(types.jsxTagEnd);\n    return this.finishNode(node, \"JSXOpeningElement\");\n  }\n\n  jsxParseClosingElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(types.jsxTagEnd)) {\n      this.expect(types.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    this.expect(types.jsxTagEnd);\n    return this.finishNode(node, \"JSXClosingElement\");\n  }\n\n  jsxParseElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const children = [];\n    const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n    let closingElement = null;\n\n    if (!openingElement.selfClosing) {\n      contents: for (;;) {\n        switch (this.state.type) {\n          case types.jsxTagStart:\n            startPos = this.state.start;\n            startLoc = this.state.startLoc;\n            this.next();\n\n            if (this.eat(types.slash)) {\n              closingElement = this.jsxParseClosingElementAt(startPos, startLoc);\n              break contents;\n            }\n\n            children.push(this.jsxParseElementAt(startPos, startLoc));\n            break;\n\n          case types.jsxText:\n            children.push(this.parseExprAtom());\n            break;\n\n          case types.braceL:\n            {\n              const node = this.startNode();\n              this.next();\n\n              if (this.match(types.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node));\n              }\n\n              break;\n            }\n\n          default:\n            throw this.unexpected();\n        }\n      }\n\n      if (isFragment(openingElement) && !isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagFragment);\n      } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n      } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n        }\n      }\n    }\n\n    if (isFragment(openingElement)) {\n      node.openingFragment = openingElement;\n      node.closingFragment = closingElement;\n    } else {\n      node.openingElement = openingElement;\n      node.closingElement = closingElement;\n    }\n\n    node.children = children;\n\n    if (this.isRelational(\"<\")) {\n      throw this.raise(this.state.start, JsxErrors.UnwrappedAdjacentJSXElements);\n    }\n\n    return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\n  }\n\n  jsxParseElement() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.next();\n    return this.jsxParseElementAt(startPos, startLoc);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    if (this.match(types.jsxText)) {\n      return this.parseLiteral(this.state.value, \"JSXText\");\n    } else if (this.match(types.jsxTagStart)) {\n      return this.jsxParseElement();\n    } else if (this.isRelational(\"<\") && this.input.charCodeAt(this.state.pos) !== 33) {\n      this.finishToken(types.jsxTagStart);\n      return this.jsxParseElement();\n    } else {\n      return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inPropertyName) return super.getTokenFromCode(code);\n    const context = this.curContext();\n\n    if (context === types$1.j_expr) {\n      return this.jsxReadToken();\n    }\n\n    if (context === types$1.j_oTag || context === types$1.j_cTag) {\n      if (isIdentifierStart(code)) {\n        return this.jsxReadWord();\n      }\n\n      if (code === 62) {\n        ++this.state.pos;\n        return this.finishToken(types.jsxTagEnd);\n      }\n\n      if ((code === 34 || code === 39) && context === types$1.j_oTag) {\n        return this.jsxReadString(code);\n      }\n    }\n\n    if (code === 60 && this.state.exprAllowed && this.input.charCodeAt(this.state.pos + 1) !== 33) {\n      ++this.state.pos;\n      return this.finishToken(types.jsxTagStart);\n    }\n\n    return super.getTokenFromCode(code);\n  }\n\n  updateContext(prevType) {\n    if (this.match(types.braceL)) {\n      const curContext = this.curContext();\n\n      if (curContext === types$1.j_oTag) {\n        this.state.context.push(types$1.braceExpression);\n      } else if (curContext === types$1.j_expr) {\n        this.state.context.push(types$1.templateQuasi);\n      } else {\n        super.updateContext(prevType);\n      }\n\n      this.state.exprAllowed = true;\n    } else if (this.match(types.slash) && prevType === types.jsxTagStart) {\n      this.state.context.length -= 2;\n      this.state.context.push(types$1.j_cTag);\n      this.state.exprAllowed = false;\n    } else {\n      return super.updateContext(prevType);\n    }\n  }\n\n});\n\nclass Scope {\n  constructor(flags) {\n    this.var = [];\n    this.lexical = [];\n    this.functions = [];\n    this.flags = flags;\n  }\n\n}\nclass ScopeHandler {\n  constructor(raise, inModule) {\n    this.scopeStack = [];\n    this.undefinedExports = new Map();\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;\n  }\n\n  get allowSuper() {\n    return (this.currentThisScope().flags & SCOPE_SUPER) > 0;\n  }\n\n  get allowDirectSuper() {\n    return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;\n  }\n\n  get inClass() {\n    return (this.currentThisScope().flags & SCOPE_CLASS) > 0;\n  }\n\n  get inNonArrowFunction() {\n    return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0;\n  }\n\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags) {\n    return new Scope(flags);\n  }\n\n  enter(flags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  treatFunctionsAsVarInScope(scope) {\n    return !!(scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_PROGRAM);\n  }\n\n  declareName(name, bindingType, pos) {\n    let scope = this.currentScope();\n\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.push(name);\n      } else {\n        scope.lexical.push(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        scope.var.push(name);\n        this.maybeExportDefined(scope, name);\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope, name) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(scope, name, bindingType, pos) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(pos, Errors.VarRedeclaration, name);\n    }\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return scope.lexical.indexOf(name) > -1 || !this.treatFunctionsAsVarInScope(scope) && scope.var.indexOf(name) > -1;\n    }\n\n    return scope.lexical.indexOf(name) > -1 && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical[0] === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.indexOf(name) > -1;\n  }\n\n  checkLocalExport(id) {\n    if (this.scopeStack[0].lexical.indexOf(id.name) === -1 && this.scopeStack[0].var.indexOf(id.name) === -1 && this.scopeStack[0].functions.indexOf(id.name) === -1) {\n      this.undefinedExports.set(id.name, id.start);\n    }\n  }\n\n  currentScope() {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScope() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const scope = this.scopeStack[i];\n\n      if (scope.flags & SCOPE_VAR) {\n        return scope;\n      }\n    }\n  }\n\n  currentThisScope() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const scope = this.scopeStack[i];\n\n      if ((scope.flags & SCOPE_VAR || scope.flags & SCOPE_CLASS) && !(scope.flags & SCOPE_ARROW)) {\n        return scope;\n      }\n    }\n  }\n\n}\n\nclass TypeScriptScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.types = [];\n    this.enums = [];\n    this.constEnums = [];\n    this.classes = [];\n    this.exportOnlyBindings = [];\n  }\n\n}\n\nclass TypeScriptScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name, bindingType, pos) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.push(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        this.maybeExportDefined(scope, name);\n      }\n\n      scope.types.push(name);\n    }\n\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.push(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.push(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.push(name);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (scope.enums.indexOf(name) > -1) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.indexOf(name) > -1;\n        return isConst !== wasConst;\n      }\n\n      return true;\n    }\n\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.indexOf(name) > -1) {\n      if (scope.lexical.indexOf(name) > -1) {\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        return false;\n      }\n    }\n\n    if (bindingType & BIND_KIND_TYPE && scope.types.indexOf(name) > -1) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id) {\n    if (this.scopeStack[0].types.indexOf(id.name) === -1 && this.scopeStack[0].exportOnlyBindings.indexOf(id.name) === -1) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nconst PARAM = 0b000,\n      PARAM_YIELD = 0b001,\n      PARAM_AWAIT = 0b010,\n      PARAM_RETURN = 0b100;\nclass ProductionParameterHandler {\n  constructor() {\n    this.stacks = [];\n  }\n\n  enter(flags) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags() {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait() {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield() {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn() {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n}\nfunction functionFlags(isAsync, isGenerator) {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n\nfunction nonNull(x) {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n\n  return x;\n}\n\nfunction assert(x) {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\nconst TSErrors = Object.freeze({\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier\",\n  DeclareClassFieldHasInitializer: \"'declare' class fields cannot have an initializer\",\n  DuplicateModifier: \"Duplicate modifier: '%0'\",\n  EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n  IndexSignatureHasAbstract: \"Index signatures cannot have the 'abstract' modifier\",\n  IndexSignatureHasAccessibility: \"Index signatures cannot have an accessibility modifier ('%0')\",\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier\",\n  OptionalTypeBeforeRequired: \"A required element cannot follow an optional element.\",\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract: \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: \"Private elements cannot have an accessibility modifier ('%0')\",\n  TemplateTypeHasSubstitution: \"Template literal types cannot have any substitution\",\n  TypeAnnotationAfterAssign: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\",\n  UnexpectedReadonly: \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument: \"Argument in a type import must be a string literal\",\n  UnsupportedParameterPropertyKind: \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0\"\n});\n\nfunction keywordTypeFromName(value) {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n\n    case \"never\":\n      return \"TSNeverKeyword\";\n\n    case \"number\":\n      return \"TSNumberKeyword\";\n\n    case \"object\":\n      return \"TSObjectKeyword\";\n\n    case \"string\":\n      return \"TSStringKeyword\";\n\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n\n    default:\n      return undefined;\n  }\n}\n\nvar typescript = (superClass => class extends superClass {\n  getScopeHandler() {\n    return TypeScriptScopeHandler;\n  }\n\n  tsIsIdentifier() {\n    return this.match(types.name);\n  }\n\n  tsNextTokenCanFollowModifier() {\n    this.next();\n    return !this.hasPrecedingLineBreak() && !this.match(types.parenL) && !this.match(types.parenR) && !this.match(types.colon) && !this.match(types.eq) && !this.match(types.question) && !this.match(types.bang);\n  }\n\n  tsParseModifier(allowedModifiers) {\n    if (!this.match(types.name)) {\n      return undefined;\n    }\n\n    const modifier = this.state.value;\n\n    if (allowedModifiers.indexOf(modifier) !== -1 && this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n      return modifier;\n    }\n\n    return undefined;\n  }\n\n  tsParseModifiers(modified, allowedModifiers) {\n    for (;;) {\n      const startPos = this.state.start;\n      const modifier = this.tsParseModifier(allowedModifiers);\n      if (!modifier) break;\n\n      if (Object.hasOwnProperty.call(modified, modifier)) {\n        this.raise(startPos, TSErrors.DuplicateModifier, modifier);\n      }\n\n      modified[modifier] = true;\n    }\n  }\n\n  tsIsListTerminator(kind) {\n    switch (kind) {\n      case \"EnumMembers\":\n      case \"TypeMembers\":\n        return this.match(types.braceR);\n\n      case \"HeritageClauseElement\":\n        return this.match(types.braceL);\n\n      case \"TupleElementTypes\":\n        return this.match(types.bracketR);\n\n      case \"TypeParametersOrArguments\":\n        return this.isRelational(\">\");\n    }\n\n    throw new Error(\"Unreachable\");\n  }\n\n  tsParseList(kind, parseElement) {\n    const result = [];\n\n    while (!this.tsIsListTerminator(kind)) {\n      result.push(parseElement());\n    }\n\n    return result;\n  }\n\n  tsParseDelimitedList(kind, parseElement) {\n    return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true));\n  }\n\n  tsParseDelimitedListWorker(kind, parseElement, expectSuccess) {\n    const result = [];\n\n    for (;;) {\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      const element = parseElement();\n\n      if (element == null) {\n        return undefined;\n      }\n\n      result.push(element);\n\n      if (this.eat(types.comma)) {\n        continue;\n      }\n\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      if (expectSuccess) {\n        this.expect(types.comma);\n      }\n\n      return undefined;\n    }\n\n    return result;\n  }\n\n  tsParseBracketedList(kind, parseElement, bracket, skipFirstToken) {\n    if (!skipFirstToken) {\n      if (bracket) {\n        this.expect(types.bracketL);\n      } else {\n        this.expectRelational(\"<\");\n      }\n    }\n\n    const result = this.tsParseDelimitedList(kind, parseElement);\n\n    if (bracket) {\n      this.expect(types.bracketR);\n    } else {\n      this.expectRelational(\">\");\n    }\n\n    return result;\n  }\n\n  tsParseImportType() {\n    const node = this.startNode();\n    this.expect(types._import);\n    this.expect(types.parenL);\n\n    if (!this.match(types.string)) {\n      this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);\n    }\n\n    node.argument = this.parseExprAtom();\n    this.expect(types.parenR);\n\n    if (this.eat(types.dot)) {\n      node.qualifier = this.tsParseEntityName(true);\n    }\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSImportType\");\n  }\n\n  tsParseEntityName(allowReservedWords) {\n    let entity = this.parseIdentifier();\n\n    while (this.eat(types.dot)) {\n      const node = this.startNodeAtNode(entity);\n      node.left = entity;\n      node.right = this.parseIdentifier(allowReservedWords);\n      entity = this.finishNode(node, \"TSQualifiedName\");\n    }\n\n    return entity;\n  }\n\n  tsParseTypeReference() {\n    const node = this.startNode();\n    node.typeName = this.tsParseEntityName(false);\n\n    if (!this.hasPrecedingLineBreak() && this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSTypeReference\");\n  }\n\n  tsParseThisTypePredicate(lhs) {\n    this.next();\n    const node = this.startNodeAtNode(lhs);\n    node.parameterName = lhs;\n    node.typeAnnotation = this.tsParseTypeAnnotation(false);\n    return this.finishNode(node, \"TSTypePredicate\");\n  }\n\n  tsParseThisTypeNode() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"TSThisType\");\n  }\n\n  tsParseTypeQuery() {\n    const node = this.startNode();\n    this.expect(types._typeof);\n\n    if (this.match(types._import)) {\n      node.exprName = this.tsParseImportType();\n    } else {\n      node.exprName = this.tsParseEntityName(true);\n    }\n\n    return this.finishNode(node, \"TSTypeQuery\");\n  }\n\n  tsParseTypeParameter() {\n    const node = this.startNode();\n    node.name = this.parseIdentifierName(node.start);\n    node.constraint = this.tsEatThenParseType(types._extends);\n    node.default = this.tsEatThenParseType(types.eq);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsTryParseTypeParameters() {\n    if (this.isRelational(\"<\")) {\n      return this.tsParseTypeParameters();\n    }\n  }\n\n  tsParseTypeParameters() {\n    const node = this.startNode();\n\n    if (this.isRelational(\"<\") || this.match(types.jsxTagStart)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this), false, true);\n    return this.finishNode(node, \"TSTypeParameterDeclaration\");\n  }\n\n  tsTryNextParseConstantContext() {\n    if (this.lookahead().type === types._const) {\n      this.next();\n      return this.tsParseTypeReference();\n    }\n\n    return null;\n  }\n\n  tsFillSignature(returnToken, signature) {\n    const returnTokenRequired = returnToken === types.arrow;\n    signature.typeParameters = this.tsTryParseTypeParameters();\n    this.expect(types.parenL);\n    signature.parameters = this.tsParseBindingListForSignature();\n\n    if (returnTokenRequired) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    } else if (this.match(returnToken)) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    }\n  }\n\n  tsParseBindingListForSignature() {\n    return this.parseBindingList(types.parenR, 41).map(pattern => {\n      if (pattern.type !== \"Identifier\" && pattern.type !== \"RestElement\" && pattern.type !== \"ObjectPattern\" && pattern.type !== \"ArrayPattern\") {\n        this.raise(pattern.start, TSErrors.UnsupportedSignatureParameterKind, pattern.type);\n      }\n\n      return pattern;\n    });\n  }\n\n  tsParseTypeMemberSemicolon() {\n    if (!this.eat(types.comma)) {\n      this.semicolon();\n    }\n  }\n\n  tsParseSignatureMember(kind, node) {\n    this.tsFillSignature(types.colon, node);\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, kind);\n  }\n\n  tsIsUnambiguouslyIndexSignature() {\n    this.next();\n    return this.eat(types.name) && this.match(types.colon);\n  }\n\n  tsTryParseIndexSignature(node) {\n    if (!(this.match(types.bracketL) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n      return undefined;\n    }\n\n    this.expect(types.bracketL);\n    const id = this.parseIdentifier();\n    id.typeAnnotation = this.tsParseTypeAnnotation();\n    this.resetEndLocation(id);\n    this.expect(types.bracketR);\n    node.parameters = [id];\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, \"TSIndexSignature\");\n  }\n\n  tsParsePropertyOrMethodSignature(node, readonly) {\n    if (this.eat(types.question)) node.optional = true;\n    const nodeAny = node;\n\n    if (!readonly && (this.match(types.parenL) || this.isRelational(\"<\"))) {\n      const method = nodeAny;\n      this.tsFillSignature(types.colon, method);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(method, \"TSMethodSignature\");\n    } else {\n      const property = nodeAny;\n      if (readonly) property.readonly = true;\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) property.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(property, \"TSPropertySignature\");\n    }\n  }\n\n  tsParseTypeMember() {\n    const node = this.startNode();\n\n    if (this.match(types.parenL) || this.isRelational(\"<\")) {\n      return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n    }\n\n    if (this.match(types._new)) {\n      const id = this.startNode();\n      this.next();\n\n      if (this.match(types.parenL) || this.isRelational(\"<\")) {\n        return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\", node);\n      } else {\n        node.key = this.createIdentifier(id, \"new\");\n        return this.tsParsePropertyOrMethodSignature(node, false);\n      }\n    }\n\n    const readonly = !!this.tsParseModifier([\"readonly\"]);\n    const idx = this.tsTryParseIndexSignature(node);\n\n    if (idx) {\n      if (readonly) node.readonly = true;\n      return idx;\n    }\n\n    this.parsePropertyName(node, false);\n    return this.tsParsePropertyOrMethodSignature(node, readonly);\n  }\n\n  tsParseTypeLiteral() {\n    const node = this.startNode();\n    node.members = this.tsParseObjectTypeMembers();\n    return this.finishNode(node, \"TSTypeLiteral\");\n  }\n\n  tsParseObjectTypeMembers() {\n    this.expect(types.braceL);\n    const members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n    this.expect(types.braceR);\n    return members;\n  }\n\n  tsIsStartOfMappedType() {\n    this.next();\n\n    if (this.eat(types.plusMin)) {\n      return this.isContextual(\"readonly\");\n    }\n\n    if (this.isContextual(\"readonly\")) {\n      this.next();\n    }\n\n    if (!this.match(types.bracketL)) {\n      return false;\n    }\n\n    this.next();\n\n    if (!this.tsIsIdentifier()) {\n      return false;\n    }\n\n    this.next();\n    return this.match(types._in);\n  }\n\n  tsParseMappedTypeParameter() {\n    const node = this.startNode();\n    node.name = this.parseIdentifierName(node.start);\n    node.constraint = this.tsExpectThenParseType(types._in);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsParseMappedType() {\n    const node = this.startNode();\n    this.expect(types.braceL);\n\n    if (this.match(types.plusMin)) {\n      node.readonly = this.state.value;\n      this.next();\n      this.expectContextual(\"readonly\");\n    } else if (this.eatContextual(\"readonly\")) {\n      node.readonly = true;\n    }\n\n    this.expect(types.bracketL);\n    node.typeParameter = this.tsParseMappedTypeParameter();\n    this.expect(types.bracketR);\n\n    if (this.match(types.plusMin)) {\n      node.optional = this.state.value;\n      this.next();\n      this.expect(types.question);\n    } else if (this.eat(types.question)) {\n      node.optional = true;\n    }\n\n    node.typeAnnotation = this.tsTryParseType();\n    this.semicolon();\n    this.expect(types.braceR);\n    return this.finishNode(node, \"TSMappedType\");\n  }\n\n  tsParseTupleType() {\n    const node = this.startNode();\n    node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), true, false);\n    let seenOptionalElement = false;\n    node.elementTypes.forEach(elementNode => {\n      if (elementNode.type === \"TSOptionalType\") {\n        seenOptionalElement = true;\n      } else if (seenOptionalElement && elementNode.type !== \"TSRestType\") {\n        this.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);\n      }\n    });\n    return this.finishNode(node, \"TSTupleType\");\n  }\n\n  tsParseTupleElementType() {\n    if (this.match(types.ellipsis)) {\n      const restNode = this.startNode();\n      this.next();\n      restNode.typeAnnotation = this.tsParseType();\n\n      if (this.match(types.comma) && this.lookaheadCharCode() !== 93) {\n        this.raiseRestNotLast(this.state.start);\n      }\n\n      return this.finishNode(restNode, \"TSRestType\");\n    }\n\n    const type = this.tsParseType();\n\n    if (this.eat(types.question)) {\n      const optionalTypeNode = this.startNodeAtNode(type);\n      optionalTypeNode.typeAnnotation = type;\n      return this.finishNode(optionalTypeNode, \"TSOptionalType\");\n    }\n\n    return type;\n  }\n\n  tsParseParenthesizedType() {\n    const node = this.startNode();\n    this.expect(types.parenL);\n    node.typeAnnotation = this.tsParseType();\n    this.expect(types.parenR);\n    return this.finishNode(node, \"TSParenthesizedType\");\n  }\n\n  tsParseFunctionOrConstructorType(type) {\n    const node = this.startNode();\n\n    if (type === \"TSConstructorType\") {\n      this.expect(types._new);\n    }\n\n    this.tsFillSignature(types.arrow, node);\n    return this.finishNode(node, type);\n  }\n\n  tsParseLiteralTypeNode() {\n    const node = this.startNode();\n\n    node.literal = (() => {\n      switch (this.state.type) {\n        case types.num:\n        case types.string:\n        case types._true:\n        case types._false:\n          return this.parseExprAtom();\n\n        default:\n          throw this.unexpected();\n      }\n    })();\n\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  tsParseTemplateLiteralType() {\n    const node = this.startNode();\n    const templateNode = this.parseTemplate(false);\n\n    if (templateNode.expressions.length > 0) {\n      this.raise(templateNode.expressions[0].start, TSErrors.TemplateTypeHasSubstitution);\n    }\n\n    node.literal = templateNode;\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  tsParseThisTypeOrThisTypePredicate() {\n    const thisKeyword = this.tsParseThisTypeNode();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      return this.tsParseThisTypePredicate(thisKeyword);\n    } else {\n      return thisKeyword;\n    }\n  }\n\n  tsParseNonArrayType() {\n    switch (this.state.type) {\n      case types.name:\n      case types._void:\n      case types._null:\n        {\n          const type = this.match(types._void) ? \"TSVoidKeyword\" : this.match(types._null) ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\n\n          if (type !== undefined && this.lookaheadCharCode() !== 46) {\n            const node = this.startNode();\n            this.next();\n            return this.finishNode(node, type);\n          }\n\n          return this.tsParseTypeReference();\n        }\n\n      case types.string:\n      case types.num:\n      case types._true:\n      case types._false:\n        return this.tsParseLiteralTypeNode();\n\n      case types.plusMin:\n        if (this.state.value === \"-\") {\n          const node = this.startNode();\n\n          if (this.lookahead().type !== types.num) {\n            throw this.unexpected();\n          }\n\n          node.literal = this.parseMaybeUnary();\n          return this.finishNode(node, \"TSLiteralType\");\n        }\n\n        break;\n\n      case types._this:\n        return this.tsParseThisTypeOrThisTypePredicate();\n\n      case types._typeof:\n        return this.tsParseTypeQuery();\n\n      case types._import:\n        return this.tsParseImportType();\n\n      case types.braceL:\n        return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n\n      case types.bracketL:\n        return this.tsParseTupleType();\n\n      case types.parenL:\n        return this.tsParseParenthesizedType();\n\n      case types.backQuote:\n        return this.tsParseTemplateLiteralType();\n    }\n\n    throw this.unexpected();\n  }\n\n  tsParseArrayTypeOrHigher() {\n    let type = this.tsParseNonArrayType();\n\n    while (!this.hasPrecedingLineBreak() && this.eat(types.bracketL)) {\n      if (this.match(types.bracketR)) {\n        const node = this.startNodeAtNode(type);\n        node.elementType = type;\n        this.expect(types.bracketR);\n        type = this.finishNode(node, \"TSArrayType\");\n      } else {\n        const node = this.startNodeAtNode(type);\n        node.objectType = type;\n        node.indexType = this.tsParseType();\n        this.expect(types.bracketR);\n        type = this.finishNode(node, \"TSIndexedAccessType\");\n      }\n    }\n\n    return type;\n  }\n\n  tsParseTypeOperator(operator) {\n    const node = this.startNode();\n    this.expectContextual(operator);\n    node.operator = operator;\n    node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n    if (operator === \"readonly\") {\n      this.tsCheckTypeAnnotationForReadOnly(node);\n    }\n\n    return this.finishNode(node, \"TSTypeOperator\");\n  }\n\n  tsCheckTypeAnnotationForReadOnly(node) {\n    switch (node.typeAnnotation.type) {\n      case \"TSTupleType\":\n      case \"TSArrayType\":\n        return;\n\n      default:\n        this.raise(node.start, TSErrors.UnexpectedReadonly);\n    }\n  }\n\n  tsParseInferType() {\n    const node = this.startNode();\n    this.expectContextual(\"infer\");\n    const typeParameter = this.startNode();\n    typeParameter.name = this.parseIdentifierName(typeParameter.start);\n    node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n    return this.finishNode(node, \"TSInferType\");\n  }\n\n  tsParseTypeOperatorOrHigher() {\n    const operator = [\"keyof\", \"unique\", \"readonly\"].find(kw => this.isContextual(kw));\n    return operator ? this.tsParseTypeOperator(operator) : this.isContextual(\"infer\") ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();\n  }\n\n  tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n    this.eat(operator);\n    let type = parseConstituentType();\n\n    if (this.match(operator)) {\n      const types = [type];\n\n      while (this.eat(operator)) {\n        types.push(parseConstituentType());\n      }\n\n      const node = this.startNodeAtNode(type);\n      node.types = types;\n      type = this.finishNode(node, kind);\n    }\n\n    return type;\n  }\n\n  tsParseIntersectionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), types.bitwiseAND);\n  }\n\n  tsParseUnionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), types.bitwiseOR);\n  }\n\n  tsIsStartOfFunctionType() {\n    if (this.isRelational(\"<\")) {\n      return true;\n    }\n\n    return this.match(types.parenL) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n  }\n\n  tsSkipParameterStart() {\n    if (this.match(types.name) || this.match(types._this)) {\n      this.next();\n      return true;\n    }\n\n    if (this.match(types.braceL)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(types.braceL)) {\n          ++braceStackCounter;\n        } else if (this.match(types.braceR)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    if (this.match(types.bracketL)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(types.bracketL)) {\n          ++braceStackCounter;\n        } else if (this.match(types.bracketR)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  tsIsUnambiguouslyStartOfFunctionType() {\n    this.next();\n\n    if (this.match(types.parenR) || this.match(types.ellipsis)) {\n      return true;\n    }\n\n    if (this.tsSkipParameterStart()) {\n      if (this.match(types.colon) || this.match(types.comma) || this.match(types.question) || this.match(types.eq)) {\n        return true;\n      }\n\n      if (this.match(types.parenR)) {\n        this.next();\n\n        if (this.match(types.arrow)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  tsParseTypeOrTypePredicateAnnotation(returnToken) {\n    return this.tsInType(() => {\n      const t = this.startNode();\n      this.expect(returnToken);\n      const asserts = this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));\n\n      if (asserts && this.match(types._this)) {\n        let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n\n        if (thisTypePredicate.type === \"TSThisType\") {\n          const node = this.startNodeAtNode(t);\n          node.parameterName = thisTypePredicate;\n          node.asserts = true;\n          thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n        } else {\n          thisTypePredicate.asserts = true;\n        }\n\n        t.typeAnnotation = thisTypePredicate;\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n      if (!typePredicateVariable) {\n        if (!asserts) {\n          return this.tsParseTypeAnnotation(false, t);\n        }\n\n        const node = this.startNodeAtNode(t);\n        node.parameterName = this.parseIdentifier();\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const type = this.tsParseTypeAnnotation(false);\n      const node = this.startNodeAtNode(t);\n      node.parameterName = typePredicateVariable;\n      node.typeAnnotation = type;\n      node.asserts = asserts;\n      t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    });\n  }\n\n  tsTryParseTypeOrTypePredicateAnnotation() {\n    return this.match(types.colon) ? this.tsParseTypeOrTypePredicateAnnotation(types.colon) : undefined;\n  }\n\n  tsTryParseTypeAnnotation() {\n    return this.match(types.colon) ? this.tsParseTypeAnnotation() : undefined;\n  }\n\n  tsTryParseType() {\n    return this.tsEatThenParseType(types.colon);\n  }\n\n  tsParseTypePredicatePrefix() {\n    const id = this.parseIdentifier();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      this.next();\n      return id;\n    }\n  }\n\n  tsParseTypePredicateAsserts() {\n    if (!this.match(types.name) || this.state.value !== \"asserts\" || this.hasPrecedingLineBreak()) {\n      return false;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    this.next();\n\n    if (!this.match(types.name) && !this.match(types._this)) {\n      return false;\n    }\n\n    if (containsEsc) {\n      this.raise(this.state.lastTokStart, Errors.InvalidEscapedReservedWord, \"asserts\");\n    }\n\n    return true;\n  }\n\n  tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {\n    this.tsInType(() => {\n      if (eatColon) this.expect(types.colon);\n      t.typeAnnotation = this.tsParseType();\n    });\n    return this.finishNode(t, \"TSTypeAnnotation\");\n  }\n\n  tsParseType() {\n    assert(this.state.inType);\n    const type = this.tsParseNonConditionalType();\n\n    if (this.hasPrecedingLineBreak() || !this.eat(types._extends)) {\n      return type;\n    }\n\n    const node = this.startNodeAtNode(type);\n    node.checkType = type;\n    node.extendsType = this.tsParseNonConditionalType();\n    this.expect(types.question);\n    node.trueType = this.tsParseType();\n    this.expect(types.colon);\n    node.falseType = this.tsParseType();\n    return this.finishNode(node, \"TSConditionalType\");\n  }\n\n  tsParseNonConditionalType() {\n    if (this.tsIsStartOfFunctionType()) {\n      return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n    }\n\n    if (this.match(types._new)) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n    }\n\n    return this.tsParseUnionTypeOrHigher();\n  }\n\n  tsParseTypeAssertion() {\n    const node = this.startNode();\n\n    const _const = this.tsTryNextParseConstantContext();\n\n    node.typeAnnotation = _const || this.tsNextThenParseType();\n    this.expectRelational(\">\");\n    node.expression = this.parseMaybeUnary();\n    return this.finishNode(node, \"TSTypeAssertion\");\n  }\n\n  tsParseHeritageClause(descriptor) {\n    const originalStart = this.state.start;\n    const delimitedList = this.tsParseDelimitedList(\"HeritageClauseElement\", this.tsParseExpressionWithTypeArguments.bind(this));\n\n    if (!delimitedList.length) {\n      this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);\n    }\n\n    return delimitedList;\n  }\n\n  tsParseExpressionWithTypeArguments() {\n    const node = this.startNode();\n    node.expression = this.tsParseEntityName(false);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n  }\n\n  tsParseInterfaceDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, BIND_TS_INTERFACE, undefined, \"typescript interface declaration\");\n    node.typeParameters = this.tsTryParseTypeParameters();\n\n    if (this.eat(types._extends)) {\n      node.extends = this.tsParseHeritageClause(\"extends\");\n    }\n\n    const body = this.startNode();\n    body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n    node.body = this.finishNode(body, \"TSInterfaceBody\");\n    return this.finishNode(node, \"TSInterfaceDeclaration\");\n  }\n\n  tsParseTypeAliasDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, BIND_TS_TYPE, undefined, \"typescript type alias\");\n    node.typeParameters = this.tsTryParseTypeParameters();\n    node.typeAnnotation = this.tsExpectThenParseType(types.eq);\n    this.semicolon();\n    return this.finishNode(node, \"TSTypeAliasDeclaration\");\n  }\n\n  tsInNoContext(cb) {\n    const oldContext = this.state.context;\n    this.state.context = [oldContext[0]];\n\n    try {\n      return cb();\n    } finally {\n      this.state.context = oldContext;\n    }\n  }\n\n  tsInType(cb) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.inType = oldInType;\n    }\n  }\n\n  tsEatThenParseType(token) {\n    return !this.match(token) ? undefined : this.tsNextThenParseType();\n  }\n\n  tsExpectThenParseType(token) {\n    return this.tsDoThenParseType(() => this.expect(token));\n  }\n\n  tsNextThenParseType() {\n    return this.tsDoThenParseType(() => this.next());\n  }\n\n  tsDoThenParseType(cb) {\n    return this.tsInType(() => {\n      cb();\n      return this.tsParseType();\n    });\n  }\n\n  tsParseEnumMember() {\n    const node = this.startNode();\n    node.id = this.match(types.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n\n    if (this.eat(types.eq)) {\n      node.initializer = this.parseMaybeAssign();\n    }\n\n    return this.finishNode(node, \"TSEnumMember\");\n  }\n\n  tsParseEnumDeclaration(node, isConst) {\n    if (isConst) node.const = true;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM, undefined, \"typescript enum declaration\");\n    this.expect(types.braceL);\n    node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n    this.expect(types.braceR);\n    return this.finishNode(node, \"TSEnumDeclaration\");\n  }\n\n  tsParseModuleBlock() {\n    const node = this.startNode();\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(types.braceL);\n    this.parseBlockOrModuleBlockBody(node.body = [], undefined, true, types.braceR);\n    this.scope.exit();\n    return this.finishNode(node, \"TSModuleBlock\");\n  }\n\n  tsParseModuleOrNamespaceDeclaration(node, nested = false) {\n    node.id = this.parseIdentifier();\n\n    if (!nested) {\n      this.checkLVal(node.id, BIND_TS_NAMESPACE, null, \"module or namespace declaration\");\n    }\n\n    if (this.eat(types.dot)) {\n      const inner = this.startNode();\n      this.tsParseModuleOrNamespaceDeclaration(inner, true);\n      node.body = inner;\n    } else {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseAmbientExternalModuleDeclaration(node) {\n    if (this.isContextual(\"global\")) {\n      node.global = true;\n      node.id = this.parseIdentifier();\n    } else if (this.match(types.string)) {\n      node.id = this.parseExprAtom();\n    } else {\n      this.unexpected();\n    }\n\n    if (this.match(types.braceL)) {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    } else {\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseImportEqualsDeclaration(node, isExport) {\n    node.isExport = isExport || false;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, BIND_LEXICAL, undefined, \"import equals declaration\");\n    this.expect(types.eq);\n    node.moduleReference = this.tsParseModuleReference();\n    this.semicolon();\n    return this.finishNode(node, \"TSImportEqualsDeclaration\");\n  }\n\n  tsIsExternalModuleReference() {\n    return this.isContextual(\"require\") && this.lookaheadCharCode() === 40;\n  }\n\n  tsParseModuleReference() {\n    return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\n  }\n\n  tsParseExternalModuleReference() {\n    const node = this.startNode();\n    this.expectContextual(\"require\");\n    this.expect(types.parenL);\n\n    if (!this.match(types.string)) {\n      throw this.unexpected();\n    }\n\n    node.expression = this.parseExprAtom();\n    this.expect(types.parenR);\n    return this.finishNode(node, \"TSExternalModuleReference\");\n  }\n\n  tsLookAhead(f) {\n    const state = this.state.clone();\n    const res = f();\n    this.state = state;\n    return res;\n  }\n\n  tsTryParseAndCatch(f) {\n    const result = this.tryParse(abort => f() || abort());\n    if (result.aborted || !result.node) return undefined;\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  tsTryParse(f) {\n    const state = this.state.clone();\n    const result = f();\n\n    if (result !== undefined && result !== false) {\n      return result;\n    } else {\n      this.state = state;\n      return undefined;\n    }\n  }\n\n  tsTryParseDeclare(nany) {\n    if (this.isLineTerminator()) {\n      return;\n    }\n\n    let starttype = this.state.type;\n    let kind;\n\n    if (this.isContextual(\"let\")) {\n      starttype = types._var;\n      kind = \"let\";\n    }\n\n    switch (starttype) {\n      case types._function:\n        return this.parseFunctionStatement(nany, false, true);\n\n      case types._class:\n        nany.declare = true;\n        return this.parseClass(nany, true, false);\n\n      case types._const:\n        if (this.match(types._const) && this.isLookaheadContextual(\"enum\")) {\n          this.expect(types._const);\n          this.expectContextual(\"enum\");\n          return this.tsParseEnumDeclaration(nany, true);\n        }\n\n      case types._var:\n        kind = kind || this.state.value;\n        return this.parseVarStatement(nany, kind);\n\n      case types.name:\n        {\n          const value = this.state.value;\n\n          if (value === \"global\") {\n            return this.tsParseAmbientExternalModuleDeclaration(nany);\n          } else {\n            return this.tsParseDeclaration(nany, value, true);\n          }\n        }\n    }\n  }\n\n  tsTryParseExportDeclaration() {\n    return this.tsParseDeclaration(this.startNode(), this.state.value, true);\n  }\n\n  tsParseExpressionStatement(node, expr) {\n    switch (expr.name) {\n      case \"declare\":\n        {\n          const declaration = this.tsTryParseDeclare(node);\n\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n\n          break;\n        }\n\n      case \"global\":\n        if (this.match(types.braceL)) {\n          this.scope.enter(SCOPE_TS_MODULE);\n          this.prodParam.enter(PARAM);\n          const mod = node;\n          mod.global = true;\n          mod.id = expr;\n          mod.body = this.tsParseModuleBlock();\n          this.scope.exit();\n          this.prodParam.exit();\n          return this.finishNode(mod, \"TSModuleDeclaration\");\n        }\n\n        break;\n\n      default:\n        return this.tsParseDeclaration(node, expr.name, false);\n    }\n  }\n\n  tsParseDeclaration(node, value, next) {\n    switch (value) {\n      case \"abstract\":\n        if (this.tsCheckLineTerminatorAndMatch(types._class, next)) {\n          const cls = node;\n          cls.abstract = true;\n\n          if (next) {\n            this.next();\n\n            if (!this.match(types._class)) {\n              this.unexpected(null, types._class);\n            }\n          }\n\n          return this.parseClass(cls, true, false);\n        }\n\n        break;\n\n      case \"enum\":\n        if (next || this.match(types.name)) {\n          if (next) this.next();\n          return this.tsParseEnumDeclaration(node, false);\n        }\n\n        break;\n\n      case \"interface\":\n        if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          if (next) this.next();\n          return this.tsParseInterfaceDeclaration(node);\n        }\n\n        break;\n\n      case \"module\":\n        if (next) this.next();\n\n        if (this.match(types.string)) {\n          return this.tsParseAmbientExternalModuleDeclaration(node);\n        } else if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n\n        break;\n\n      case \"namespace\":\n        if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          if (next) this.next();\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n\n        break;\n\n      case \"type\":\n        if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          if (next) this.next();\n          return this.tsParseTypeAliasDeclaration(node);\n        }\n\n        break;\n    }\n  }\n\n  tsCheckLineTerminatorAndMatch(tokenType, next) {\n    return (next || this.match(tokenType)) && !this.isLineTerminator();\n  }\n\n  tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {\n    if (!this.isRelational(\"<\")) {\n      return undefined;\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.maybeInArrowParameters = true;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    const res = this.tsTryParseAndCatch(() => {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.typeParameters = this.tsParseTypeParameters();\n      super.parseFunctionParams(node);\n      node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n      this.expect(types.arrow);\n      return node;\n    });\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n\n    if (!res) {\n      return undefined;\n    }\n\n    return this.parseArrowExpression(res, null, true);\n  }\n\n  tsParseTypeArguments() {\n    const node = this.startNode();\n    node.params = this.tsInType(() => this.tsInNoContext(() => {\n      this.expectRelational(\"<\");\n      return this.tsParseDelimitedList(\"TypeParametersOrArguments\", this.tsParseType.bind(this));\n    }));\n    this.state.exprAllowed = false;\n    this.expectRelational(\">\");\n    return this.finishNode(node, \"TSTypeParameterInstantiation\");\n  }\n\n  tsIsDeclarationStart() {\n    if (this.match(types.name)) {\n      switch (this.state.value) {\n        case \"abstract\":\n        case \"declare\":\n        case \"enum\":\n        case \"interface\":\n        case \"module\":\n        case \"namespace\":\n        case \"type\":\n          return true;\n      }\n    }\n\n    return false;\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.tsIsDeclarationStart()) return false;\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let accessibility;\n    let readonly = false;\n\n    if (allowModifiers) {\n      accessibility = this.parseAccessModifier();\n      readonly = !!this.tsParseModifier([\"readonly\"]);\n    }\n\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (accessibility || readonly) {\n      const pp = this.startNodeAt(startPos, startLoc);\n\n      if (decorators.length) {\n        pp.decorators = decorators;\n      }\n\n      if (accessibility) pp.accessibility = accessibility;\n      if (readonly) pp.readonly = readonly;\n\n      if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n        this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);\n      }\n\n      pp.parameter = elt;\n      return this.finishNode(pp, \"TSParameterProperty\");\n    }\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(types.colon)) {\n      node.returnType = this.tsParseTypeOrTypePredicateAnnotation(types.colon);\n    }\n\n    const bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" ? \"TSDeclareMethod\" : undefined;\n\n    if (bodilessType && !this.match(types.braceL) && this.isLineTerminator()) {\n      this.finishNode(node, bodilessType);\n      return;\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.body && node.id) {\n      this.checkLVal(node.id, BIND_TS_AMBIENT, null, \"function name\");\n    } else {\n      super.registerFunctionStatementId(...arguments);\n    }\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!this.hasPrecedingLineBreak() && this.match(types.bang)) {\n      this.state.exprAllowed = false;\n      this.next();\n      const nonNullExpression = this.startNodeAt(startPos, startLoc);\n      nonNullExpression.expression = base;\n      return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n    }\n\n    if (this.isRelational(\"<\")) {\n      const result = this.tsTryParseAndCatch(() => {\n        if (!noCalls && this.atPossibleAsyncArrow(base)) {\n          const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);\n\n          if (asyncArrowFn) {\n            return asyncArrowFn;\n          }\n        }\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        const typeArguments = this.tsParseTypeArguments();\n\n        if (typeArguments) {\n          if (!noCalls && this.eat(types.parenL)) {\n            node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n            node.typeParameters = typeArguments;\n            return this.finishCallExpression(node, state.optionalChainMember);\n          } else if (this.match(types.backQuote)) {\n            return this.parseTaggedTemplateExpression(startPos, startLoc, base, state, typeArguments);\n          }\n        }\n\n        this.unexpected();\n      });\n      if (result) return result;\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n  }\n\n  parseNewArguments(node) {\n    if (this.isRelational(\"<\")) {\n      const typeParameters = this.tsTryParseAndCatch(() => {\n        const args = this.tsParseTypeArguments();\n        if (!this.match(types.parenL)) this.unexpected();\n        return args;\n      });\n\n      if (typeParameters) {\n        node.typeParameters = typeParameters;\n      }\n    }\n\n    super.parseNewArguments(node);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec, noIn) {\n    if (nonNull(types._in.binop) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(\"as\")) {\n      const node = this.startNodeAt(leftStartPos, leftStartLoc);\n      node.expression = left;\n\n      const _const = this.tsTryNextParseConstantContext();\n\n      if (_const) {\n        node.typeAnnotation = _const;\n      } else {\n        node.typeAnnotation = this.tsNextThenParseType();\n      }\n\n      this.finishNode(node, \"TSAsExpression\");\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);\n    }\n\n    return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec, noIn);\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {}\n\n  checkDuplicateExports() {}\n\n  parseImport(node) {\n    if (this.match(types.name) || this.match(types.star) || this.match(types.braceL)) {\n      const ahead = this.lookahead();\n\n      if (this.match(types.name) && ahead.type === types.eq) {\n        return this.tsParseImportEqualsDeclaration(node);\n      }\n\n      if (this.isContextual(\"type\") && ahead.type !== types.comma && !(ahead.type === types.name && ahead.value === \"from\")) {\n        node.importKind = \"type\";\n        this.next();\n      } else {\n        node.importKind = \"value\";\n      }\n    }\n\n    const importNode = super.parseImport(node);\n\n    if (importNode.importKind === \"type\" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === \"ImportDefaultSpecifier\") {\n      this.raise(importNode.start, \"A type-only import can specify a default import or named bindings, but not both.\");\n    }\n\n    return importNode;\n  }\n\n  parseExport(node) {\n    if (this.match(types._import)) {\n      this.expect(types._import);\n      return this.tsParseImportEqualsDeclaration(node, true);\n    } else if (this.eat(types.eq)) {\n      const assign = node;\n      assign.expression = this.parseExpression();\n      this.semicolon();\n      return this.finishNode(assign, \"TSExportAssignment\");\n    } else if (this.eatContextual(\"as\")) {\n      const decl = node;\n      this.expectContextual(\"namespace\");\n      decl.id = this.parseIdentifier();\n      this.semicolon();\n      return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n    } else {\n      if (this.isContextual(\"type\") && this.lookahead().type === types.braceL) {\n        this.next();\n        node.exportKind = \"type\";\n      } else {\n        node.exportKind = \"value\";\n      }\n\n      return super.parseExport(node);\n    }\n  }\n\n  isAbstractClass() {\n    return this.isContextual(\"abstract\") && this.lookahead().type === types._class;\n  }\n\n  parseExportDefaultExpression() {\n    if (this.isAbstractClass()) {\n      const cls = this.startNode();\n      this.next();\n      this.parseClass(cls, true, true);\n      cls.abstract = true;\n      return cls;\n    }\n\n    if (this.state.value === \"interface\") {\n      const result = this.tsParseDeclaration(this.startNode(), this.state.value, true);\n      if (result) return result;\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseStatementContent(context, topLevel) {\n    if (this.state.type === types._const) {\n      const ahead = this.lookahead();\n\n      if (ahead.type === types.name && ahead.value === \"enum\") {\n        const node = this.startNode();\n        this.expect(types._const);\n        this.expectContextual(\"enum\");\n        return this.tsParseEnumDeclaration(node, true);\n      }\n    }\n\n    return super.parseStatementContent(context, topLevel);\n  }\n\n  parseAccessModifier() {\n    return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n  }\n\n  parseClassMember(classBody, member, state, constructorAllowsSuper) {\n    this.tsParseModifiers(member, [\"declare\"]);\n    const accessibility = this.parseAccessModifier();\n    if (accessibility) member.accessibility = accessibility;\n    this.tsParseModifiers(member, [\"declare\"]);\n    super.parseClassMember(classBody, member, state, constructorAllowsSuper);\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic, constructorAllowsSuper) {\n    this.tsParseModifiers(member, [\"abstract\", \"readonly\", \"declare\"]);\n    const idx = this.tsTryParseIndexSignature(member);\n\n    if (idx) {\n      classBody.body.push(idx);\n\n      if (member.abstract) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAbstract);\n      }\n\n      if (isStatic) {\n        this.raise(member.start, TSErrors.IndexSignatureHasStatic);\n      }\n\n      if (member.accessibility) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAccessibility, member.accessibility);\n      }\n\n      return;\n    }\n\n    super.parseClassMemberWithIsStatic(classBody, member, state, isStatic, constructorAllowsSuper);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {\n    const optional = this.eat(types.question);\n    if (optional) methodOrProp.optional = true;\n\n    if (methodOrProp.readonly && this.match(types.parenL)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);\n    }\n\n    if (methodOrProp.declare && this.match(types.parenL)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);\n    }\n  }\n\n  parseExpressionStatement(node, expr) {\n    const decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr) : undefined;\n    return decl || super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.tsIsDeclarationStart()) return true;\n    return super.shouldParseExportDeclaration();\n  }\n\n  parseConditional(expr, noIn, startPos, startLoc, refNeedsArrowPos) {\n    if (!refNeedsArrowPos || !this.match(types.question)) {\n      return super.parseConditional(expr, noIn, startPos, startLoc, refNeedsArrowPos);\n    }\n\n    const result = this.tryParse(() => super.parseConditional(expr, noIn, startPos, startLoc));\n\n    if (!result.node) {\n      refNeedsArrowPos.start = result.error.pos || this.state.start;\n      return expr;\n    }\n\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(types.question)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(types.colon)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  parseExportDeclaration(node) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isDeclare = this.eatContextual(\"declare\");\n    let declaration;\n\n    if (this.match(types.name)) {\n      declaration = this.tsTryParseExportDeclaration();\n    }\n\n    if (!declaration) {\n      declaration = super.parseExportDeclaration(node);\n    }\n\n    if (declaration && (declaration.type === \"TSInterfaceDeclaration\" || declaration.type === \"TSTypeAliasDeclaration\" || isDeclare)) {\n      node.exportKind = \"type\";\n    }\n\n    if (declaration && isDeclare) {\n      this.resetStartLocation(declaration, startPos, startLoc);\n      declaration.declare = true;\n    }\n\n    return declaration;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    if ((!isStatement || optionalId) && this.isContextual(\"implements\")) {\n      return;\n    }\n\n    super.parseClassId(node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n  }\n\n  parseClassPropertyAnnotation(node) {\n    if (!node.optional && this.eat(types.bang)) {\n      node.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n  }\n\n  parseClassProperty(node) {\n    this.parseClassPropertyAnnotation(node);\n\n    if (node.declare && this.match(types.equal)) {\n      this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (node.abstract) {\n      this.raise(node.start, TSErrors.PrivateElementHasAbstract);\n    }\n\n    if (node.accessibility) {\n      this.raise(node.start, TSErrors.PrivateElementHasAccessibility, node.accessibility);\n    }\n\n    this.parseClassPropertyAnnotation(node);\n    return super.parseClassPrivateProperty(node);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.isRelational(\"<\")) {\n      node.superTypeParameters = this.tsParseTypeArguments();\n    }\n\n    if (this.eatContextual(\"implements\")) {\n      node.implements = this.tsParseHeritageClause(\"implements\");\n    }\n  }\n\n  parseObjPropValue(prop, ...args) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) prop.typeParameters = typeParameters;\n    super.parseObjPropValue(prop, ...args);\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (decl.id.type === \"Identifier\" && this.eat(types.bang)) {\n      decl.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      decl.id.typeAnnotation = type;\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(types.colon)) {\n      node.returnType = this.tsParseTypeAnnotation();\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  parseMaybeAssign(...args) {\n    let state;\n    let jsx;\n    let typeCast;\n\n    if (this.match(types.jsxTagStart)) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n\n      if (context[context.length - 1] === types$1.j_oTag) {\n        context.length -= 2;\n      } else if (context[context.length - 1] === types$1.j_expr) {\n        context.length -= 1;\n      }\n    }\n\n    if (!(jsx && jsx.error) && !this.isRelational(\"<\")) {\n      return super.parseMaybeAssign(...args);\n    }\n\n    let typeParameters;\n    state = state || this.state.clone();\n    const arrow = this.tryParse(abort => {\n      typeParameters = this.tsParseTypeParameters();\n      const expr = super.parseMaybeAssign(...args);\n\n      if (expr.type !== \"ArrowFunctionExpression\" || expr.extra && expr.extra.parenthesized) {\n        abort();\n      }\n\n      if (typeParameters && typeParameters.params.length !== 0) {\n        this.resetStartLocationFromNode(expr, typeParameters);\n      }\n\n      expr.typeParameters = typeParameters;\n      return expr;\n    }, state);\n    if (!arrow.error && !arrow.aborted) return arrow.node;\n\n    if (!jsx) {\n      assert(!this.hasPlugin(\"jsx\"));\n      typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!typeCast.error) return typeCast.node;\n    }\n\n    if (jsx && jsx.node) {\n      this.state = jsx.failState;\n      return jsx.node;\n    }\n\n    if (arrow.node) {\n      this.state = arrow.failState;\n      return arrow.node;\n    }\n\n    if (typeCast && typeCast.node) {\n      this.state = typeCast.failState;\n      return typeCast.node;\n    }\n\n    if (jsx && jsx.thrown) throw jsx.error;\n    if (arrow.thrown) throw arrow.error;\n    if (typeCast && typeCast.thrown) throw typeCast.error;\n    throw jsx && jsx.error || arrow.error || typeCast && typeCast.error;\n  }\n\n  parseMaybeUnary(refExpressionErrors) {\n    if (!this.hasPlugin(\"jsx\") && this.isRelational(\"<\")) {\n      return this.tsParseTypeAssertion();\n    } else {\n      return super.parseMaybeUnary(refExpressionErrors);\n    }\n  }\n\n  parseArrow(node) {\n    if (this.match(types.colon)) {\n      const result = this.tryParse(abort => {\n        const returnType = this.tsParseTypeOrTypePredicateAnnotation(types.colon);\n        if (this.canInsertSemicolon() || !this.match(types.arrow)) abort();\n        return returnType;\n      });\n      if (result.aborted) return;\n\n      if (!result.thrown) {\n        if (result.error) this.state = result.failState;\n        node.returnType = result.node;\n      }\n    }\n\n    return super.parseArrow(node);\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(types.question)) {\n      if (param.type !== \"Identifier\") {\n        this.raise(param.start, TSErrors.PatternIsOptional);\n      }\n\n      param.optional = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) param.typeAnnotation = type;\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  toAssignable(node) {\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return super.toAssignable(this.typeCastToParameter(node));\n\n      case \"TSParameterProperty\":\n        return super.toAssignable(node);\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        node.expression = this.toAssignable(node.expression);\n        return node;\n\n      default:\n        return super.toAssignable(node);\n    }\n  }\n\n  checkLVal(expr, bindingType = BIND_NONE, checkClashes, contextDescription) {\n    switch (expr.type) {\n      case \"TSTypeCastExpression\":\n        return;\n\n      case \"TSParameterProperty\":\n        this.checkLVal(expr.parameter, bindingType, checkClashes, \"parameter property\");\n        return;\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        this.checkLVal(expr.expression, bindingType, checkClashes, contextDescription);\n        return;\n\n      default:\n        super.checkLVal(expr, bindingType, checkClashes, contextDescription);\n        return;\n    }\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types._this:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsParseTypeArguments();\n\n      if (this.match(types.parenL)) {\n        const call = super.parseMaybeDecoratorArguments(expr);\n        call.typeParameters = typeArguments;\n        return call;\n      }\n\n      this.unexpected(this.state.start, types.parenL);\n    }\n\n    return super.parseMaybeDecoratorArguments(expr);\n  }\n\n  isClassMethod() {\n    return this.isRelational(\"<\") || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(types.bang) || this.match(types.colon) || super.isClassProperty();\n  }\n\n  parseMaybeDefault(...args) {\n    const node = super.parseMaybeDefault(...args);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, TSErrors.TypeAnnotationAfterAssign);\n    }\n\n    return node;\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(types.relational, 1);\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  toAssignableList(exprList) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n      if (!expr) continue;\n\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          exprList[i] = this.typeCastToParameter(expr);\n          break;\n\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n          if (!this.state.maybeInArrowParameters) {\n            exprList[i] = this.typeCastToParameter(expr);\n          } else {\n            this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);\n          }\n\n          break;\n      }\n    }\n\n    return super.toAssignableList(...arguments);\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  toReferencedList(exprList, isInParens) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n\n      if (expr && expr.type === \"TSTypeCastExpression\") {\n        this.raise(expr.start, TSErrors.UnexpectedTypeAnnotation);\n      }\n    }\n\n    return exprList;\n  }\n\n  shouldParseArrow() {\n    return this.match(types.colon) || super.shouldParseArrow();\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types.colon) || super.shouldParseAsyncArrow();\n  }\n\n  canHaveLeadingDecorator() {\n    return super.canHaveLeadingDecorator() || this.isAbstractClass();\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArguments());\n      if (typeArguments) node.typeParameters = typeArguments;\n    }\n\n    return super.jsxParseOpeningElementAfterName(node);\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    const baseCount = super.getGetterSetterExpectedParamCount(method);\n    const firstParam = method.params[0];\n    const hasContextParam = firstParam && firstParam.type === \"Identifier\" && firstParam.name === \"this\";\n    return hasContextParam ? baseCount + 1 : baseCount;\n  }\n\n});\n\ntypes.placeholder = new TokenType(\"%%\", {\n  startsExpr: true\n});\nvar placeholders = (superClass => class extends superClass {\n  parsePlaceholder(expectedNode) {\n    if (this.match(types.placeholder)) {\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      node.name = super.parseIdentifier(true);\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      this.expect(types.placeholder);\n      return this.finishPlaceholder(node, expectedNode);\n    }\n  }\n\n  finishPlaceholder(node, expectedNode) {\n    const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n    node.expectedNode = expectedNode;\n    return isFinished ? node : this.finishNode(node, \"Placeholder\");\n  }\n\n  getTokenFromCode(code) {\n    if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {\n      return this.finishOp(types.placeholder, 2);\n    }\n\n    return super.getTokenFromCode(...arguments);\n  }\n\n  parseExprAtom() {\n    return this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments);\n  }\n\n  parseIdentifier() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(...arguments);\n  }\n\n  checkReservedWord(word) {\n    if (word !== undefined) super.checkReservedWord(...arguments);\n  }\n\n  parseBindingAtom() {\n    return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments);\n  }\n\n  checkLVal(expr) {\n    if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n  }\n\n  toAssignable(node) {\n    if (node && node.type === \"Placeholder\" && node.expectedNode === \"Expression\") {\n      node.expectedNode = \"Pattern\";\n      return node;\n    }\n\n    return super.toAssignable(...arguments);\n  }\n\n  verifyBreakContinue(node) {\n    if (node.label && node.label.type === \"Placeholder\") return;\n    super.verifyBreakContinue(...arguments);\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type !== \"Placeholder\" || expr.extra && expr.extra.parenthesized) {\n      return super.parseExpressionStatement(...arguments);\n    }\n\n    if (this.match(types.colon)) {\n      const stmt = node;\n      stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n      this.next();\n      stmt.body = this.parseStatement(\"label\");\n      return this.finishNode(stmt, \"LabeledStatement\");\n    }\n\n    this.semicolon();\n    node.name = expr.name;\n    return this.finishPlaceholder(node, \"Statement\");\n  }\n\n  parseBlock() {\n    return this.parsePlaceholder(\"BlockStatement\") || super.parseBlock(...arguments);\n  }\n\n  parseFunctionId() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(...arguments);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n    this.next();\n    this.takeDecorators(node);\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n\n    if (placeholder) {\n      if (this.match(types._extends) || this.match(types.placeholder) || this.match(types.braceL)) {\n        node.id = placeholder;\n      } else if (optionalId || !isStatement) {\n        node.id = null;\n        node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n        return this.finishNode(node, type);\n      } else {\n        this.unexpected(null, \"A class name is required\");\n      }\n    } else {\n      this.parseClassId(node, isStatement, optionalId);\n    }\n\n    this.parseClassSuper(node);\n    node.body = this.parsePlaceholder(\"ClassBody\") || this.parseClassBody(!!node.superClass);\n    return this.finishNode(node, type);\n  }\n\n  parseExport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseExport(...arguments);\n\n    if (!this.isContextual(\"from\") && !this.match(types.comma)) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    this.expectPlugin(\"exportDefaultFrom\");\n    const specifier = this.startNode();\n    specifier.exported = placeholder;\n    node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n    return super.parseExport(node);\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (node.specifiers && node.specifiers.length > 0) {\n      return true;\n    }\n\n    return super.maybeParseExportDefaultSpecifier(...arguments);\n  }\n\n  checkExport(node) {\n    const {\n      specifiers\n    } = node;\n\n    if (specifiers && specifiers.length) {\n      node.specifiers = specifiers.filter(node => node.exported.type === \"Placeholder\");\n    }\n\n    super.checkExport(node);\n    node.specifiers = specifiers;\n  }\n\n  parseImport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseImport(...arguments);\n    node.specifiers = [];\n\n    if (!this.isContextual(\"from\") && !this.match(types.comma)) {\n      node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    const specifier = this.startNodeAtNode(placeholder);\n    specifier.local = placeholder;\n    this.finishNode(specifier, \"ImportDefaultSpecifier\");\n    node.specifiers.push(specifier);\n\n    if (this.eat(types.comma)) {\n      const hasStarImport = this.maybeParseStarImportSpecifier(node);\n      if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n    }\n\n    this.expectContextual(\"from\");\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    return this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource(...arguments);\n  }\n\n});\n\nvar v8intrinsic = (superClass => class extends superClass {\n  parseV8Intrinsic() {\n    if (this.match(types.modulo)) {\n      const v8IntrinsicStart = this.state.start;\n      const node = this.startNode();\n      this.eat(types.modulo);\n\n      if (this.match(types.name)) {\n        const name = this.parseIdentifierName(this.state.start);\n        const identifier = this.createIdentifier(node, name);\n        identifier.type = \"V8IntrinsicIdentifier\";\n\n        if (this.match(types.parenL)) {\n          return identifier;\n        }\n      }\n\n      this.unexpected(v8IntrinsicStart);\n    }\n  }\n\n  parseExprAtom() {\n    return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n  }\n\n});\n\nfunction hasPlugin(plugins, name) {\n  return plugins.some(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n}\nfunction getPluginOption(plugins, name, option) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\nconst PIPELINE_PROPOSALS = [\"minimal\", \"smart\", \"fsharp\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\nfunction validatePlugins(plugins) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\n    }\n\n    const decoratorsBeforeExport = getPluginOption(plugins, \"decorators\", \"decoratorsBeforeExport\");\n\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" + \" whose value must be a boolean. If you are migrating from\" + \" Babylon/Babel 6 or want to use the old decorators proposal, you\" + \" should use the 'decorators-legacy' plugin instead of 'decorators'.\");\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\") && !PIPELINE_PROPOSALS.includes(getPluginOption(plugins, \"pipelineOperator\", \"proposal\"))) {\n    throw new Error(\"'pipelineOperator' requires 'proposal' option whose value should be one of: \" + PIPELINE_PROPOSALS.map(p => `'${p}'`).join(\", \"));\n  }\n\n  if (hasPlugin(plugins, \"recordAndTuple\") && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"))) {\n    throw new Error(\"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" + RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"));\n  }\n}\nconst mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders\n};\nconst mixinPluginNames = Object.keys(mixinPlugins);\n\nconst defaultOptions = {\n  sourceType: \"script\",\n  sourceFilename: undefined,\n  startLine: 1,\n  allowAwaitOutsideFunction: false,\n  allowReturnOutsideFunction: false,\n  allowImportExportEverywhere: false,\n  allowSuperOutsideMethod: false,\n  allowUndeclaredExports: false,\n  plugins: [],\n  strictMode: null,\n  ranges: false,\n  tokens: false,\n  createParenthesizedExpressions: false,\n  errorRecovery: false\n};\nfunction getOptions(opts) {\n  const options = {};\n\n  for (let _i = 0, _Object$keys = Object.keys(defaultOptions); _i < _Object$keys.length; _i++) {\n    const key = _Object$keys[_i];\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n\n  return options;\n}\n\nclass State {\n  constructor() {\n    this.errors = [];\n    this.potentialArrowAt = -1;\n    this.noArrowAt = [];\n    this.noArrowParamsConversionAt = [];\n    this.inParameters = false;\n    this.maybeInArrowParameters = false;\n    this.maybeInAsyncArrowHead = false;\n    this.inPipeline = false;\n    this.inType = false;\n    this.noAnonFunctionType = false;\n    this.inPropertyName = false;\n    this.hasFlowComment = false;\n    this.isIterator = false;\n    this.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n    this.soloAwait = false;\n    this.inFSharpPipelineDirectBody = false;\n    this.labels = [];\n    this.decoratorStack = [[]];\n    this.yieldPos = -1;\n    this.awaitPos = -1;\n    this.comments = [];\n    this.trailingComments = [];\n    this.leadingComments = [];\n    this.commentStack = [];\n    this.commentPreviousNode = null;\n    this.pos = 0;\n    this.lineStart = 0;\n    this.type = types.eof;\n    this.value = null;\n    this.start = 0;\n    this.end = 0;\n    this.lastTokEndLoc = null;\n    this.lastTokStartLoc = null;\n    this.lastTokStart = 0;\n    this.lastTokEnd = 0;\n    this.context = [types$1.braceStatement];\n    this.exprAllowed = true;\n    this.containsEsc = false;\n    this.octalPositions = [];\n    this.exportedIdentifiers = [];\n    this.tokensLength = 0;\n  }\n\n  init(options) {\n    this.strict = options.strictMode === false ? false : options.sourceType === \"module\";\n    this.curLine = options.startLine;\n    this.startLoc = this.endLoc = this.curPosition();\n  }\n\n  curPosition() {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n\n  clone(skipArrays) {\n    const state = new State();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      state[key] = val;\n    }\n\n    return state;\n  }\n\n}\n\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\nconst VALID_REGEX_FLAGS = new Set([\"g\", \"m\", \"s\", \"i\", \"y\", \"u\"]);\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [46, 66, 69, 79, 95, 98, 101, 111],\n  hex: [46, 88, 95, 120]\n};\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [48, 49];\nallowedNumericSeparatorSiblings.oct = [...allowedNumericSeparatorSiblings.bin, 50, 51, 52, 53, 54, 55];\nallowedNumericSeparatorSiblings.dec = [...allowedNumericSeparatorSiblings.oct, 56, 57];\nallowedNumericSeparatorSiblings.hex = [...allowedNumericSeparatorSiblings.dec, 65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102];\nclass Token {\n  constructor(state) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n}\nclass Tokenizer extends LocationParser {\n  constructor(options, input) {\n    super();\n    this.tokens = [];\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token) {\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  next() {\n    if (!this.isLookahead) {\n      this.checkKeywordEscapes();\n\n      if (this.options.tokens) {\n        this.pushToken(new Token(this.state));\n      }\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type) {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  match(type) {\n    return this.state.type === type;\n  }\n\n  lookahead() {\n    const old = this.state;\n    this.state = old.clone(true);\n    this.isLookahead = true;\n    this.next();\n    this.isLookahead = false;\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart() {\n    const thisTokEnd = this.state.pos;\n    skipWhiteSpace.lastIndex = thisTokEnd;\n    const skip = skipWhiteSpace.exec(this.input);\n    return thisTokEnd + skip[0].length;\n  }\n\n  lookaheadCharCode() {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  setStrict(strict) {\n    this.state.strict = strict;\n    if (!this.match(types.num) && !this.match(types.string)) return;\n    this.state.pos = this.state.start;\n\n    while (this.state.pos < this.state.lineStart) {\n      this.state.lineStart = this.input.lastIndexOf(\"\\n\", this.state.lineStart - 2) + 1;\n      --this.state.curLine;\n    }\n\n    this.nextToken();\n  }\n\n  curContext() {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  nextToken() {\n    const curContext = this.curContext();\n    if (!curContext || !curContext.preserveSpace) this.skipSpace();\n    this.state.octalPositions = [];\n    this.state.start = this.state.pos;\n    this.state.startLoc = this.state.curPosition();\n\n    if (this.state.pos >= this.length) {\n      this.finishToken(types.eof);\n      return;\n    }\n\n    const override = curContext == null ? void 0 : curContext.override;\n\n    if (override) {\n      override(this);\n    } else {\n      this.getTokenFromCode(this.input.codePointAt(this.state.pos));\n    }\n  }\n\n  pushComment(block, text, start, end, startLoc, endLoc) {\n    const comment = {\n      type: block ? \"CommentBlock\" : \"CommentLine\",\n      value: text,\n      start: start,\n      end: end,\n      loc: new SourceLocation(startLoc, endLoc)\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    this.state.comments.push(comment);\n    this.addComment(comment);\n  }\n\n  skipBlockComment() {\n    const startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", this.state.pos + 2);\n    if (end === -1) throw this.raise(start, Errors.UnterminatedComment);\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start;\n    let match;\n\n    while ((match = lineBreakG.exec(this.input)) && match.index < this.state.pos) {\n      ++this.state.curLine;\n      this.state.lineStart = match.index + match[0].length;\n    }\n\n    if (this.isLookahead) return;\n    this.pushComment(true, this.input.slice(start + 2, end), start, this.state.pos, startLoc, this.state.curPosition());\n  }\n\n  skipLineComment(startSkip) {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt(this.state.pos += startSkip);\n\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    if (this.isLookahead) return;\n    this.pushComment(false, this.input.slice(start + startSkip, this.state.pos), start, this.state.pos, startLoc, this.state.curPosition());\n  }\n\n  skipSpace() {\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 32:\n        case 160:\n        case 9:\n          ++this.state.pos;\n          break;\n\n        case 13:\n          if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n            ++this.state.pos;\n          }\n\n        case 10:\n        case 8232:\n        case 8233:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case 47:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case 42:\n              this.skipBlockComment();\n              break;\n\n            case 47:\n              this.skipLineComment(2);\n              break;\n\n            default:\n              break loop;\n          }\n\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else {\n            break loop;\n          }\n\n      }\n    }\n  }\n\n  finishToken(type, val) {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n    if (!this.isLookahead) this.updateContext(prevType);\n  }\n\n  readToken_numberSign() {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.input.charCodeAt(nextPos);\n\n    if (next >= 48 && next <= 57) {\n      throw this.raise(this.state.pos, Errors.UnexpectedDigitAfterHash);\n    }\n\n    if (next === 123 || next === 91 && this.hasPlugin(\"recordAndTuple\")) {\n      this.expectPlugin(\"recordAndTuple\");\n\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(this.state.pos, next === 123 ? Errors.RecordExpressionHashIncorrectStartSyntaxType : Errors.TupleExpressionHashIncorrectStartSyntaxType);\n      }\n\n      if (next === 123) {\n        this.finishToken(types.braceHashL);\n      } else {\n        this.finishToken(types.bracketHashL);\n      }\n\n      this.state.pos += 2;\n    } else {\n      this.finishOp(types.hash, 1);\n    }\n  }\n\n  readToken_dot() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next >= 48 && next <= 57) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\n      this.state.pos += 3;\n      this.finishToken(types.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types.dot);\n    }\n  }\n\n  readToken_slash() {\n    if (this.state.exprAllowed && !this.state.inType) {\n      ++this.state.pos;\n      this.readRegexp();\n      return;\n    }\n\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n    } else {\n      this.finishOp(types.slash, 1);\n    }\n  }\n\n  readToken_interpreter() {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== 33) return false;\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n    this.finishToken(types.interpreterDirective, value);\n    return true;\n  }\n\n  readToken_mult_modulo(code) {\n    let type = code === 42 ? types.star : types.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n    const exprAllowed = this.state.exprAllowed;\n\n    if (code === 42 && next === 42) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = types.exponent;\n    }\n\n    if (next === 61 && !exprAllowed) {\n      width++;\n      type = types.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n        this.finishOp(types.assign, 3);\n      } else {\n        this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2);\n      }\n\n      return;\n    }\n\n    if (code === 124) {\n      if (next === 62) {\n        this.finishOp(types.pipeline, 2);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 125) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, Errors.RecordExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.finishOp(types.braceBarR, 2);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 93) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, Errors.TupleExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.finishOp(types.bracketBarR, 2);\n        return;\n      }\n    }\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n      return;\n    }\n\n    this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1);\n  }\n\n  readToken_caret() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n    } else {\n      this.finishOp(types.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_plus_min(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (next === 45 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 62 && (this.state.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.pos)))) {\n        this.skipLineComment(3);\n        this.skipSpace();\n        this.nextToken();\n        return;\n      }\n\n      this.finishOp(types.incDec, 2);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n    } else {\n      this.finishOp(types.plusMin, 1);\n    }\n  }\n\n  readToken_lt_gt(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    let size = 1;\n\n    if (next === code) {\n      size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;\n\n      if (this.input.charCodeAt(this.state.pos + size) === 61) {\n        this.finishOp(types.assign, size + 1);\n        return;\n      }\n\n      this.finishOp(types.bitShift, size);\n      return;\n    }\n\n    if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 45 && this.input.charCodeAt(this.state.pos + 3) === 45) {\n      this.skipLineComment(4);\n      this.skipSpace();\n      this.nextToken();\n      return;\n    }\n\n    if (next === 61) {\n      size = 2;\n    }\n\n    this.finishOp(types.relational, size);\n  }\n\n  readToken_eq_excl(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types.equality, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n      return;\n    }\n\n    if (code === 61 && next === 62) {\n      this.state.pos += 2;\n      this.finishToken(types.arrow);\n      return;\n    }\n\n    this.finishOp(code === 61 ? types.eq : types.bang, 1);\n  }\n\n  readToken_question() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n\n    if (next === 63 && !this.state.inType) {\n      if (next2 === 61) {\n        this.finishOp(types.assign, 3);\n      } else {\n        this.finishOp(types.nullishCoalescing, 2);\n      }\n    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n      this.state.pos += 2;\n      this.finishToken(types.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types.question);\n    }\n  }\n\n  getTokenFromCode(code) {\n    switch (code) {\n      case 46:\n        this.readToken_dot();\n        return;\n\n      case 40:\n        ++this.state.pos;\n        this.finishToken(types.parenL);\n        return;\n\n      case 41:\n        ++this.state.pos;\n        this.finishToken(types.parenR);\n        return;\n\n      case 59:\n        ++this.state.pos;\n        this.finishToken(types.semi);\n        return;\n\n      case 44:\n        ++this.state.pos;\n        this.finishToken(types.comma);\n        return;\n\n      case 91:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, Errors.TupleExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.finishToken(types.bracketBarL);\n          this.state.pos += 2;\n        } else {\n          ++this.state.pos;\n          this.finishToken(types.bracketL);\n        }\n\n        return;\n\n      case 93:\n        ++this.state.pos;\n        this.finishToken(types.bracketR);\n        return;\n\n      case 123:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, Errors.RecordExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.finishToken(types.braceBarL);\n          this.state.pos += 2;\n        } else {\n          ++this.state.pos;\n          this.finishToken(types.braceL);\n        }\n\n        return;\n\n      case 125:\n        ++this.state.pos;\n        this.finishToken(types.braceR);\n        return;\n\n      case 58:\n        if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n          this.finishOp(types.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(types.colon);\n        }\n\n        return;\n\n      case 63:\n        this.readToken_question();\n        return;\n\n      case 96:\n        ++this.state.pos;\n        this.finishToken(types.backQuote);\n        return;\n\n      case 48:\n        {\n          const next = this.input.charCodeAt(this.state.pos + 1);\n\n          if (next === 120 || next === 88) {\n            this.readRadixNumber(16);\n            return;\n          }\n\n          if (next === 111 || next === 79) {\n            this.readRadixNumber(8);\n            return;\n          }\n\n          if (next === 98 || next === 66) {\n            this.readRadixNumber(2);\n            return;\n          }\n        }\n\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        this.readNumber(false);\n        return;\n\n      case 34:\n      case 39:\n        this.readString(code);\n        return;\n\n      case 47:\n        this.readToken_slash();\n        return;\n\n      case 37:\n      case 42:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case 124:\n      case 38:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case 94:\n        this.readToken_caret();\n        return;\n\n      case 43:\n      case 45:\n        this.readToken_plus_min(code);\n        return;\n\n      case 60:\n      case 62:\n        this.readToken_lt_gt(code);\n        return;\n\n      case 61:\n      case 33:\n        this.readToken_eq_excl(code);\n        return;\n\n      case 126:\n        this.finishOp(types.tilde, 1);\n        return;\n\n      case 64:\n        ++this.state.pos;\n        this.finishToken(types.at);\n        return;\n\n      case 35:\n        this.readToken_numberSign();\n        return;\n\n      case 92:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord();\n          return;\n        }\n\n    }\n\n    throw this.raise(this.state.pos, Errors.InvalidOrUnexpectedToken, String.fromCodePoint(code));\n  }\n\n  finishOp(type, size) {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp() {\n    const start = this.state.pos;\n    let escaped, inClass;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(start, Errors.UnterminatedRegExp);\n      }\n\n      const ch = this.input.charAt(this.state.pos);\n\n      if (lineBreak.test(ch)) {\n        throw this.raise(start, Errors.UnterminatedRegExp);\n      }\n\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === \"[\") {\n          inClass = true;\n        } else if (ch === \"]\" && inClass) {\n          inClass = false;\n        } else if (ch === \"/\" && !inClass) {\n          break;\n        }\n\n        escaped = ch === \"\\\\\";\n      }\n\n      ++this.state.pos;\n    }\n\n    const content = this.input.slice(start, this.state.pos);\n    ++this.state.pos;\n    let mods = \"\";\n\n    while (this.state.pos < this.length) {\n      const char = this.input[this.state.pos];\n      const charCode = this.input.codePointAt(this.state.pos);\n\n      if (VALID_REGEX_FLAGS.has(char)) {\n        if (mods.indexOf(char) > -1) {\n          this.raise(this.state.pos + 1, Errors.DuplicateRegExpFlags);\n        }\n      } else if (isIdentifierChar(charCode) || charCode === 92) {\n        this.raise(this.state.pos + 1, Errors.MalformedRegExpFlags);\n      } else {\n        break;\n      }\n\n      ++this.state.pos;\n      mods += char;\n    }\n\n    this.finishToken(types.regexp, {\n      pattern: content,\n      flags: mods\n    });\n  }\n\n  readInt(radix, len, forceLen, allowNumSeparator = true) {\n    const start = this.state.pos;\n    const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings = radix === 16 ? allowedNumericSeparatorSiblings.hex : radix === 10 ? allowedNumericSeparatorSiblings.dec : radix === 8 ? allowedNumericSeparatorSiblings.oct : allowedNumericSeparatorSiblings.bin;\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (this.hasPlugin(\"numericSeparator\")) {\n        if (code === 95) {\n          const prev = this.input.charCodeAt(this.state.pos - 1);\n          const next = this.input.charCodeAt(this.state.pos + 1);\n\n          if (allowedSiblings.indexOf(next) === -1) {\n            this.raise(this.state.pos, Errors.UnexpectedNumericSeparator);\n          } else if (forbiddenSiblings.indexOf(prev) > -1 || forbiddenSiblings.indexOf(next) > -1 || Number.isNaN(next)) {\n            this.raise(this.state.pos, Errors.UnexpectedNumericSeparator);\n          }\n\n          if (!allowNumSeparator) {\n            this.raise(this.state.pos, Errors.NumericSeparatorInEscapeSequence);\n          }\n\n          ++this.state.pos;\n          continue;\n        }\n      }\n\n      if (code >= 97) {\n        val = code - 97 + 10;\n      } else if (code >= 65) {\n        val = code - 65 + 10;\n      } else if (_isDigit(code)) {\n        val = code - 48;\n      } else {\n        val = Infinity;\n      }\n\n      if (val >= radix) {\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(this.state.start + i + 2, Errors.InvalidDigit, radix);\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n\n    if (this.state.pos === start || len != null && this.state.pos - start !== len || invalid) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix) {\n    const start = this.state.pos;\n    let isBigInt = false;\n    this.state.pos += 2;\n    const val = this.readInt(radix);\n\n    if (val == null) {\n      this.raise(this.state.start + 2, Errors.InvalidDigit, radix);\n    }\n\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 95) {\n      this.expectPlugin(\"numericSeparator\", this.state.pos);\n    }\n\n    if (next === 110) {\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      throw this.raise(this.state.pos, Errors.NumberIdentifier);\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(types.bigint, str);\n      return;\n    }\n\n    this.finishToken(types.num, val);\n  }\n\n  readNumber(startsWithDot) {\n    const start = this.state.pos;\n    let isFloat = false;\n    let isBigInt = false;\n    let isNonOctalDecimalInt = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, Errors.InvalidNumber);\n    }\n\n    let octal = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n\n    if (octal) {\n      if (this.state.strict) {\n        this.raise(start, Errors.StrictOctalLiteral);\n      }\n\n      if (/[89]/.test(this.input.slice(start, this.state.pos))) {\n        octal = false;\n        isNonOctalDecimalInt = true;\n      }\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 46 && !octal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if ((next === 69 || next === 101) && !octal) {\n      next = this.input.charCodeAt(++this.state.pos);\n\n      if (next === 43 || next === 45) {\n        ++this.state.pos;\n      }\n\n      if (this.readInt(10) === null) this.raise(start, \"Invalid number\");\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (this.hasPlugin(\"numericSeparator\") && (octal || isNonOctalDecimalInt)) {\n      const underscorePos = this.input.slice(start, this.state.pos).indexOf(\"_\");\n\n      if (underscorePos > 0) {\n        this.raise(underscorePos + start, Errors.ZeroDigitNumericSeparator);\n      }\n    }\n\n    if (next === 95) {\n      this.expectPlugin(\"numericSeparator\", this.state.pos);\n    }\n\n    if (next === 110) {\n      if (isFloat || octal || isNonOctalDecimalInt) {\n        this.raise(start, \"Invalid BigIntLiteral\");\n      }\n\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      throw this.raise(this.state.pos, Errors.NumberIdentifier);\n    }\n\n    const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(types.bigint, str);\n      return;\n    }\n\n    const val = octal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(types.num, val);\n  }\n\n  readCodePoint(throwOnInvalid) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === 123) {\n      const codePos = ++this.state.pos;\n      code = this.readHexChar(this.input.indexOf(\"}\", this.state.pos) - this.state.pos, true, throwOnInvalid);\n      ++this.state.pos;\n\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, Errors.InvalidCodePoint);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n\n    return code;\n  }\n\n  readString(quote) {\n    let out = \"\",\n        chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, Errors.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (ch === 8232 || ch === 8233) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(this.state.start, Errors.UnterminatedString);\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(types.string, out);\n  }\n\n  readTmplToken() {\n    let out = \"\",\n        chunkStart = this.state.pos,\n        containsInvalid = false;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, Errors.UnterminatedTemplate);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {\n        if (this.state.pos === this.state.start && this.match(types.template)) {\n          if (ch === 36) {\n            this.state.pos += 2;\n            this.finishToken(types.dollarBraceL);\n            return;\n          } else {\n            ++this.state.pos;\n            this.finishToken(types.backQuote);\n            return;\n          }\n        }\n\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(types.template, containsInvalid ? null : out);\n        return;\n      }\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n\n        switch (ch) {\n          case 13:\n            if (this.input.charCodeAt(this.state.pos) === 10) {\n              ++this.state.pos;\n            }\n\n          case 10:\n            out += \"\\n\";\n            break;\n\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  readEscapedChar(inTemplate) {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n\n    switch (ch) {\n      case 110:\n        return \"\\n\";\n\n      case 114:\n        return \"\\r\";\n\n      case 120:\n        {\n          const code = this.readHexChar(2, false, throwOnInvalid);\n          return code === null ? null : String.fromCharCode(code);\n        }\n\n      case 117:\n        {\n          const code = this.readCodePoint(throwOnInvalid);\n          return code === null ? null : String.fromCodePoint(code);\n        }\n\n      case 116:\n        return \"\\t\";\n\n      case 98:\n        return \"\\b\";\n\n      case 118:\n        return \"\\u000b\";\n\n      case 102:\n        return \"\\f\";\n\n      case 13:\n        if (this.input.charCodeAt(this.state.pos) === 10) {\n          ++this.state.pos;\n        }\n\n      case 10:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n\n      case 8232:\n      case 8233:\n        return \"\";\n\n      case 56:\n      case 57:\n        if (inTemplate) {\n          return null;\n        }\n\n      default:\n        if (ch >= 48 && ch <= 55) {\n          const codePos = this.state.pos - 1;\n          let octalStr = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/)[0];\n          let octal = parseInt(octalStr, 8);\n\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n\n          if (octalStr !== \"0\" || next === 56 || next === 57) {\n            if (inTemplate) {\n              return null;\n            } else if (this.state.strict) {\n              this.raise(codePos, Errors.StrictOctalLiteral);\n            } else {\n              this.state.octalPositions.push(codePos);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  readHexChar(len, forceLen, throwOnInvalid) {\n    const codePos = this.state.pos;\n    const n = this.readInt(16, len, forceLen, false);\n\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, Errors.InvalidEscapeSequence);\n      } else {\n        this.state.pos = codePos - 1;\n      }\n    }\n\n    return n;\n  }\n\n  readWord1() {\n    let word = \"\";\n    this.state.containsEsc = false;\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n\n    while (this.state.pos < this.length) {\n      const ch = this.input.codePointAt(this.state.pos);\n\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (this.state.isIterator && ch === 64) {\n        ++this.state.pos;\n      } else if (ch === 92) {\n        this.state.containsEsc = true;\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.pos;\n        const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== 117) {\n          this.raise(this.state.pos, Errors.MissingUnicodeEscape);\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(escStart, Errors.EscapedCharNotAnIdentifier);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  isIterator(word) {\n    return word === \"@@iterator\" || word === \"@@asyncIterator\";\n  }\n\n  readWord() {\n    const word = this.readWord1();\n    const type = keywords.get(word) || types.name;\n\n    if (this.state.isIterator && (!this.isIterator(word) || !this.state.inType)) {\n      this.raise(this.state.pos, Errors.InvalidIdentifier, word);\n    }\n\n    this.finishToken(type, word);\n  }\n\n  checkKeywordEscapes() {\n    const kw = this.state.type.keyword;\n\n    if (kw && this.state.containsEsc) {\n      this.raise(this.state.start, Errors.InvalidEscapedReservedWord, kw);\n    }\n  }\n\n  braceIsBlock(prevType) {\n    const parent = this.curContext();\n\n    if (parent === types$1.functionExpression || parent === types$1.functionStatement) {\n      return true;\n    }\n\n    if (prevType === types.colon && (parent === types$1.braceStatement || parent === types$1.braceExpression)) {\n      return !parent.isExpr;\n    }\n\n    if (prevType === types._return || prevType === types.name && this.state.exprAllowed) {\n      return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n    }\n\n    if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType === types.arrow) {\n      return true;\n    }\n\n    if (prevType === types.braceL) {\n      return parent === types$1.braceStatement;\n    }\n\n    if (prevType === types._var || prevType === types._const || prevType === types.name) {\n      return false;\n    }\n\n    if (prevType === types.relational) {\n      return true;\n    }\n\n    return !this.state.exprAllowed;\n  }\n\n  updateContext(prevType) {\n    const type = this.state.type;\n    let update;\n\n    if (type.keyword && (prevType === types.dot || prevType === types.questionDot)) {\n      this.state.exprAllowed = false;\n    } else if (update = type.updateContext) {\n      update.call(this, prevType);\n    } else {\n      this.state.exprAllowed = type.beforeExpr;\n    }\n  }\n\n}\n\nclass UtilParser extends Tokenizer {\n  addExtra(node, key, val) {\n    if (!node) return;\n    const extra = node.extra = node.extra || {};\n    extra[key] = val;\n  }\n\n  isRelational(op) {\n    return this.match(types.relational) && this.state.value === op;\n  }\n\n  isLookaheadRelational(op) {\n    const next = this.nextTokenStart();\n\n    if (this.input.charAt(next) === op) {\n      if (next + 1 === this.input.length) {\n        return true;\n      }\n\n      const afterNext = this.input.charCodeAt(next + 1);\n      return afterNext !== op.charCodeAt(0) && afterNext !== 61;\n    }\n\n    return false;\n  }\n\n  expectRelational(op) {\n    if (this.isRelational(op)) {\n      this.next();\n    } else {\n      this.unexpected(null, types.relational);\n    }\n  }\n\n  isContextual(name) {\n    return this.match(types.name) && this.state.value === name && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart, name) {\n    const nameEnd = nameStart + name.length;\n    return this.input.slice(nameStart, nameEnd) === name && (nameEnd === this.input.length || !isIdentifierChar(this.input.charCodeAt(nameEnd)));\n  }\n\n  isLookaheadContextual(name) {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  eatContextual(name) {\n    return this.isContextual(name) && this.eat(types.name);\n  }\n\n  expectContextual(name, message) {\n    if (!this.eatContextual(name)) this.unexpected(null, message);\n  }\n\n  canInsertSemicolon() {\n    return this.match(types.eof) || this.match(types.braceR) || this.hasPrecedingLineBreak();\n  }\n\n  hasPrecedingLineBreak() {\n    return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n  }\n\n  isLineTerminator() {\n    return this.eat(types.semi) || this.canInsertSemicolon();\n  }\n\n  semicolon() {\n    if (!this.isLineTerminator()) this.unexpected(null, types.semi);\n  }\n\n  expect(type, pos) {\n    this.eat(type) || this.unexpected(pos, type);\n  }\n\n  assertNoSpace(message = \"Unexpected space.\") {\n    if (this.state.start > this.state.lastTokEnd) {\n      this.raise(this.state.lastTokEnd, message);\n    }\n  }\n\n  unexpected(pos, messageOrType = \"Unexpected token\") {\n    if (typeof messageOrType !== \"string\") {\n      messageOrType = `Unexpected token, expected \"${messageOrType.label}\"`;\n    }\n\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n  }\n\n  expectPlugin(name, pos) {\n    if (!this.hasPlugin(name)) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: [name]\n      }, `This experimental syntax requires enabling the parser plugin: '${name}'`);\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(names, pos) {\n    if (!names.some(n => this.hasPlugin(n))) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: names\n      }, `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(\", \")}'`);\n    }\n  }\n\n  checkYieldAwaitInDefaultParams() {\n    if (this.state.yieldPos !== -1 && (this.state.awaitPos === -1 || this.state.yieldPos < this.state.awaitPos)) {\n      this.raise(this.state.yieldPos, \"Yield cannot be used as name inside a generator function\");\n    }\n\n    if (this.state.awaitPos !== -1) {\n      this.raise(this.state.awaitPos, \"Await cannot be used as name inside an async function\");\n    }\n  }\n\n  tryParse(fn, oldState = this.state.clone()) {\n    const abortSignal = {\n      node: null\n    };\n\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n\n      if (error instanceof SyntaxError) {\n        return {\n          node: null,\n          error,\n          thrown: true,\n          aborted: false,\n          failState\n        };\n      }\n\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(refExpressionErrors, andThrow) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssign,\n      doubleProto\n    } = refExpressionErrors;\n    if (!andThrow) return shorthandAssign >= 0 || doubleProto >= 0;\n\n    if (shorthandAssign >= 0) {\n      this.unexpected(shorthandAssign);\n    }\n\n    if (doubleProto >= 0) {\n      this.raise(doubleProto, Errors.DuplicateProto);\n    }\n  }\n\n}\nclass ExpressionErrors {\n  constructor() {\n    this.shorthandAssign = -1;\n    this.doubleProto = -1;\n  }\n\n}\n\nclass Node {\n  constructor(parser, pos, loc) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser && parser.options.ranges) this.range = [pos, 0];\n    if (parser && parser.filename) this.loc.filename = parser.filename;\n  }\n\n  __clone() {\n    const newNode = new Node();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n\n      if (key !== \"leadingComments\" && key !== \"trailingComments\" && key !== \"innerComments\") {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  }\n\n}\n\nclass NodeUtils extends UtilParser {\n  startNode() {\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt(pos, loc) {\n    return new Node(this, pos, loc);\n  }\n\n  startNodeAtNode(type) {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  finishNode(node, type) {\n    return this.finishNodeAt(node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);\n  }\n\n  finishNodeAt(node, type, pos, loc) {\n\n    node.type = type;\n    node.end = pos;\n    node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node, start, startLoc) {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(node, end = this.state.lastTokEnd, endLoc = this.state.lastTokEndLoc) {\n    node.end = end;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = end;\n  }\n\n  resetStartLocationFromNode(node, locationNode) {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n\n}\n\nconst unwrapParenthesizedExpression = node => {\n  return node.type === \"ParenthesizedExpression\" ? unwrapParenthesizedExpression(node.expression) : node;\n};\n\nclass LValParser extends NodeUtils {\n  toAssignable(node) {\n    var _node$extra, _node$extra3;\n\n    let parenthesized = undefined;\n\n    if (node.type === \"ParenthesizedExpression\" || ((_node$extra = node.extra) == null ? void 0 : _node$extra.parenthesized)) {\n      parenthesized = unwrapParenthesizedExpression(node);\n\n      if (parenthesized.type !== \"Identifier\" && parenthesized.type !== \"MemberExpression\") {\n        this.raise(node.start, Errors.InvalidParenthesizedAssignment);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n\n        for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {\n          var _node$extra2;\n\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast);\n\n          if (isLast && prop.type === \"RestElement\" && ((_node$extra2 = node.extra) == null ? void 0 : _node$extra2.trailingComma)) {\n            this.raiseRestNotLast(node.extra.trailingComma);\n          }\n        }\n\n        break;\n\n      case \"ObjectProperty\":\n        this.toAssignable(node.value);\n        break;\n\n      case \"SpreadElement\":\n        {\n          this.checkToRestConversion(node);\n          node.type = \"RestElement\";\n          const arg = node.argument;\n          this.toAssignable(arg);\n          break;\n        }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingComma);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(node.left.end, Errors.MissingEqInAssignment);\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.toAssignable(parenthesized);\n        break;\n    }\n\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(prop, isLast) {\n    if (prop.type === \"ObjectMethod\") {\n      const error = prop.kind === \"get\" || prop.kind === \"set\" ? Errors.PatternHasAccessor : Errors.PatternHasMethod;\n      this.raise(prop.key.start, error);\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raiseRestNotLast(prop.start);\n    } else {\n      this.toAssignable(prop);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos) {\n    let end = exprList.length;\n\n    if (end) {\n      const last = exprList[end - 1];\n\n      if (last && last.type === \"RestElement\") {\n        --end;\n      } else if (last && last.type === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        const arg = last.argument;\n        this.toAssignable(arg);\n\n        if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\" && arg.type !== \"ObjectPattern\") {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaPos) {\n          this.raiseTrailingCommaAfterRest(trailingCommaPos);\n        }\n\n        --end;\n      }\n    }\n\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n\n      if (elt) {\n        this.toAssignable(elt);\n\n        if (elt.type === \"RestElement\") {\n          this.raiseRestNotLast(elt.start);\n        }\n      }\n    }\n\n    return exprList;\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    return exprList;\n  }\n\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (let _i = 0; _i < exprList.length; _i++) {\n      const expr = exprList[_i];\n\n      if (expr && expr.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  parseSpread(refExpressionErrors, refNeedsArrowPos) {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssign(false, refExpressionErrors, undefined, refNeedsArrowPos);\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  parseRestBinding() {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types.bracketL:\n        {\n          const node = this.startNode();\n          this.next();\n          node.elements = this.parseBindingList(types.bracketR, 93, true);\n          return this.finishNode(node, \"ArrayPattern\");\n        }\n\n      case types.braceL:\n        return this.parseObj(types.braceR, true);\n    }\n\n    return this.parseIdentifier();\n  }\n\n  parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n      }\n\n      if (allowEmpty && this.match(types.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(types.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        this.checkCommaAfterRest(closeCharCode);\n        this.expect(close);\n        break;\n      } else {\n        const decorators = [];\n\n        if (this.match(types.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, Errors.UnsupportedParameterDecorator);\n        }\n\n        while (this.match(types.at)) {\n          decorators.push(this.parseDecorator());\n        }\n\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n\n    return elts;\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseAssignableListItemTypes(param) {\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    startLoc = startLoc || this.state.startLoc;\n    startPos = startPos || this.state.start;\n    left = left || this.parseBindingAtom();\n    if (!this.eat(types.eq)) return left;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssign();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  checkLVal(expr, bindingType = BIND_NONE, checkClashes, contextDescription, disallowLetBinding, strictModeChanged = false) {\n    switch (expr.type) {\n      case \"Identifier\":\n        if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(expr.name, this.inModule) : isStrictBindOnlyReservedWord(expr.name))) {\n          this.raise(expr.start, bindingType === BIND_NONE ? Errors.StrictEvalArguments : Errors.StrictEvalArgumentsBinding, expr.name);\n        }\n\n        if (checkClashes) {\n          const key = `_${expr.name}`;\n\n          if (checkClashes[key]) {\n            this.raise(expr.start, Errors.ParamDupe);\n          } else {\n            checkClashes[key] = true;\n          }\n        }\n\n        if (disallowLetBinding && expr.name === \"let\") {\n          this.raise(expr.start, Errors.LetInLexicalBinding);\n        }\n\n        if (!(bindingType & BIND_NONE)) {\n          this.scope.declareName(expr.name, bindingType, expr.start);\n        }\n\n        break;\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(expr.start, Errors.InvalidPropertyBindingPattern);\n        }\n\n        break;\n\n      case \"ObjectPattern\":\n        for (let _i2 = 0, _expr$properties = expr.properties; _i2 < _expr$properties.length; _i2++) {\n          let prop = _expr$properties[_i2];\n          if (prop.type === \"ObjectProperty\") prop = prop.value;else if (prop.type === \"ObjectMethod\") continue;\n          this.checkLVal(prop, bindingType, checkClashes, \"object destructuring pattern\", disallowLetBinding);\n        }\n\n        break;\n\n      case \"ArrayPattern\":\n        for (let _i3 = 0, _expr$elements = expr.elements; _i3 < _expr$elements.length; _i3++) {\n          const elem = _expr$elements[_i3];\n\n          if (elem) {\n            this.checkLVal(elem, bindingType, checkClashes, \"array destructuring pattern\", disallowLetBinding);\n          }\n        }\n\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(expr.left, bindingType, checkClashes, \"assignment pattern\");\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(expr.argument, bindingType, checkClashes, \"rest element\");\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(expr.expression, bindingType, checkClashes, \"parenthesized expression\");\n        break;\n\n      default:\n        {\n          this.raise(expr.start, bindingType === BIND_NONE ? Errors.InvalidLhs : Errors.InvalidLhsBinding, contextDescription);\n        }\n    }\n  }\n\n  checkToRestConversion(node) {\n    if (node.argument.type !== \"Identifier\" && node.argument.type !== \"MemberExpression\") {\n      this.raise(node.argument.start, Errors.InvalidRestAssignmentPattern);\n    }\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.match(types.comma)) {\n      if (this.lookaheadCharCode() === close) {\n        this.raiseTrailingCommaAfterRest(this.state.start);\n      } else {\n        this.raiseRestNotLast(this.state.start);\n      }\n    }\n  }\n\n  raiseRestNotLast(pos) {\n    throw this.raise(pos, Errors.ElementAfterRest);\n  }\n\n  raiseTrailingCommaAfterRest(pos) {\n    this.raise(pos, Errors.RestTrailingComma);\n  }\n\n}\n\nclass ExpressionParser extends LValParser {\n  checkDuplicatedProto(prop, protoRef, refExpressionErrors) {\n    if (prop.type === \"SpreadElement\" || prop.computed || prop.kind || prop.shorthand) {\n      return;\n    }\n\n    const key = prop.key;\n    const name = key.type === \"Identifier\" ? key.name : String(key.value);\n\n    if (name === \"__proto__\") {\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          if (refExpressionErrors.doubleProto === -1) {\n            refExpressionErrors.doubleProto = key.start;\n          }\n        } else {\n          this.raise(key.start, Errors.DuplicateProto);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  getExpression() {\n    let paramFlags = PARAM;\n\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n    this.nextToken();\n    const expr = this.parseExpression();\n\n    if (!this.match(types.eof)) {\n      this.unexpected();\n    }\n\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    return expr;\n  }\n\n  parseExpression(noIn, refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(noIn, refExpressionErrors);\n\n    if (this.match(types.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n\n      while (this.eat(types.comma)) {\n        node.expressions.push(this.parseMaybeAssign(noIn, refExpressionErrors));\n      }\n\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n\n    return expr;\n  }\n\n  parseMaybeAssign(noIn, refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    if (this.isContextual(\"yield\")) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield(noIn);\n\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n\n        return left;\n      } else {\n        this.state.exprAllowed = false;\n      }\n    }\n\n    let ownExpressionErrors;\n\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n\n    if (this.match(types.parenL) || this.match(types.name)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(noIn, refExpressionErrors, refNeedsArrowPos);\n\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n\n    if (this.state.type.isAssign) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (operator === \"??=\") {\n        this.expectPlugin(\"logicalAssignment\");\n      }\n\n      if (operator === \"||=\" || operator === \"&&=\") {\n        this.expectPlugin(\"logicalAssignment\");\n      }\n\n      if (this.match(types.eq)) {\n        node.left = this.toAssignable(left);\n        refExpressionErrors.doubleProto = -1;\n      } else {\n        node.left = left;\n      }\n\n      if (refExpressionErrors.shorthandAssign >= node.left.start) {\n        refExpressionErrors.shorthandAssign = -1;\n      }\n\n      this.checkLVal(left, undefined, undefined, \"assignment expression\");\n      this.next();\n      node.right = this.parseMaybeAssign(noIn);\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  parseMaybeConditional(noIn, refExpressionErrors, refNeedsArrowPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(noIn, refExpressionErrors);\n\n    if (expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt) {\n      return expr;\n    }\n\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    return this.parseConditional(expr, noIn, startPos, startLoc, refNeedsArrowPos);\n  }\n\n  parseConditional(expr, noIn, startPos, startLoc, refNeedsArrowPos) {\n    if (this.eat(types.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssign();\n      this.expect(types.colon);\n      node.alternate = this.parseMaybeAssign(noIn);\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprOps(noIn, refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnary(refExpressionErrors);\n\n    if (expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt) {\n      return expr;\n    }\n\n    if (this.checkExpressionErrors(refExpressionErrors, false)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1, noIn);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec, noIn) {\n    let prec = this.state.type.binop;\n\n    if (prec != null && (!noIn || !this.match(types._in))) {\n      if (prec > minPrec) {\n        const operator = this.state.value;\n\n        if (operator === \"|>\" && this.state.inFSharpPipelineDirectBody) {\n          return left;\n        }\n\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = operator;\n\n        if (operator === \"**\" && left.type === \"UnaryExpression\" && (this.options.createParenthesizedExpressions || !(left.extra && left.extra.parenthesized))) {\n          this.raise(left.argument.start, Errors.UnexpectedTokenUnaryExponentiation);\n        }\n\n        const op = this.state.type;\n        const logical = op === types.logicalOR || op === types.logicalAND;\n        const coalesce = op === types.nullishCoalescing;\n\n        if (op === types.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          this.state.inPipeline = true;\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\n        } else if (coalesce) {\n          prec = types.logicalAND.binop;\n        }\n\n        this.next();\n\n        if (op === types.pipeline && this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\") {\n          if (this.match(types.name) && this.state.value === \"await\" && this.prodParam.hasAwait) {\n            throw this.raise(this.state.start, Errors.UnexpectedAwaitAfterPipelineBody);\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec, noIn);\n        this.finishNode(node, logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\");\n        const nextOp = this.state.type;\n\n        if (coalesce && (nextOp === types.logicalOR || nextOp === types.logicalAND) || logical && nextOp === types.nullishCoalescing) {\n          throw this.raise(this.state.start, Errors.MixingCoalesceWithLogical);\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);\n      }\n    }\n\n    return left;\n  }\n\n  parseExprOpRightExpr(op, prec, noIn) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    switch (op) {\n      case types.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"smart\":\n            return this.withTopicPermittingContext(() => {\n              return this.parseSmartPipelineBody(this.parseExprOpBaseRightExpr(op, prec, noIn), startPos, startLoc);\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec, noIn);\n            });\n        }\n\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec, noIn);\n    }\n  }\n\n  parseExprOpBaseRightExpr(op, prec, noIn) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, op.rightAssociative ? prec - 1 : prec, noIn);\n  }\n\n  parseMaybeUnary(refExpressionErrors) {\n    if (this.isContextual(\"await\") && this.isAwaitAllowed()) {\n      return this.parseAwait();\n    } else if (this.state.type.prefix) {\n      const node = this.startNode();\n      const update = this.match(types.incDec);\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (node.operator === \"throw\") {\n        this.expectPlugin(\"throwExpressions\");\n      }\n\n      this.next();\n      node.argument = this.parseMaybeUnary();\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (update) {\n        this.checkLVal(node.argument, undefined, undefined, \"prefix operation\");\n      } else if (this.state.strict && node.operator === \"delete\") {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(node.start, Errors.StrictDelete);\n        } else if (arg.type === \"MemberExpression\" && arg.property.type === \"PrivateName\") {\n          this.raise(node.start, Errors.DeletePrivateField);\n        }\n      }\n\n      return this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n\n    while (this.state.type.postfix && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, undefined, undefined, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprSubscripts(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false\n    };\n\n    do {\n      const oldMaybeInAsyncArrowHead = this.state.maybeInAsyncArrowHead;\n\n      if (state.maybeAsyncArrow) {\n        this.state.maybeInAsyncArrowHead = true;\n      }\n\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n      state.maybeAsyncArrow = false;\n      this.state.maybeInAsyncArrowHead = oldMaybeInAsyncArrowHead;\n    } while (!state.stop);\n\n    return base;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!noCalls && this.eat(types.doubleColon)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.callee = this.parseNoCallExpr();\n      state.stop = true;\n      return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startPos, startLoc, noCalls);\n    }\n\n    let optional = false;\n\n    if (this.match(types.questionDot)) {\n      state.optionalChainMember = optional = true;\n\n      if (noCalls && this.lookaheadCharCode() === 40) {\n        state.stop = true;\n        return base;\n      }\n\n      this.next();\n    }\n\n    const computed = this.eat(types.bracketL);\n\n    if (optional && !this.match(types.parenL) && !this.match(types.backQuote) || computed || this.eat(types.dot)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.property = computed ? this.parseExpression() : optional ? this.parseIdentifier(true) : this.parseMaybePrivateName(true);\n      node.computed = computed;\n\n      if (node.property.type === \"PrivateName\") {\n        if (node.object.type === \"Super\") {\n          this.raise(startPos, Errors.SuperPrivateField);\n        }\n\n        this.classScope.usePrivateName(node.property.id.name, node.property.start);\n      }\n\n      if (computed) {\n        this.expect(types.bracketR);\n      }\n\n      if (state.optionalChainMember) {\n        node.optional = optional;\n        return this.finishNode(node, \"OptionalMemberExpression\");\n      } else {\n        return this.finishNode(node, \"MemberExpression\");\n      }\n    } else if (!noCalls && this.match(types.parenL)) {\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      const oldYieldPos = this.state.yieldPos;\n      const oldAwaitPos = this.state.awaitPos;\n      this.state.maybeInArrowParameters = true;\n      this.state.yieldPos = -1;\n      this.state.awaitPos = -1;\n      this.next();\n      let node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n\n      if (optional) {\n        node.optional = true;\n        node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n      } else {\n        node.arguments = this.parseCallExpressionArguments(types.parenR, state.maybeAsyncArrow, base.type === \"Import\", base.type !== \"Super\", node);\n      }\n\n      this.finishCallExpression(node, state.optionalChainMember);\n\n      if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n        state.stop = true;\n        node = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);\n        this.checkYieldAwaitInDefaultParams();\n        this.state.yieldPos = oldYieldPos;\n        this.state.awaitPos = oldAwaitPos;\n      } else {\n        this.toReferencedListDeep(node.arguments);\n        if (oldYieldPos !== -1) this.state.yieldPos = oldYieldPos;\n\n        if (!this.isAwaitAllowed() && !oldMaybeInArrowParameters || oldAwaitPos !== -1) {\n          this.state.awaitPos = oldAwaitPos;\n        }\n      }\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n      return node;\n    } else if (this.match(types.backQuote)) {\n      return this.parseTaggedTemplateExpression(startPos, startLoc, base, state);\n    } else {\n      state.stop = true;\n      return base;\n    }\n  }\n\n  parseTaggedTemplateExpression(startPos, startLoc, base, state, typeArguments) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (typeArguments) node.typeParameters = typeArguments;\n\n    if (state.optionalChainMember) {\n      this.raise(startPos, Errors.OptionalChainingNoTemplate);\n    }\n\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base) {\n    return base.type === \"Identifier\" && base.name === \"async\" && this.state.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;\n  }\n\n  finishCallExpression(node, optional) {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length !== 1) {\n        this.raise(node.start, Errors.ImportCallArity);\n      } else {\n        const importArg = node.arguments[0];\n\n        if (importArg && importArg.type === \"SpreadElement\") {\n          this.raise(importArg.start, Errors.ImportCallSpreadArgument);\n        }\n      }\n    }\n\n    return this.finishNode(node, optional ? \"OptionalCallExpression\" : \"CallExpression\");\n  }\n\n  parseCallExpressionArguments(close, possibleAsyncArrow, dynamicImport, allowPlaceholder, nodeForExtra) {\n    const elts = [];\n    let innerParenStart;\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n\n        if (this.match(close)) {\n          if (dynamicImport) {\n            this.raise(this.state.lastTokStart, Errors.ImportCallArgumentTrailingComma);\n          }\n\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      if (this.match(types.parenL) && !innerParenStart) {\n        innerParenStart = this.state.start;\n      }\n\n      elts.push(this.parseExprListItem(false, possibleAsyncArrow ? new ExpressionErrors() : undefined, possibleAsyncArrow ? {\n        start: 0\n      } : undefined, allowPlaceholder));\n    }\n\n    if (possibleAsyncArrow && innerParenStart && this.shouldParseAsyncArrow()) {\n      this.unexpected();\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return elts;\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    var _call$extra;\n\n    this.expect(types.arrow);\n    this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingComma);\n    return node;\n  }\n\n  parseNoCallExpr() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    if (this.state.type === types.slash) this.readRegexp();\n    const canBeArrow = this.state.potentialArrowAt === this.state.start;\n    let node;\n\n    switch (this.state.type) {\n      case types._super:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(types.parenL) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {\n          this.raise(node.start, Errors.SuperNotAllowed);\n        } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\n          this.raise(node.start, Errors.UnexpectedSuper);\n        }\n\n        if (!this.match(types.parenL) && !this.match(types.bracketL) && !this.match(types.dot)) {\n          this.raise(node.start, Errors.UnsupportedSuper);\n        }\n\n        return this.finishNode(node, \"Super\");\n\n      case types._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(types.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(types.parenL)) {\n          this.raise(this.state.lastTokStart, Errors.UnsupportedImport);\n        }\n\n        return this.finishNode(node, \"Import\");\n\n      case types._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case types.name:\n        {\n          node = this.startNode();\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (!containsEsc && id.name === \"async\" && this.match(types._function) && !this.canInsertSemicolon()) {\n            const last = this.state.context.length - 1;\n\n            if (this.state.context[last] !== types$1.functionStatement) {\n              throw new Error(\"Internal error\");\n            }\n\n            this.state.context[last] = types$1.functionExpression;\n            this.next();\n            return this.parseFunction(node, undefined, true);\n          } else if (canBeArrow && !containsEsc && id.name === \"async\" && this.match(types.name) && !this.canInsertSemicolon()) {\n            const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n            const oldMaybeInAsyncArrowHead = this.state.maybeInAsyncArrowHead;\n            const oldYieldPos = this.state.yieldPos;\n            const oldAwaitPos = this.state.awaitPos;\n            this.state.maybeInArrowParameters = true;\n            this.state.maybeInAsyncArrowHead = true;\n            this.state.yieldPos = -1;\n            this.state.awaitPos = -1;\n            const params = [this.parseIdentifier()];\n            this.expect(types.arrow);\n            this.checkYieldAwaitInDefaultParams();\n            this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n            this.state.maybeInAsyncArrowHead = oldMaybeInAsyncArrowHead;\n            this.state.yieldPos = oldYieldPos;\n            this.state.awaitPos = oldAwaitPos;\n            this.parseArrowExpression(node, params, true);\n            return node;\n          }\n\n          if (canBeArrow && this.match(types.arrow) && !this.canInsertSemicolon()) {\n            this.next();\n            this.parseArrowExpression(node, [id], false);\n            return node;\n          }\n\n          return id;\n        }\n\n      case types._do:\n        {\n          this.expectPlugin(\"doExpressions\");\n          const node = this.startNode();\n          this.next();\n          const oldLabels = this.state.labels;\n          this.state.labels = [];\n          node.body = this.parseBlock();\n          this.state.labels = oldLabels;\n          return this.finishNode(node, \"DoExpression\");\n        }\n\n      case types.regexp:\n        {\n          const value = this.state.value;\n          node = this.parseLiteral(value.value, \"RegExpLiteral\");\n          node.pattern = value.pattern;\n          node.flags = value.flags;\n          return node;\n        }\n\n      case types.num:\n        return this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n      case types.bigint:\n        return this.parseLiteral(this.state.value, \"BigIntLiteral\");\n\n      case types.string:\n        return this.parseLiteral(this.state.value, \"StringLiteral\");\n\n      case types._null:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"NullLiteral\");\n\n      case types._true:\n      case types._false:\n        return this.parseBooleanLiteral();\n\n      case types.parenL:\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n\n      case types.bracketBarL:\n      case types.bracketHashL:\n        {\n          this.expectPlugin(\"recordAndTuple\");\n          const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n          const close = this.state.type === types.bracketBarL ? types.bracketBarR : types.bracketR;\n          this.state.inFSharpPipelineDirectBody = false;\n          node = this.startNode();\n          this.next();\n          node.elements = this.parseExprList(close, true, refExpressionErrors, node);\n          this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n          return this.finishNode(node, \"TupleExpression\");\n        }\n\n      case types.bracketL:\n        {\n          const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n          this.state.inFSharpPipelineDirectBody = false;\n          node = this.startNode();\n          this.next();\n          node.elements = this.parseExprList(types.bracketR, true, refExpressionErrors, node);\n\n          if (!this.state.maybeInArrowParameters) {\n            this.toReferencedList(node.elements);\n          }\n\n          this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n          return this.finishNode(node, \"ArrayExpression\");\n        }\n\n      case types.braceBarL:\n      case types.braceHashL:\n        {\n          this.expectPlugin(\"recordAndTuple\");\n          const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n          const close = this.state.type === types.braceBarL ? types.braceBarR : types.braceR;\n          this.state.inFSharpPipelineDirectBody = false;\n          const ret = this.parseObj(close, false, true, refExpressionErrors);\n          this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n          return ret;\n        }\n\n      case types.braceL:\n        {\n          const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n          this.state.inFSharpPipelineDirectBody = false;\n          const ret = this.parseObj(types.braceR, false, false, refExpressionErrors);\n          this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n          return ret;\n        }\n\n      case types._function:\n        return this.parseFunctionExpression();\n\n      case types.at:\n        this.parseDecorators();\n\n      case types._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case types._new:\n        return this.parseNew();\n\n      case types.backQuote:\n        return this.parseTemplate(false);\n\n      case types.doubleColon:\n        {\n          node = this.startNode();\n          this.next();\n          node.object = null;\n          const callee = node.callee = this.parseNoCallExpr();\n\n          if (callee.type === \"MemberExpression\") {\n            return this.finishNode(node, \"BindExpression\");\n          } else {\n            throw this.raise(callee.start, Errors.UnsupportedBind);\n          }\n        }\n\n      case types.hash:\n        {\n          if (this.state.inPipeline) {\n            node = this.startNode();\n\n            if (this.getPluginOption(\"pipelineOperator\", \"proposal\") !== \"smart\") {\n              this.raise(node.start, Errors.PrimaryTopicRequiresSmartPipeline);\n            }\n\n            this.next();\n\n            if (!this.primaryTopicReferenceIsAllowedInCurrentTopicContext()) {\n              this.raise(node.start, Errors.PrimaryTopicNotAllowed);\n            }\n\n            this.registerTopicReference();\n            return this.finishNode(node, \"PipelinePrimaryTopicReference\");\n          }\n        }\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseBooleanLiteral() {\n    const node = this.startNode();\n    node.value = this.match(types._true);\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseMaybePrivateName(isPrivateNameAllowed) {\n    const isPrivate = this.match(types.hash);\n\n    if (isPrivate) {\n      this.expectOnePlugin([\"classPrivateProperties\", \"classPrivateMethods\"]);\n\n      if (!isPrivateNameAllowed) {\n        this.raise(this.state.pos, Errors.UnexpectedPrivateField);\n      }\n\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space between # and identifier\");\n      node.id = this.parseIdentifier(true);\n      return this.finishNode(node, \"PrivateName\");\n    } else {\n      return this.parseIdentifier(true);\n    }\n  }\n\n  parseFunctionExpression() {\n    const node = this.startNode();\n    let meta = this.startNode();\n    this.next();\n    meta = this.createIdentifier(meta, \"function\");\n\n    if (this.prodParam.hasYield && this.eat(types.dot)) {\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(node, meta, propertyName) {\n    node.meta = meta;\n\n    if (meta.name === \"function\" && propertyName === \"sent\") {\n      if (this.isContextual(propertyName)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        this.unexpected();\n      }\n    }\n\n    const containsEsc = this.state.containsEsc;\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(node.property.start, Errors.UnsupportedMetaProperty, meta.name, propertyName);\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  parseImportMetaProperty(node) {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.expect(types.dot);\n\n    if (this.isContextual(\"meta\")) {\n      this.expectPlugin(\"importMeta\");\n\n      if (!this.inModule) {\n        this.raiseWithData(id.start, {\n          code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n        }, Errors.ImportMetaOutsideModule);\n      }\n\n      this.sawUnambiguousESM = true;\n    } else if (!this.hasPlugin(\"importMeta\")) {\n      this.raise(id.start, Errors.ImportCallArityLtOne);\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteral(value, type, startPos, startLoc) {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n    const node = this.startNodeAt(startPos, startLoc);\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(startPos, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let val;\n    this.expect(types.parenL);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.state.inFSharpPipelineDirectBody = false;\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    const refNeedsArrowPos = {\n      start: 0\n    };\n    let first = true;\n    let spreadStart;\n    let optionalCommaStart;\n\n    while (!this.match(types.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma, refNeedsArrowPos.start || null);\n\n        if (this.match(types.parenR)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(types.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));\n        this.checkCommaAfterRest(41);\n        break;\n      } else {\n        exprList.push(this.parseMaybeAssign(false, refExpressionErrors, this.parseParenItem, refNeedsArrowPos));\n      }\n    }\n\n    const innerEndPos = this.state.start;\n    const innerEndLoc = this.state.startLoc;\n    this.expect(types.parenR);\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n\n    if (canBeArrow && this.shouldParseArrow() && (arrowNode = this.parseArrow(arrowNode))) {\n      if (!this.isAwaitAllowed() && !this.state.maybeInAsyncArrowHead) {\n        this.state.awaitPos = oldAwaitPos;\n      }\n\n      this.checkYieldAwaitInDefaultParams();\n      this.state.yieldPos = oldYieldPos;\n      this.state.awaitPos = oldAwaitPos;\n\n      for (let _i = 0; _i < exprList.length; _i++) {\n        const param = exprList[_i];\n\n        if (param.extra && param.extra.parenthesized) {\n          this.unexpected(param.extra.parenStart);\n        }\n      }\n\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n\n    if (oldYieldPos !== -1) this.state.yieldPos = oldYieldPos;\n    if (oldAwaitPos !== -1) this.state.awaitPos = oldAwaitPos;\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refExpressionErrors, true);\n    if (refNeedsArrowPos.start) this.unexpected(refNeedsArrowPos.start);\n    this.toReferencedListDeep(exprList, true);\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  shouldParseArrow() {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node) {\n    if (this.eat(types.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    return node;\n  }\n\n  parseNew() {\n    const node = this.startNode();\n    let meta = this.startNode();\n    this.next();\n    meta = this.createIdentifier(meta, \"new\");\n\n    if (this.eat(types.dot)) {\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        let error = Errors.UnexpectedNewTarget;\n\n        if (this.hasPlugin(\"classProperties\")) {\n          error += \" or class properties\";\n        }\n\n        this.raise(metaProp.start, error);\n      }\n\n      return metaProp;\n    }\n\n    node.callee = this.parseNoCallExpr();\n\n    if (node.callee.type === \"Import\") {\n      this.raise(node.callee.start, Errors.ImportCallNotNewExpression);\n    } else if (node.callee.type === \"OptionalMemberExpression\" || node.callee.type === \"OptionalCallExpression\") {\n      this.raise(this.state.lastTokEnd, Errors.OptionalChainingNoNew);\n    } else if (this.eat(types.questionDot)) {\n      this.raise(this.state.start, Errors.OptionalChainingNoNew);\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node) {\n    if (this.eat(types.parenL)) {\n      const args = this.parseExprList(types.parenR);\n      this.toReferencedList(args);\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  parseTemplateElement(isTagged) {\n    const elem = this.startNode();\n\n    if (this.state.value === null) {\n      if (!isTagged) {\n        this.raise(this.state.start + 1, Errors.InvalidEscapeSequenceTemplate);\n      }\n    }\n\n    elem.value = {\n      raw: this.input.slice(this.state.start, this.state.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.state.value\n    };\n    this.next();\n    elem.tail = this.match(types.backQuote);\n    return this.finishNode(elem, \"TemplateElement\");\n  }\n\n  parseTemplate(isTagged) {\n    const node = this.startNode();\n    this.next();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n\n    while (!curElt.tail) {\n      this.expect(types.dollarBraceL);\n      node.expressions.push(this.parseExpression());\n      this.expect(types.braceR);\n      node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n    }\n\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  parseObj(close, isPattern, isRecord, refExpressionErrors) {\n    const propHash = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n    node.properties = [];\n    this.next();\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n\n        if (this.match(close)) {\n          this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n          this.next();\n          break;\n        }\n      }\n\n      const prop = this.parseObjectMember(isPattern, refExpressionErrors);\n\n      if (!isPattern) {\n        this.checkDuplicatedProto(prop, propHash, refExpressionErrors);\n      }\n\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    let type = \"ObjectExpression\";\n\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n\n    return this.finishNode(node, type);\n  }\n\n  isAsyncProp(prop) {\n    return !prop.computed && prop.key.type === \"Identifier\" && prop.key.name === \"async\" && (this.match(types.name) || this.match(types.num) || this.match(types.string) || this.match(types.bracketL) || this.state.type.keyword || this.match(types.star)) && !this.hasPrecedingLineBreak();\n  }\n\n  parseObjectMember(isPattern, refExpressionErrors) {\n    let decorators = [];\n\n    if (this.match(types.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(this.state.start, Errors.UnsupportedPropertyDecorator);\n      }\n\n      while (this.match(types.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isGenerator = false;\n    let isAsync = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(types.ellipsis)) {\n      if (decorators.length) this.unexpected();\n\n      if (isPattern) {\n        this.next();\n        prop.argument = this.parseIdentifier();\n        this.checkCommaAfterRest(125);\n        return this.finishNode(prop, \"RestElement\");\n      }\n\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (isPattern || refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    if (!isPattern) {\n      isGenerator = this.eat(types.star);\n    }\n\n    const containsEsc = this.state.containsEsc;\n    this.parsePropertyName(prop, false);\n\n    if (!isPattern && !containsEsc && !isGenerator && this.isAsyncProp(prop)) {\n      isAsync = true;\n      isGenerator = this.eat(types.star);\n      this.parsePropertyName(prop, false);\n    } else {\n      isAsync = false;\n    }\n\n    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refExpressionErrors, containsEsc);\n    return prop;\n  }\n\n  isGetterOrSetterMethod(prop, isPattern) {\n    return !isPattern && !prop.computed && prop.key.type === \"Identifier\" && (prop.key.name === \"get\" || prop.key.name === \"set\") && (this.match(types.string) || this.match(types.num) || this.match(types.bracketL) || this.match(types.name) || !!this.state.type.keyword);\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  checkGetterSetterParams(method) {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const start = method.start;\n\n    if (method.params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, Errors.BadGetterArity);\n      } else {\n        this.raise(start, Errors.BadSetterArity);\n      }\n    }\n\n    if (method.kind === \"set\" && method.params[method.params.length - 1].type === \"RestElement\") {\n      this.raise(start, Errors.BadSetterRestParameter);\n    }\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, containsEsc) {\n    if (isAsync || isGenerator || this.match(types.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(prop, isGenerator, isAsync, false, false, \"ObjectMethod\");\n    }\n\n    if (!containsEsc && this.isGetterOrSetterMethod(prop, isPattern)) {\n      if (isGenerator || isAsync) this.unexpected();\n      prop.kind = prop.key.name;\n      this.parsePropertyName(prop, false);\n      this.parseMethod(prop, false, false, false, false, \"ObjectMethod\");\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    prop.shorthand = false;\n\n    if (this.eat(types.colon)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssign(false, refExpressionErrors);\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.start, true, true);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n      } else if (this.match(types.eq) && refExpressionErrors) {\n        if (refExpressionErrors.shorthandAssign === -1) {\n          refExpressionErrors.shorthandAssign = this.state.start;\n        }\n\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n      } else {\n        prop.value = prop.key.__clone();\n      }\n\n      prop.shorthand = true;\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refExpressionErrors, containsEsc) {\n    const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, containsEsc) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n    if (!node) this.unexpected();\n    return node;\n  }\n\n  parsePropertyName(prop, isPrivateNameAllowed) {\n    if (this.eat(types.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssign();\n      this.expect(types.bracketR);\n    } else {\n      const oldInPropertyName = this.state.inPropertyName;\n      this.state.inPropertyName = true;\n      prop.key = this.match(types.num) || this.match(types.string) || this.match(types.bigint) ? this.parseExprAtom() : this.parseMaybePrivateName(isPrivateNameAllowed);\n\n      if (prop.key.type !== \"PrivateName\") {\n        prop.computed = false;\n      }\n\n      this.state.inPropertyName = oldInPropertyName;\n    }\n\n    return prop.key;\n  }\n\n  initFunction(node, isAsync) {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor;\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n    return node;\n  }\n\n  parseArrowExpression(node, params, isAsync, trailingCommaPos) {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    this.prodParam.enter(functionFlags(isAsync, false));\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaPos);\n    }\n\n    this.state.maybeInArrowParameters = false;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.parseFunctionBody(node, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(node, params, trailingCommaPos) {\n    node.params = this.toAssignableList(params, trailingCommaPos);\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    const isExpression = allowExpression && !this.match(types.braceL);\n    const oldInParameters = this.state.inParameters;\n    this.state.inParameters = false;\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(true, false, hasStrictModeDirective => {\n        const nonSimple = !this.isSimpleParamList(node.params);\n\n        if (hasStrictModeDirective && nonSimple) {\n          const errorPos = (node.kind === \"method\" || node.kind === \"constructor\") && !!node.key ? node.key.end : node.start;\n          this.raise(errorPos, Errors.IllegalLanguageModeDirective);\n        }\n\n        const strictModeChanged = !oldStrict && this.state.strict;\n        this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);\n\n        if (this.state.strict && node.id) {\n          this.checkLVal(node.id, BIND_OUTSIDE, undefined, \"function name\", undefined, strictModeChanged);\n        }\n      });\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n\n    this.state.inParameters = oldInParameters;\n  }\n\n  isSimpleParamList(params) {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n\n    return true;\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {\n    const nameHash = Object.create(null);\n\n    for (let i = 0; i < node.params.length; i++) {\n      this.checkLVal(node.params[i], BIND_VAR, allowDuplicates ? null : nameHash, \"function parameter list\", undefined, strictModeChanged);\n    }\n  }\n\n  parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n\n    return elts;\n  }\n\n  parseExprListItem(allowEmpty, refExpressionErrors, refNeedsArrowPos, allowPlaceholder) {\n    let elt;\n\n    if (allowEmpty && this.match(types.comma)) {\n      elt = null;\n    } else if (this.match(types.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(this.parseSpread(refExpressionErrors, refNeedsArrowPos), spreadNodeStartPos, spreadNodeStartLoc);\n    } else if (this.match(types.question)) {\n      this.expectPlugin(\"partialApplication\");\n\n      if (!allowPlaceholder) {\n        this.raise(this.state.start, Errors.UnexpectedArgumentPlaceholder);\n      }\n\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssign(false, refExpressionErrors, this.parseParenItem, refNeedsArrowPos);\n    }\n\n    return elt;\n  }\n\n  parseIdentifier(liberal) {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node, name) {\n    node.name = name;\n    node.loc.identifierName = name;\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos, liberal) {\n    let name;\n\n    if (this.match(types.name)) {\n      name = this.state.value;\n    } else if (this.state.type.keyword) {\n      name = this.state.type.keyword;\n      const context = this.state.context;\n\n      if ((name === \"class\" || name === \"function\") && context[context.length - 1].token === \"function\") {\n        context.pop();\n      }\n    } else {\n      throw this.unexpected();\n    }\n\n    if (liberal) {\n      this.state.type = types.name;\n    } else {\n      this.checkReservedWord(name, this.state.start, !!this.state.type.keyword, false);\n    }\n\n    this.next();\n    return name;\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (this.prodParam.hasYield && word === \"yield\") {\n      this.raise(startLoc, Errors.YieldBindingIdentifier);\n      return;\n    }\n\n    if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(startLoc, Errors.AwaitBindingIdentifier);\n        return;\n      }\n\n      if (this.state.awaitPos === -1 && (this.state.maybeInAsyncArrowHead || this.isAwaitAllowed())) {\n        this.state.awaitPos = this.state.start;\n      }\n    }\n\n    if (this.scope.inClass && !this.scope.inNonArrowFunction && word === \"arguments\") {\n      this.raise(startLoc, Errors.ArgumentsDisallowedInInitializer);\n      return;\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(startLoc, Errors.UnexpectedKeyword, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      if (!this.prodParam.hasAwait && word === \"await\") {\n        this.raise(startLoc, Errors.AwaitNotInAsyncFunction);\n      } else {\n        this.raise(startLoc, Errors.UnexpectedReservedWord, word);\n      }\n    }\n  }\n\n  isAwaitAllowed() {\n    if (this.scope.inFunction) return this.prodParam.hasAwait;\n    if (this.options.allowAwaitOutsideFunction) return true;\n\n    if (this.hasPlugin(\"topLevelAwait\")) {\n      return this.inModule && this.prodParam.hasAwait;\n    }\n\n    return false;\n  }\n\n  parseAwait() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.state.inParameters) {\n      this.raise(node.start, Errors.AwaitExpressionFormalParameter);\n    } else if (this.state.awaitPos === -1) {\n      this.state.awaitPos = node.start;\n    }\n\n    if (this.eat(types.star)) {\n      this.raise(node.start, Errors.ObsoleteAwaitStar);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.hasPrecedingLineBreak() || this.match(types.plusMin) || this.match(types.parenL) || this.match(types.bracketL) || this.match(types.backQuote) || this.match(types.regexp) || this.match(types.slash) || this.hasPlugin(\"v8intrinsic\") && this.match(types.modulo)) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary();\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  parseYield(noIn) {\n    const node = this.startNode();\n\n    if (this.state.inParameters) {\n      this.raise(node.start, Errors.YieldInParameter);\n    } else if (this.state.yieldPos === -1) {\n      this.state.yieldPos = node.start;\n    }\n\n    this.next();\n\n    if (this.match(types.semi) || !this.match(types.star) && !this.state.type.startsExpr || this.hasPrecedingLineBreak()) {\n      node.delegate = false;\n      node.argument = null;\n    } else {\n      node.delegate = this.eat(types.star);\n      node.argument = this.parseMaybeAssign(noIn);\n    }\n\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  checkPipelineAtInfixOperator(left, leftStartPos) {\n    if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n      if (left.type === \"SequenceExpression\") {\n        this.raise(leftStartPos, Errors.PipelineHeadSequenceExpression);\n      }\n    }\n  }\n\n  parseSmartPipelineBody(childExpression, startPos, startLoc) {\n    const pipelineStyle = this.checkSmartPipelineBodyStyle(childExpression);\n    this.checkSmartPipelineBodyEarlyErrors(childExpression, pipelineStyle, startPos);\n    return this.parseSmartPipelineBodyInStyle(childExpression, pipelineStyle, startPos, startLoc);\n  }\n\n  checkSmartPipelineBodyEarlyErrors(childExpression, pipelineStyle, startPos) {\n    if (this.match(types.arrow)) {\n      throw this.raise(this.state.start, Errors.PipelineBodyNoArrow);\n    } else if (pipelineStyle === \"PipelineTopicExpression\" && childExpression.type === \"SequenceExpression\") {\n      this.raise(startPos, Errors.PipelineBodySequenceExpression);\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpression, pipelineStyle, startPos, startLoc) {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n\n    switch (pipelineStyle) {\n      case \"PipelineBareFunction\":\n        bodyNode.callee = childExpression;\n        break;\n\n      case \"PipelineBareConstructor\":\n        bodyNode.callee = childExpression.callee;\n        break;\n\n      case \"PipelineBareAwaitedFunction\":\n        bodyNode.callee = childExpression.argument;\n        break;\n\n      case \"PipelineTopicExpression\":\n        if (!this.topicReferenceWasUsedInCurrentTopicContext()) {\n          this.raise(startPos, Errors.PipelineTopicUnused);\n        }\n\n        bodyNode.expression = childExpression;\n        break;\n\n      default:\n        throw new Error(`Internal @babel/parser error: Unknown pipeline style (${pipelineStyle})`);\n    }\n\n    return this.finishNode(bodyNode, pipelineStyle);\n  }\n\n  checkSmartPipelineBodyStyle(expression) {\n    switch (expression.type) {\n      default:\n        return this.isSimpleReference(expression) ? \"PipelineBareFunction\" : \"PipelineTopicExpression\";\n    }\n  }\n\n  isSimpleReference(expression) {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return !expression.computed && this.isSimpleReference(expression.object);\n\n      case \"Identifier\":\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  withTopicPermittingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 1,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withTopicForbiddingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withSoloAwaitPermittingContext(callback) {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  registerTopicReference() {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  primaryTopicReferenceIsAllowedInCurrentTopicContext() {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentTopicContext() {\n    return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n  }\n\n  parseFSharpPipelineBody(prec, noIn) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n    const ret = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, prec, noIn);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return ret;\n  }\n\n}\n\nconst loopLabel = {\n  kind: \"loop\"\n},\n      switchLabel = {\n  kind: \"switch\"\n};\nconst FUNC_NO_FLAGS = 0b000,\n      FUNC_STATEMENT = 0b001,\n      FUNC_HANGING_STATEMENT = 0b010,\n      FUNC_NULLABLE_ID = 0b100;\nclass StatementParser extends ExpressionParser {\n  parseTopLevel(file, program) {\n    program.sourceType = this.options.sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, types.eof);\n\n    if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\n      for (let _i = 0, _Array$from = Array.from(this.scope.undefinedExports); _i < _Array$from.length; _i++) {\n        const [name] = _Array$from[_i];\n        const pos = this.scope.undefinedExports.get(name);\n        this.raise(pos, Errors.ModuleExportUndefined, name);\n      }\n    }\n\n    file.program = this.finishNode(program, \"Program\");\n    file.comments = this.state.comments;\n    if (this.options.tokens) file.tokens = this.tokens;\n    return this.finishNode(file, \"File\");\n  }\n\n  stmtToDirective(stmt) {\n    const expr = stmt.expression;\n    const directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);\n    const directive = this.startNodeAt(stmt.start, stmt.loc.start);\n    const raw = this.input.slice(expr.start, expr.end);\n    const val = directiveLiteral.value = raw.slice(1, -1);\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    directive.value = this.finishNodeAt(directiveLiteral, \"DirectiveLiteral\", expr.end, expr.loc.end);\n    return this.finishNodeAt(directive, \"Directive\", stmt.end, stmt.loc.end);\n  }\n\n  parseInterpreterDirective() {\n    if (!this.match(types.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context) {\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const nextCh = this.input.charCodeAt(next);\n    if (nextCh === 91) return true;\n    if (context) return false;\n    if (nextCh === 123) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      let pos = next + 1;\n\n      while (isIdentifierChar(this.input.charCodeAt(pos))) {\n        ++pos;\n      }\n\n      const ident = this.input.slice(next, pos);\n      if (!keywordRelationalOperator.test(ident)) return true;\n    }\n\n    return false;\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.match(types.at)) {\n      this.parseDecorators(true);\n    }\n\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context, topLevel) {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = types._var;\n      kind = \"let\";\n    }\n\n    switch (starttype) {\n      case types._break:\n      case types._continue:\n        return this.parseBreakContinueStatement(node, starttype.keyword);\n\n      case types._debugger:\n        return this.parseDebuggerStatement(node);\n\n      case types._do:\n        return this.parseDoStatement(node);\n\n      case types._for:\n        return this.parseForStatement(node);\n\n      case types._function:\n        if (this.lookaheadCharCode() === 46) break;\n\n        if (context) {\n          if (this.state.strict) {\n            this.raise(this.state.start, Errors.StrictFunction);\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(this.state.start, Errors.SloppyFunction);\n          }\n        }\n\n        return this.parseFunctionStatement(node, false, !context);\n\n      case types._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case types._if:\n        return this.parseIfStatement(node);\n\n      case types._return:\n        return this.parseReturnStatement(node);\n\n      case types._switch:\n        return this.parseSwitchStatement(node);\n\n      case types._throw:\n        return this.parseThrowStatement(node);\n\n      case types._try:\n        return this.parseTryStatement(node);\n\n      case types._const:\n      case types._var:\n        kind = kind || this.state.value;\n\n        if (context && kind !== \"var\") {\n          this.raise(this.state.start, Errors.UnexpectedLexicalDeclaration);\n        }\n\n        return this.parseVarStatement(node, kind);\n\n      case types._while:\n        return this.parseWhileStatement(node);\n\n      case types._with:\n        return this.parseWithStatement(node);\n\n      case types.braceL:\n        return this.parseBlock();\n\n      case types.semi:\n        return this.parseEmptyStatement(node);\n\n      case types._export:\n      case types._import:\n        {\n          const nextTokenCharCode = this.lookaheadCharCode();\n\n          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n            break;\n          }\n\n          if (!this.options.allowImportExportEverywhere && !topLevel) {\n            this.raise(this.state.start, Errors.UnexpectedImportExport);\n          }\n\n          this.next();\n          let result;\n\n          if (starttype === types._import) {\n            result = this.parseImport(node);\n\n            if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n              this.sawUnambiguousESM = true;\n            }\n          } else {\n            result = this.parseExport(node);\n\n            if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n              this.sawUnambiguousESM = true;\n            }\n          }\n\n          this.assertModuleNodeAllowed(node);\n          return result;\n        }\n\n      default:\n        {\n          if (this.isAsyncFunction()) {\n            if (context) {\n              this.raise(this.state.start, Errors.AsyncFunctionInSingleStatementContext);\n            }\n\n            this.next();\n            return this.parseFunctionStatement(node, true, !context);\n          }\n        }\n    }\n\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (starttype === types.name && expr.type === \"Identifier\" && this.eat(types.colon)) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raiseWithData(node.start, {\n        code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n      }, Errors.ImportOutsideModule);\n    }\n  }\n\n  takeDecorators(node) {\n    const decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator() {\n    return this.match(types._class);\n  }\n\n  parseDecorators(allowExport) {\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    while (this.match(types.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(types._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (this.hasPlugin(\"decorators\") && !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, Errors.DecoratorExportClass);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(this.state.start, Errors.UnexpectedLeadingDecorator);\n    }\n  }\n\n  parseDecorator() {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      this.state.decoratorStack.push([]);\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr;\n\n      if (this.eat(types.parenL)) {\n        expr = this.parseExpression();\n        this.expect(types.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(types.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.eat(types.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(node, keyword) {\n    const isBreak = keyword === \"break\";\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, keyword);\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n  }\n\n  verifyBreakContinue(node, keyword) {\n    const isBreak = keyword === \"break\";\n    let i;\n\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n\n    if (i === this.state.labels.length) {\n      this.raise(node.start, Errors.IllegalBreakContinue, keyword);\n    }\n  }\n\n  parseDebuggerStatement(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression() {\n    this.expect(types.parenL);\n    const val = this.parseExpression();\n    this.expect(types.parenR);\n    return val;\n  }\n\n  parseDoStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"do\"));\n    this.state.labels.pop();\n    this.expect(types._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(types.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  parseForStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    let awaitAt = -1;\n\n    if (this.isAwaitAllowed() && this.eatContextual(\"await\")) {\n      awaitAt = this.state.lastTokStart;\n    }\n\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(types.parenL);\n\n    if (this.match(types.semi)) {\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, null);\n    }\n\n    const isLet = this.isLet();\n\n    if (this.match(types._var) || this.match(types._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if ((this.match(types._in) || this.isContextual(\"of\")) && init.declarations.length === 1) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, init);\n    }\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n\n    if (this.match(types._in) || this.isContextual(\"of\")) {\n      this.toAssignable(init);\n      const description = this.isContextual(\"of\") ? \"for-of statement\" : \"for-in statement\";\n      this.checkLVal(init, undefined, undefined, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(node, isAsync, declarationPosition) {\n    this.next();\n    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);\n  }\n\n  parseIfStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(types._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, Errors.IllegalReturn);\n    }\n\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = node.cases = [];\n    this.expect(types.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n    let cur;\n\n    for (let sawDefault; !this.match(types.braceR);) {\n      if (this.match(types._case) || this.match(types._default)) {\n        const isCase = this.match(types._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(this.state.lastTokStart, Errors.MultipleDefaultsInSwitch);\n          }\n\n          sawDefault = true;\n          cur.test = null;\n        }\n\n        this.expect(types.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next();\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node) {\n    this.next();\n\n    if (lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start))) {\n      this.raise(this.state.lastTokEnd, Errors.NewlineAfterThrow);\n    }\n\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseTryStatement(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(types._catch)) {\n      const clause = this.startNode();\n      this.next();\n\n      if (this.match(types.parenL)) {\n        this.expect(types.parenL);\n        clause.param = this.parseBindingAtom();\n        const simple = clause.param.type === \"Identifier\";\n        this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n        this.checkLVal(clause.param, BIND_LEXICAL, null, \"catch clause\");\n        this.expect(types.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      clause.body = this.withTopicForbiddingContext(() => this.parseBlock(false, false));\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, Errors.NoCatchOrFinally);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(node, kind) {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"while\"));\n    this.state.labels.pop();\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node) {\n    if (this.state.strict) {\n      this.raise(this.state.start, Errors.StrictWith);\n    }\n\n    this.next();\n    node.object = this.parseHeaderExpression();\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"with\"));\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(node, maybeName, expr, context) {\n    for (let _i2 = 0, _this$state$labels = this.state.labels; _i2 < _this$state$labels.length; _i2++) {\n      const label = _this$state$labels[_i2];\n\n      if (label.name === maybeName) {\n        this.raise(expr.start, Errors.LabelRedeclaration, maybeName);\n      }\n    }\n\n    const kind = this.state.type.isLoop ? \"loop\" : this.match(types._switch) ? \"switch\" : null;\n\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start\n    });\n    node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(node, expr) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {\n    const node = this.startNode();\n    this.expect(types.braceL);\n\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n\n    this.parseBlockBody(node, allowDirectives, false, types.braceR, afterBlockParse);\n\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt) {\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n    const body = node.body = [];\n    const directives = node.directives = [];\n    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);\n  }\n\n  parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {\n    const octalPositions = [];\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      if (!parsedNonDirective && this.state.octalPositions.length) {\n        octalPositions.push(...this.state.octalPositions);\n      }\n\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective && this.isValidDirective(stmt)) {\n        const directive = this.stmtToDirective(stmt);\n        directives.push(directive);\n\n        if (!hasStrictModeDirective && directive.value.value === \"use strict\") {\n          hasStrictModeDirective = true;\n          this.setStrict(true);\n        }\n\n        continue;\n      }\n\n      parsedNonDirective = true;\n      body.push(stmt);\n    }\n\n    if (this.state.strict && octalPositions.length) {\n      for (let _i3 = 0; _i3 < octalPositions.length; _i3++) {\n        const pos = octalPositions[_i3];\n        this.raise(pos, Errors.StrictOctalLiteral);\n      }\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  parseFor(node, init) {\n    node.init = init;\n    this.expect(types.semi);\n    node.test = this.match(types.semi) ? null : this.parseExpression();\n    this.expect(types.semi);\n    node.update = this.match(types.parenR) ? null : this.parseExpression();\n    this.expect(types.parenR);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  parseForIn(node, init, awaitAt) {\n    const isForIn = this.match(types._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt > -1) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt > -1;\n    }\n\n    if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n      this.raise(init.start, Errors.ForInOfLoopInitializer, isForIn ? \"for-in\" : \"for-of\");\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, Errors.InvalidLhs, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();\n    this.expect(types.parenR);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  parseVar(node, isFor, kind) {\n    const declarations = node.declarations = [];\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n\n      if (this.eat(types.eq)) {\n        decl.init = this.parseMaybeAssign(isFor);\n      } else {\n        if (kind === \"const\" && !(this.match(types._in) || this.isContextual(\"of\"))) {\n          if (!isTypescript) {\n            this.unexpected();\n          }\n        } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(types._in) || this.isContextual(\"of\")))) {\n          this.raise(this.state.lastTokEnd, Errors.DeclarationMissingInitializer, \"Complex binding patterns\");\n        }\n\n        decl.init = null;\n      }\n\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(types.comma)) break;\n    }\n\n    return node;\n  }\n\n  parseVarId(decl, kind) {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, kind === \"var\" ? BIND_VAR : BIND_LEXICAL, undefined, \"variable declaration\", kind !== \"var\");\n  }\n\n  parseFunction(node, statement = FUNC_NO_FLAGS, isAsync = false) {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n    this.initFunction(node, isAsync);\n\n    if (this.match(types.star) && isHangingStatement) {\n      this.raise(this.state.start, Errors.GeneratorInSingleStatementContext);\n    }\n\n    node.generator = this.eat(types.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.maybeInArrowParameters = false;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node);\n    this.withTopicForbiddingContext(() => {\n      this.parseFunctionBodyAndFinish(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n    });\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n    return node;\n  }\n\n  parseFunctionId(requireId) {\n    return requireId || this.match(types.name) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const oldInParameters = this.state.inParameters;\n    this.state.inParameters = true;\n    this.expect(types.parenL);\n    node.params = this.parseBindingList(types.parenR, 41, false, allowModifiers);\n    this.state.inParameters = oldInParameters;\n    this.checkYieldAwaitInDefaultParams();\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.id) return;\n    this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.start);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n    this.state.strict = oldStrict;\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n  }\n\n  isClassProperty() {\n    return this.match(types.eq) || this.match(types.semi) || this.match(types.braceR);\n  }\n\n  isClassMethod() {\n    return this.match(types.parenL);\n  }\n\n  isNonstaticConstructor(method) {\n    return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n  }\n\n  parseClassBody(constructorAllowsSuper, oldStrict) {\n    this.classScope.enter();\n    const state = {\n      hadConstructor: false\n    };\n    let decorators = [];\n    const classBody = this.startNode();\n    classBody.body = [];\n    this.expect(types.braceL);\n    this.withTopicForbiddingContext(() => {\n      while (!this.match(types.braceR)) {\n        if (this.eat(types.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(this.state.lastTokEnd, Errors.DecoratorSemicolon);\n          }\n\n          continue;\n        }\n\n        if (this.match(types.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state, constructorAllowsSuper);\n\n        if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n          this.raise(member.start, Errors.DecoratorConstructor);\n        }\n      }\n    });\n\n    if (!oldStrict) {\n      this.state.strict = false;\n    }\n\n    this.next();\n\n    if (decorators.length) {\n      throw this.raise(this.state.start, Errors.TrailingDecorator);\n    }\n\n    this.classScope.exit();\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  parseClassMemberFromModifier(classBody, member) {\n    const containsEsc = this.state.containsEsc;\n    const key = this.parseIdentifier(true);\n\n    if (this.isClassMethod()) {\n      const method = member;\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(classBody, method, false, false, false, false);\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop = member;\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    } else if (containsEsc) {\n      throw this.unexpected();\n    }\n\n    return false;\n  }\n\n  parseClassMember(classBody, member, state, constructorAllowsSuper) {\n    const isStatic = this.isContextual(\"static\");\n\n    if (isStatic && this.parseClassMemberFromModifier(classBody, member)) {\n      return;\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic, constructorAllowsSuper);\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic, constructorAllowsSuper) {\n    const publicMethod = member;\n    const privateMethod = member;\n    const publicProp = member;\n    const privateProp = member;\n    const method = publicMethod;\n    const publicMember = publicMethod;\n    member.static = isStatic;\n\n    if (this.eat(types.star)) {\n      method.kind = \"method\";\n      this.parseClassPropertyName(method);\n\n      if (method.key.type === \"PrivateName\") {\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, Errors.ConstructorIsGenerator);\n      }\n\n      this.pushClassMethod(classBody, publicMethod, true, false, false, false);\n      return;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parseClassPropertyName(member);\n    const isPrivate = key.type === \"PrivateName\";\n    const isSimple = key.type === \"Identifier\";\n    const maybeQuestionTokenStart = this.state.start;\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, Errors.DuplicateConstructor);\n        }\n\n        state.hadConstructor = true;\n        allowsDirectSuper = constructorAllowsSuper;\n      }\n\n      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (isSimple && key.name === \"async\" && !containsEsc && !this.isLineTerminator()) {\n      const isGenerator = this.eat(types.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStart);\n      }\n\n      method.kind = \"method\";\n      this.parseClassPropertyName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (method.key.type === \"PrivateName\") {\n        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, Errors.ConstructorIsAsync);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n      }\n    } else if (isSimple && (key.name === \"get\" || key.name === \"set\") && !containsEsc && !(this.match(types.star) && this.isLineTerminator())) {\n      method.kind = key.name;\n      this.parseClassPropertyName(publicMethod);\n\n      if (method.key.type === \"PrivateName\") {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, Errors.ConstructorIsAccessor);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, false, false, false, false);\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  parseClassPropertyName(member) {\n    const key = this.parsePropertyName(member, true);\n\n    if (!member.computed && member.static && (key.name === \"prototype\" || key.value === \"prototype\")) {\n      this.raise(key.start, Errors.StaticPrototype);\n    }\n\n    if (key.type === \"PrivateName\" && key.id.name === \"constructor\") {\n      this.raise(key.start, Errors.ConstructorClassPrivateField);\n    }\n\n    return key;\n  }\n\n  pushClassProperty(classBody, prop) {\n    if (!prop.computed && (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")) {\n      this.raise(prop.key.start, Errors.ConstructorClassField);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(classBody, prop) {\n    this.expectPlugin(\"classPrivateProperties\", prop.key.start);\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n    this.classScope.declarePrivateName(node.key.id.name, CLASS_ELEMENT_OTHER, node.key.start);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    this.expectPlugin(\"classPrivateMethods\", method.key.start);\n    const node = this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true);\n    classBody.body.push(node);\n    const kind = node.kind === \"get\" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === \"set\" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;\n    this.classScope.declarePrivateName(node.key.id.name, kind, node.key.start);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {}\n\n  parseAccessModifier() {\n    return undefined;\n  }\n\n  parseClassPrivateProperty(node) {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(types.eq) ? this.parseMaybeAssign() : null;\n    this.semicolon();\n    this.prodParam.exit();\n    this.scope.exit();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  parseClassProperty(node) {\n    if (!node.typeAnnotation) {\n      this.expectPlugin(\"classProperties\");\n    }\n\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.prodParam.enter(PARAM);\n\n    if (this.match(types.eq)) {\n      this.expectPlugin(\"classProperties\");\n      this.next();\n      node.value = this.parseMaybeAssign();\n    } else {\n      node.value = null;\n    }\n\n    this.semicolon();\n    this.prodParam.exit();\n    this.scope.exit();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassId(node, isStatement, optionalId, bindingType = BIND_CLASS) {\n    if (this.match(types.name)) {\n      node.id = this.parseIdentifier();\n\n      if (isStatement) {\n        this.checkLVal(node.id, bindingType, undefined, \"class name\");\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, Errors.MissingClassName);\n      }\n    }\n  }\n\n  parseClassSuper(node) {\n    node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  parseExport(node) {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(types.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(types.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {\n      throw this.unexpected(null, types.braceL);\n    }\n\n    let hasDeclaration;\n\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(types._default)) {\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, types.braceL);\n  }\n\n  eatExportStar(node) {\n    return this.eat(types.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (this.isExportDefaultSpecifier()) {\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    if (this.isContextual(\"as\")) {\n      if (!node.specifiers) node.specifiers = [];\n      const specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);\n      this.next();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node) {\n    if (this.match(types.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      node.specifiers.push(...this.parseExportSpecifiers());\n      node.source = null;\n      node.declaration = null;\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportDeclaration(node) {\n    if (this.shouldParseExportDeclaration()) {\n      if (this.isContextual(\"async\")) {\n        const next = this.nextTokenStart();\n\n        if (!this.isUnparsedContextual(next, \"function\")) {\n          this.unexpected(next, types._function);\n        }\n      }\n\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n\n    return false;\n  }\n\n  isAsyncFunction() {\n    if (!this.isContextual(\"async\")) return false;\n    const next = this.nextTokenStart();\n    return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression() {\n    const expr = this.startNode();\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(types._function) || isAsync) {\n      this.next();\n\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);\n    } else if (this.match(types._class)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types.at)) {\n      if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, Errors.DecoratorBeforeExport);\n      }\n\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types._const) || this.match(types._var) || this.isLet()) {\n      throw this.raise(this.state.start, Errors.UnsupportedDefaultExport);\n    } else {\n      const res = this.parseMaybeAssign();\n      this.semicolon();\n      return res;\n    }\n  }\n\n  parseExportDeclaration(node) {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types.name)) {\n      const value = this.state.value;\n\n      if (value === \"async\" || value === \"let\") {\n        return false;\n      }\n\n      if ((value === \"type\" || value === \"interface\") && !this.state.containsEsc) {\n        const l = this.lookahead();\n\n        if (l.type === types.name && l.value !== \"from\" || l.type === types.braceL) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(types._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    return this.input.charCodeAt(next) === 44 || this.isUnparsedContextual(next, \"from\");\n  }\n\n  parseExportFrom(node, expect) {\n    if (this.eatContextual(\"from\")) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n    } else {\n      if (expect) {\n        this.unexpected();\n      } else {\n        node.source = null;\n      }\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.match(types.at)) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.unexpected(this.state.start, Errors.DecoratorBeforeExport);\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return this.state.type.keyword === \"var\" || this.state.type.keyword === \"const\" || this.state.type.keyword === \"function\" || this.state.type.keyword === \"class\" || this.isLet() || this.isAsyncFunction();\n  }\n\n  checkExport(node, checkNames, isDefault, isFrom) {\n    if (checkNames) {\n      if (isDefault) {\n        this.checkDuplicateExports(node, \"default\");\n      } else if (node.specifiers && node.specifiers.length) {\n        for (let _i4 = 0, _node$specifiers = node.specifiers; _i4 < _node$specifiers.length; _i4++) {\n          const specifier = _node$specifiers[_i4];\n          this.checkDuplicateExports(specifier, specifier.exported.name);\n\n          if (!isFrom && specifier.local) {\n            this.checkReservedWord(specifier.local.name, specifier.local.start, true, false);\n            this.scope.checkLocalExport(specifier.local);\n          }\n        }\n      } else if (node.declaration) {\n        if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (let _i5 = 0, _node$declaration$dec = node.declaration.declarations; _i5 < _node$declaration$dec.length; _i5++) {\n            const declaration = _node$declaration$dec[_i5];\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (currentContextDecorators.length) {\n      const isClass = node.declaration && (node.declaration.type === \"ClassDeclaration\" || node.declaration.type === \"ClassExpression\");\n\n      if (!node.declaration || !isClass) {\n        throw this.raise(node.start, Errors.UnsupportedDecoratorExport);\n      }\n\n      this.takeDecorators(node.declaration);\n    }\n  }\n\n  checkDeclaration(node) {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (let _i6 = 0, _node$properties = node.properties; _i6 < _node$properties.length; _i6++) {\n        const prop = _node$properties[_i6];\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (let _i7 = 0, _node$elements = node.elements; _i7 < _node$elements.length; _i7++) {\n        const elem = _node$elements[_i7];\n\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(node, name) {\n    if (this.state.exportedIdentifiers.indexOf(name) > -1) {\n      this.raise(node.start, name === \"default\" ? Errors.DuplicateDefaultExport : Errors.DuplicateExport, name);\n    }\n\n    this.state.exportedIdentifiers.push(name);\n  }\n\n  parseExportSpecifiers() {\n    const nodes = [];\n    let first = true;\n    this.expect(types.braceL);\n\n    while (!this.eat(types.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n        if (this.eat(types.braceR)) break;\n      }\n\n      const node = this.startNode();\n      node.local = this.parseIdentifier(true);\n      node.exported = this.eatContextual(\"as\") ? this.parseIdentifier(true) : node.local.__clone();\n      nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n    }\n\n    return nodes;\n  }\n\n  parseImport(node) {\n    node.specifiers = [];\n\n    if (!this.match(types.string)) {\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      const parseNext = !hasDefault || this.eat(types.comma);\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(\"from\");\n    }\n\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    if (!this.match(types.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  shouldParseDefaultImport(node) {\n    return this.match(types.name);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, BIND_LEXICAL, undefined, contextDescription);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    if (this.shouldParseDefaultImport(node)) {\n      this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\", \"default import specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node) {\n    if (this.match(types.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(\"as\");\n      this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\", \"import namespace specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node) {\n    let first = true;\n    this.expect(types.braceL);\n\n    while (!this.eat(types.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        if (this.eat(types.colon)) {\n          throw this.raise(this.state.start, Errors.DestructureNamedImport);\n        }\n\n        this.expect(types.comma);\n        if (this.eat(types.braceR)) break;\n      }\n\n      this.parseImportSpecifier(node);\n    }\n  }\n\n  parseImportSpecifier(node) {\n    const specifier = this.startNode();\n    specifier.imported = this.parseIdentifier(true);\n\n    if (this.eatContextual(\"as\")) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      this.checkReservedWord(specifier.imported.name, specifier.start, true, true);\n      specifier.local = specifier.imported.__clone();\n    }\n\n    this.checkLVal(specifier.local, BIND_LEXICAL, undefined, \"import specifier\");\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n}\n\nclass ClassScope {\n  constructor() {\n    this.privateNames = new Set();\n    this.loneAccessors = new Map();\n    this.undefinedPrivateNames = new Map();\n  }\n\n}\nclass ClassScopeHandler {\n  constructor(raise) {\n    this.stack = [];\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n  }\n\n  current() {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n    const current = this.current();\n\n    for (let _i = 0, _Array$from = Array.from(oldClassScope.undefinedPrivateNames); _i < _Array$from.length; _i++) {\n      const [name, pos] = _Array$from[_i];\n\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, pos);\n        }\n      } else {\n        this.raise(pos, Errors.InvalidPrivateFieldResolution, name);\n      }\n    }\n  }\n\n  declarePrivateName(name, elementType, pos) {\n    const classScope = this.current();\n    let redefined = classScope.privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && classScope.loneAccessors.get(name);\n\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n        if (!redefined) classScope.loneAccessors.delete(name);\n      } else if (!redefined) {\n        classScope.loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(pos, Errors.PrivateNameRedeclaration, name);\n    }\n\n    classScope.privateNames.add(name);\n    classScope.undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name, pos) {\n    let classScope;\n\n    for (let _i2 = 0, _this$stack = this.stack; _i2 < _this$stack.length; _i2++) {\n      classScope = _this$stack[_i2];\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, pos);\n    } else {\n      this.raise(pos, Errors.InvalidPrivateFieldResolution, name);\n    }\n  }\n\n}\n\nclass Parser extends StatementParser {\n  constructor(options, input) {\n    options = getOptions(options);\n    super(options, input);\n    const ScopeHandler = this.getScopeHandler();\n    this.options = options;\n    this.inModule = this.options.sourceType === \"module\";\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n    this.prodParam = new ProductionParameterHandler();\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  getScopeHandler() {\n    return ScopeHandler;\n  }\n\n  parse() {\n    let paramFlags = PARAM;\n\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n\n}\n\nfunction pluginsMap(plugins) {\n  const pluginMap = new Map();\n\n  for (let _i = 0; _i < plugins.length; _i++) {\n    const plugin = plugins[_i];\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n\n  return pluginMap;\n}\n\nfunction parse(input, options) {\n  if (options && options.sourceType === \"unambiguous\") {\n    options = Object.assign({}, options);\n\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch (_unused) {}\n      } else {\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch (_unused2) {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\nfunction parseExpression(input, options) {\n  const parser = getParser(options, input);\n\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n\n  return parser.getExpression();\n}\n\nfunction getParser(options, input) {\n  let cls = Parser;\n\n  if (options && options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache = {};\n\nfunction getParserClass(pluginsFromOptions) {\n  const pluginList = mixinPluginNames.filter(name => hasPlugin(pluginsFromOptions, name));\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n\n  if (!cls) {\n    cls = Parser;\n\n    for (let _i = 0; _i < pluginList.length; _i++) {\n      const plugin = pluginList[_i];\n      cls = mixinPlugins[plugin](cls);\n    }\n\n    parserClassCache[key] = cls;\n  }\n\n  return cls;\n}\n\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = types;\n//# sourceMappingURL=index.js.map\n"]},"metadata":{},"sourceType":"script"}