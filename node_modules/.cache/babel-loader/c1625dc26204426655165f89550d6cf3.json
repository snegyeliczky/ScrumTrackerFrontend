{"ast":null,"code":"var _jsxFileName = \"/Users/sandornegyeliczky/Desktop/projektek/ScrumTrackerFrontend/frontend/src/components/contexts/ProjectContext.js\";\nimport React, { useState, createContext, useEffect } from \"react\";\nimport axios from \"axios\";\nexport const ProjectContext = createContext();\nexport const ProjectProvider = props => {\n  const [projects, setProjects] = useState([]);\n  const [archiveProjects, setArchiveProjects] = useState([]);\n  const [showArchive, setShowArchive] = useState(false);\n  const [participateProjects, setParticipateProjects] = useState([]);\n  useEffect(() => {\n    getProjects();\n  }, []);\n\n  const getProjects = () => {\n    getMyProjects();\n    getArchiveProjects();\n    getParticipatedProjects();\n  };\n\n  const getMyProjects = async () => {\n    let response = await axios.get(\"http://localhost:8080/project/getactiveprojects\");\n    setProjects(response.data);\n  };\n  /*const getProjectsWithArchive = async () => {\n      let response = await axios.get(\"http://localhost:8080/project/getmyprojectswitharchive\");\n      setProjects(response.data);\n  };\n  */\n\n\n  const getArchiveProjects = async () => {\n    let response = await axios.get(\"http://localhost:8080/project/getarchiveprojects\");\n    setArchiveProjects(response.data);\n  };\n\n  const getParticipatedProjects = async () => {\n    let response = await axios.get(\"http://localhost:8080/project/getparticipateprojects\");\n    setParticipateProjects(response.data);\n  };\n  /*Alert modal*/\n\n\n  const [alertVisible, setAlertVisible] = useState(false);\n  const [alertText, setAlertText] = useState(\"semmi\");\n  const [alertType, setAlertType] = useState(\"\");\n\n  function handleAlertCancel() {\n    setAlertVisible(false);\n    setAlertText(\"\");\n  }\n\n  function showErrorAlert(text) {\n    setAlertText(text);\n    console.log(alertText);\n    setAlertType(\"error\");\n    setAlertVisible(true);\n  }\n\n  function showSuccessAlert(text) {\n    setAlertText(text);\n    setAlertType(\"success\");\n    setAlertVisible(true);\n  }\n\n  return /*#__PURE__*/React.createElement(ProjectContext.Provider, {\n    value: {\n      getProjects,\n      projects,\n      setProjects,\n      setShowArchive,\n      showArchive,\n      archiveProjects,\n      getArchiveProjects,\n      setArchiveProjects,\n      participateProjects,\n      setAlertVisible,\n      alertVisible,\n      showErrorAlert,\n      showSuccessAlert,\n      handleAlertCancel,\n      alertType,\n      alertText\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, props.children);\n};","map":{"version":3,"sources":["/Users/sandornegyeliczky/Desktop/projektek/ScrumTrackerFrontend/frontend/src/components/contexts/ProjectContext.js"],"names":["React","useState","createContext","useEffect","axios","ProjectContext","ProjectProvider","props","projects","setProjects","archiveProjects","setArchiveProjects","showArchive","setShowArchive","participateProjects","setParticipateProjects","getProjects","getMyProjects","getArchiveProjects","getParticipatedProjects","response","get","data","alertVisible","setAlertVisible","alertText","setAlertText","alertType","setAlertType","handleAlertCancel","showErrorAlert","text","console","log","showSuccessAlert","children"],"mappings":"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","sourcesContent":["import React, {useState, createContext, useEffect} from \"react\";\nimport axios from \"axios\";\n\nexport const ProjectContext = createContext();\n\nexport const ProjectProvider = props => {\n\n    const [projects, setProjects] = useState([]);\n    const [archiveProjects, setArchiveProjects] = useState([]);\n    const [showArchive,setShowArchive] = useState(false);\n    const [participateProjects, setParticipateProjects] = useState([]);\n\n    useEffect(() => {\n        getProjects();\n    },[]);\n\n    const getProjects = () => {\n        getMyProjects();\n        getArchiveProjects();\n        getParticipatedProjects();\n    };\n\n    const getMyProjects = async () => {\n        let response = await axios.get(\"http://localhost:8080/project/getactiveprojects\");\n        setProjects(response.data);\n    };\n\n    /*const getProjectsWithArchive = async () => {\n        let response = await axios.get(\"http://localhost:8080/project/getmyprojectswitharchive\");\n        setProjects(response.data);\n    };\n*/\n    const getArchiveProjects = async () => {\n        let response = await axios.get(\"http://localhost:8080/project/getarchiveprojects\");\n        setArchiveProjects(response.data);\n    };\n\n    const getParticipatedProjects = async () => {\n            let response = await axios.get(\"http://localhost:8080/project/getparticipateprojects\");\n            setParticipateProjects(response.data);\n        };\n\n\n    /*Alert modal*/\n\n    const[alertVisible,setAlertVisible]=useState(false);\n    const [alertText,setAlertText] =useState(\"semmi\");\n    const [alertType,setAlertType] =useState(\"\");\n\n    function handleAlertCancel() {\n        setAlertVisible(false);\n        setAlertText(\"\")\n    }\n\n    function showErrorAlert(text) {\n        setAlertText(text);\n        console.log(alertText);\n        setAlertType(\"error\");\n        setAlertVisible(true);\n    }\n\n    function showSuccessAlert(text) {\n        setAlertText(text);\n        setAlertType(\"success\");\n        setAlertVisible(true);\n    }\n\n\n\n\n    return (\n        <ProjectContext.Provider\n            value={{getProjects,\n                    projects,\n                    setProjects,\n                    setShowArchive,\n                    showArchive,\n                    archiveProjects,\n                    getArchiveProjects,\n                    setArchiveProjects,\n                    participateProjects,\n\n                    setAlertVisible,\n                    alertVisible,\n                    showErrorAlert,\n                    showSuccessAlert,\n                    handleAlertCancel,\n                    alertType,\n                    alertText\n\n            }}\n        >\n            {props.children}\n        </ProjectContext.Provider>\n    )\n};\n\n"]},"metadata":{},"sourceType":"module"}