{"ast":null,"code":"var _jsxFileName = \"/Users/sandornegyeliczky/Desktop/projektek/ScrumTrackerFrontend/frontend/src/Pages/ProjectPage/ProjectPage.js\";\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from \"react-router\";\nimport ScrumTable from \"../../components/ProjectComponents/ScrumTable\";\nimport { ContentContainer } from \"../../Assets/StyledComps/styled\";\nimport UsersModal from \"../../components/ProjectComponents/UsersModal\";\nimport MailModal from \"../../components/MailModal\";\nimport CustomPieChart from \"../../components/ProjectComponents/CustomPieChart\";\nimport ProjectCalls from \"../../Services/ProjectCalls\";\nimport InProgressLimitModal from \"../../components/InProgressLimitModal\";\nimport TaskDistibution from \"../../components/ProjectComponents/taskDistibution\";\n\nconst ProjectPage = () => {\n  const {\n    id\n  } = useParams();\n  const [project, setProject] = useState(null);\n  const [scrumTable, setScrumTable] = useState(null);\n  const [taskCount, setTaskCount] = useState({});\n  const [businessValueCount, setBusinessValueCount] = useState({});\n  const [mouseOverAccept, setMouseOverAccept] = useState(false);\n  const [usersOnProject, setUsersOnProject] = useState([]);\n\n  function getColaboratorsFromProject(project) {\n    return [...project.participants, project.author];\n  }\n\n  const getProject = async () => {\n    let myProject = await ProjectCalls.getProject(id);\n    setUsersOnProject(getColaboratorsFromProject(myProject));\n    myProject.table.statuses.sort(function (a, b) {\n      return a.position - b.position;\n    });\n    myProject.table.statuses.map(status => {\n      status.tasks.sort(function (a, b) {\n        return a.position - b.position;\n      });\n    });\n    setScrumTable(myProject.table);\n    setProject(null);\n    setProject(myProject);\n    getTaskChartData(myProject.table.statuses);\n    getBusinessValueChartData(myProject.table.statuses);\n    setUWT(getUsersWithTasks(myProject.table));\n  };\n\n  const refreshScrumTableBackend = async () => {\n    let newScrumTable = await ProjectCalls.getScrumTable(project.table.id);\n    newScrumTable.statuses.sort(function (a, b) {\n      return a.position - b.position;\n    });\n    newScrumTable.statuses.map(status => {\n      status.tasks.sort(function (a, b) {\n        return a.position - b.position;\n      });\n    });\n    getTaskChartData(newScrumTable.statuses);\n    getBusinessValueChartData(newScrumTable.statuses);\n    setUWT(getUsersWithTasks(newScrumTable));\n    setScrumTable(newScrumTable);\n  };\n\n  function getUsersWithTasks(scrumTable) {\n    let usersWithTasks = {};\n    scrumTable.statuses.map(status => {\n      status.tasks.map(task => {\n        if (task.owner != null) {\n          let owner = task.owner.username;\n          usersWithTasks[owner] = (usersWithTasks[owner] || 0) + 1;\n        } else {\n          usersWithTasks[\"no owner\"] = (usersWithTasks[\"no owner\"] || 0) + 1;\n        }\n      });\n    });\n    console.log(usersWithTasks);\n    return usersWithTasks;\n  }\n\n  function getTaskChartData(statuses) {\n    let projectStatuses = statuses;\n    let taskCounts = {\n      start: 0,\n      inProgress: 0,\n      finish: 0\n    };\n    projectStatuses.map(status => {\n      if (status.position === 1) {\n        taskCounts.start += status.tasks.length;\n      } else if (status.position === projectStatuses.length) {\n        taskCounts.finish += status.tasks.length;\n      } else {\n        taskCounts.inProgress += status.tasks.length;\n      }\n    });\n    setTaskCount(taskCounts);\n  }\n\n  const getBusinessValueChartData = statuses => {\n    let businessValueCount = {\n      start: 0,\n      inProgress: 0,\n      finish: 0\n    };\n    statuses.map(status => {\n      if (status.position === 1) {\n        status.tasks.map(task => {\n          businessValueCount.start += task.priority;\n        });\n      } else if (status.position === statuses.length) {\n        status.tasks.map(task => {\n          businessValueCount.finish += task.priority;\n        });\n      } else {\n        status.tasks.map(task => {\n          businessValueCount.inProgress += task.priority;\n        });\n      }\n    });\n    setBusinessValueCount(businessValueCount);\n  };\n\n  const addNewColumn = async columnName => {\n    let newStatus = {\n      statusName: columnName,\n      projectId: id\n    };\n    await ProjectCalls.addNewColumn(newStatus);\n    getProject();\n  };\n\n  const addNewTask = async (taskName, statusId) => {\n    let task = {\n      statusId: statusId,\n      title: taskName\n    };\n    await ProjectCalls.addNewTask(task);\n    getProject();\n  };\n\n  useEffect(() => {\n    getProject();\n  }, []);\n\n  if (!project) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"loading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 16\n      }\n    }, \"loading....\");\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"project_item_container_canvas\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"project_item_container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ContentContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"project_title_container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 25\n    }\n  }, project.title)), /*#__PURE__*/React.createElement(UsersModal, {\n    projectId: project.id,\n    participants: project.participants,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(MailModal, {\n    projectId: project.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(InProgressLimitModal, {\n    tableId: project.table.id,\n    getProject: getProject,\n    taskLimit: project.table.taskLimit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 21\n    }\n  })), Object.keys(getUsersWithTasks(scrumTable)).map(key => {\n    console.log(\"mivan\");\n    return /*#__PURE__*/React.createElement(TaskDistibution, {\n      user: key,\n      task: \"Uff\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 32\n      }\n    });\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"scrum_table_container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ScrumTable, {\n    key: scrumTable.id,\n    table: scrumTable,\n    addNewColumn: addNewColumn,\n    addNewTask: addNewTask,\n    setTaskCount: setTaskCount,\n    tasksDistributionInStatuses: getTaskChartData,\n    usersOnProject: usersOnProject,\n    countBusinessValue: getBusinessValueChartData,\n    refreshScrumTableBackend: refreshScrumTableBackend,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chart_container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(CustomPieChart, {\n    data: taskCount,\n    visualMark: \"percentage\",\n    label: \"Sprint progress by user story\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(CustomPieChart, {\n    data: businessValueCount,\n    visualMark: \"value\",\n    label: \"Sprint progress by value distribution\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 21\n    }\n  }))), \"}\");\n};\n\nexport default ProjectPage;","map":{"version":3,"sources":["/Users/sandornegyeliczky/Desktop/projektek/ScrumTrackerFrontend/frontend/src/Pages/ProjectPage/ProjectPage.js"],"names":["React","useEffect","useState","useParams","ScrumTable","ContentContainer","UsersModal","MailModal","CustomPieChart","ProjectCalls","InProgressLimitModal","TaskDistibution","ProjectPage","id","project","setProject","scrumTable","setScrumTable","taskCount","setTaskCount","businessValueCount","setBusinessValueCount","mouseOverAccept","setMouseOverAccept","usersOnProject","setUsersOnProject","getColaboratorsFromProject","participants","author","getProject","myProject","table","statuses","sort","a","b","position","map","status","tasks","getTaskChartData","getBusinessValueChartData","setUWT","getUsersWithTasks","refreshScrumTableBackend","newScrumTable","getScrumTable","usersWithTasks","task","owner","username","console","log","projectStatuses","taskCounts","start","inProgress","finish","length","priority","addNewColumn","columnName","newStatus","statusName","projectId","addNewTask","taskName","statusId","title","taskLimit","Object","keys","key"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAAQC,SAAR,QAAwB,cAAxB;AACA,OAAOC,UAAP,MAAuB,+CAAvB;AACA,SAAQC,gBAAR,QAA+B,iCAA/B;AACA,OAAOC,UAAP,MAAuB,+CAAvB;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,cAAP,MAA2B,mDAA3B;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AACA,OAAOC,oBAAP,MAAiC,uCAAjC;AACA,OAAOC,eAAP,MAA4B,oDAA5B;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAEtB,QAAM;AAACC,IAAAA;AAAD,MAAOV,SAAS,EAAtB;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACc,UAAD,EAAYC,aAAZ,IAA6Bf,QAAQ,CAAC,IAAD,CAA3C;AACA,QAAM,CAACgB,SAAD,EAAYC,YAAZ,IAA4BjB,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACkB,kBAAD,EAAqBC,qBAArB,IAA8CnB,QAAQ,CAAC,EAAD,CAA5D;AACA,QAAM,CAACoB,eAAD,EAAkBC,kBAAlB,IAAwCrB,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAM,CAACsB,cAAD,EAAiBC,iBAAjB,IAAsCvB,QAAQ,CAAC,EAAD,CAApD;;AAEA,WAASwB,0BAAT,CAAoCZ,OAApC,EAA6C;AACzC,WAAO,CAAC,GAAGA,OAAO,CAACa,YAAZ,EAA0Bb,OAAO,CAACc,MAAlC,CAAP;AAEH;;AAGD,QAAMC,UAAU,GAAG,YAAY;AAE3B,QAAIC,SAAS,GAAG,MAAMrB,YAAY,CAACoB,UAAb,CAAwBhB,EAAxB,CAAtB;AAEAY,IAAAA,iBAAiB,CAACC,0BAA0B,CAACI,SAAD,CAA3B,CAAjB;AACAA,IAAAA,SAAS,CAACC,KAAV,CAAgBC,QAAhB,CAAyBC,IAAzB,CAA8B,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAC1C,aAAOD,CAAC,CAACE,QAAF,GAAaD,CAAC,CAACC,QAAtB;AACH,KAFD;AAGAN,IAAAA,SAAS,CAACC,KAAV,CAAgBC,QAAhB,CAAyBK,GAAzB,CAA6BC,MAAM,IAAI;AACnCA,MAAAA,MAAM,CAACC,KAAP,CAAaN,IAAb,CAAkB,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAC9B,eAAOD,CAAC,CAACE,QAAF,GAAaD,CAAC,CAACC,QAAtB;AACH,OAFD;AAGH,KAJD;AAKAnB,IAAAA,aAAa,CAACa,SAAS,CAACC,KAAX,CAAb;AACAhB,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAA,IAAAA,UAAU,CAACe,SAAD,CAAV;AACAU,IAAAA,gBAAgB,CAACV,SAAS,CAACC,KAAV,CAAgBC,QAAjB,CAAhB;AACAS,IAAAA,yBAAyB,CAACX,SAAS,CAACC,KAAV,CAAgBC,QAAjB,CAAzB;AACAU,IAAAA,MAAM,CAACC,iBAAiB,CAACb,SAAS,CAACC,KAAX,CAAlB,CAAN;AAEH,GApBD;;AAsBA,QAAMa,wBAAwB,GAAG,YAAY;AACzC,QAAIC,aAAa,GAAG,MAAMpC,YAAY,CAACqC,aAAb,CAA2BhC,OAAO,CAACiB,KAAR,CAAclB,EAAzC,CAA1B;AACAgC,IAAAA,aAAa,CAACb,QAAd,CAAuBC,IAAvB,CAA4B,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AACxC,aAAOD,CAAC,CAACE,QAAF,GAAaD,CAAC,CAACC,QAAtB;AACH,KAFD;AAGAS,IAAAA,aAAa,CAACb,QAAd,CAAuBK,GAAvB,CAA2BC,MAAM,IAAG;AAChCA,MAAAA,MAAM,CAACC,KAAP,CAAaN,IAAb,CAAkB,UAAUC,CAAV,EAAYC,CAAZ,EAAe;AAC7B,eAAOD,CAAC,CAACE,QAAF,GAAaD,CAAC,CAACC,QAAtB;AACH,OAFD;AAGH,KAJD;AAKAI,IAAAA,gBAAgB,CAACK,aAAa,CAACb,QAAf,CAAhB;AACAS,IAAAA,yBAAyB,CAACI,aAAa,CAACb,QAAf,CAAzB;AACAU,IAAAA,MAAM,CAACC,iBAAiB,CAACE,aAAD,CAAlB,CAAN;AACA5B,IAAAA,aAAa,CAAC4B,aAAD,CAAb;AACH,GAdD;;AAiBA,WAASF,iBAAT,CAA2B3B,UAA3B,EAAuC;AACnC,QAAI+B,cAAc,GAAG,EAArB;AACA/B,IAAAA,UAAU,CAACgB,QAAX,CAAoBK,GAApB,CAA0BC,MAAD,IAAU;AAC/BA,MAAAA,MAAM,CAACC,KAAP,CAAaF,GAAb,CAAkBW,IAAD,IAAQ;AACrB,YAAIA,IAAI,CAACC,KAAL,IAAY,IAAhB,EAAqB;AACjB,cAAIA,KAAK,GAACD,IAAI,CAACC,KAAL,CAAWC,QAArB;AACAH,UAAAA,cAAc,CAACE,KAAD,CAAd,GAAsB,CAACF,cAAc,CAACE,KAAD,CAAd,IAAuB,CAAxB,IAA2B,CAAjD;AACH,SAHD,MAGM;AACFF,UAAAA,cAAc,CAAC,UAAD,CAAd,GAA4B,CAACA,cAAc,CAAC,UAAD,CAAd,IAA4B,CAA7B,IAAgC,CAA5D;AACH;AAEJ,OARD;AASH,KAVD;AAWAI,IAAAA,OAAO,CAACC,GAAR,CAAYL,cAAZ;AACA,WAAOA,cAAP;AAEH;;AAGD,WAASP,gBAAT,CAA0BR,QAA1B,EAAoC;AAChC,QAAIqB,eAAe,GAAGrB,QAAtB;AACA,QAAIsB,UAAU,GAAG;AAACC,MAAAA,KAAK,EAAE,CAAR;AAAWC,MAAAA,UAAU,EAAE,CAAvB;AAA0BC,MAAAA,MAAM,EAAE;AAAlC,KAAjB;AACAJ,IAAAA,eAAe,CAAChB,GAAhB,CAAqBC,MAAD,IAAY;AAC5B,UAAIA,MAAM,CAACF,QAAP,KAAoB,CAAxB,EAA2B;AACvBkB,QAAAA,UAAU,CAACC,KAAX,IAAoBjB,MAAM,CAACC,KAAP,CAAamB,MAAjC;AACH,OAFD,MAEO,IAAIpB,MAAM,CAACF,QAAP,KAAoBiB,eAAe,CAACK,MAAxC,EAAgD;AACnDJ,QAAAA,UAAU,CAACG,MAAX,IAAqBnB,MAAM,CAACC,KAAP,CAAamB,MAAlC;AACH,OAFM,MAEA;AACHJ,QAAAA,UAAU,CAACE,UAAX,IAAyBlB,MAAM,CAACC,KAAP,CAAamB,MAAtC;AACH;AACJ,KARD;AASAvC,IAAAA,YAAY,CAACmC,UAAD,CAAZ;AACH;;AAED,QAAMb,yBAAyB,GAAIT,QAAD,IAAc;AAC5C,QAAIZ,kBAAkB,GAAG;AAACmC,MAAAA,KAAK,EAAE,CAAR;AAAWC,MAAAA,UAAU,EAAE,CAAvB;AAA0BC,MAAAA,MAAM,EAAE;AAAlC,KAAzB;AACAzB,IAAAA,QAAQ,CAACK,GAAT,CAAaC,MAAM,IAAI;AACnB,UAAIA,MAAM,CAACF,QAAP,KAAoB,CAAxB,EAA2B;AACvBE,QAAAA,MAAM,CAACC,KAAP,CAAaF,GAAb,CAAiBW,IAAI,IAAI;AACrB5B,UAAAA,kBAAkB,CAACmC,KAAnB,IAA4BP,IAAI,CAACW,QAAjC;AACH,SAFD;AAGH,OAJD,MAIO,IAAIrB,MAAM,CAACF,QAAP,KAAoBJ,QAAQ,CAAC0B,MAAjC,EAAyC;AAC5CpB,QAAAA,MAAM,CAACC,KAAP,CAAaF,GAAb,CAAiBW,IAAI,IAAI;AACrB5B,UAAAA,kBAAkB,CAACqC,MAAnB,IAA6BT,IAAI,CAACW,QAAlC;AACH,SAFD;AAGH,OAJM,MAIA;AACHrB,QAAAA,MAAM,CAACC,KAAP,CAAaF,GAAb,CAAiBW,IAAI,IAAI;AACrB5B,UAAAA,kBAAkB,CAACoC,UAAnB,IAAiCR,IAAI,CAACW,QAAtC;AACH,SAFD;AAGH;AACJ,KAdD;AAeAtC,IAAAA,qBAAqB,CAACD,kBAAD,CAArB;AACH,GAlBD;;AAoBA,QAAMwC,YAAY,GAAG,MAAOC,UAAP,IAAsB;AACvC,QAAIC,SAAS,GAAG;AACZC,MAAAA,UAAU,EAAEF,UADA;AAEZG,MAAAA,SAAS,EAAEnD;AAFC,KAAhB;AAIA,UAAMJ,YAAY,CAACmD,YAAb,CAA0BE,SAA1B,CAAN;AACAjC,IAAAA,UAAU;AACb,GAPD;;AASA,QAAMoC,UAAU,GAAG,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAC7C,QAAInB,IAAI,GAAG;AACPmB,MAAAA,QAAQ,EAAEA,QADH;AAEPC,MAAAA,KAAK,EAAEF;AAFA,KAAX;AAIA,UAAMzD,YAAY,CAACwD,UAAb,CAAwBjB,IAAxB,CAAN;AACAnB,IAAAA,UAAU;AAEb,GARD;;AAUA5B,EAAAA,SAAS,CAAC,MAAM;AACZ4B,IAAAA,UAAU;AACb,GAFQ,EAEN,EAFM,CAAT;;AAIA,MAAI,CAACf,OAAL,EAAc;AACV,wBAAO;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAP;AAEH;;AAED,sBACI;AAAK,IAAA,SAAS,EAAE,+BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAE,wBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAE,yBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,OAAO,CAACsD,KAAb,CADJ,CADJ,eAII,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAEtD,OAAO,CAACD,EAA/B;AAAmC,IAAA,YAAY,EAAEC,OAAO,CAACa,YAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,eAKI,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAEb,OAAO,CAACD,EAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,eAMI,oBAAC,oBAAD;AAAsB,IAAA,OAAO,EAAEC,OAAO,CAACiB,KAAR,CAAclB,EAA7C;AACsB,IAAA,UAAU,EAAEgB,UADlC;AAEsB,IAAA,SAAS,EAAEf,OAAO,CAACiB,KAAR,CAAcsC,SAF/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,CADJ,EAaQC,MAAM,CAACC,IAAP,CAAY5B,iBAAiB,CAAC3B,UAAD,CAA7B,EAA2CqB,GAA3C,CAAgDmC,GAAD,IAAS;AACpDrB,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,wBAAO,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAEoB,GAAvB;AAA4B,MAAA,IAAI,EAAE,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH,GAHD,CAbR,eAmBI;AAAK,IAAA,SAAS,EAAE,uBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,UAAD;AAAY,IAAA,GAAG,EAAExD,UAAU,CAACH,EAA5B;AACY,IAAA,KAAK,EAAEG,UADnB;AAEY,IAAA,YAAY,EAAE4C,YAF1B;AAGY,IAAA,UAAU,EAAEK,UAHxB;AAIY,IAAA,YAAY,EAAE9C,YAJ1B;AAKY,IAAA,2BAA2B,EAAEqB,gBALzC;AAMY,IAAA,cAAc,EAAEhB,cAN5B;AAOY,IAAA,kBAAkB,EAAEiB,yBAPhC;AAQY,IAAA,wBAAwB,EAAEG,wBARtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAnBJ,eAgCI;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,cAAD;AAAgB,IAAA,IAAI,EAAE1B,SAAtB;AACgB,IAAA,UAAU,EAAE,YAD5B;AAEgB,IAAA,KAAK,EAAC,+BAFtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAII,oBAAC,cAAD;AAAgB,IAAA,IAAI,EAAEE,kBAAtB;AACgB,IAAA,UAAU,EAAE,OAD5B;AAEgB,IAAA,KAAK,EAAC,uCAFtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CAhCJ,CADJ,MADJ;AA8CH,CAvLD;;AAyLA,eAAeR,WAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {useParams} from \"react-router\";\nimport ScrumTable from \"../../components/ProjectComponents/ScrumTable\";\nimport {ContentContainer} from \"../../Assets/StyledComps/styled\";\nimport UsersModal from \"../../components/ProjectComponents/UsersModal\";\nimport MailModal from \"../../components/MailModal\";\nimport CustomPieChart from \"../../components/ProjectComponents/CustomPieChart\";\nimport ProjectCalls from \"../../Services/ProjectCalls\";\nimport InProgressLimitModal from \"../../components/InProgressLimitModal\";\nimport TaskDistibution from \"../../components/ProjectComponents/taskDistibution\";\n\nconst ProjectPage = () => {\n\n    const {id} = useParams();\n    const [project, setProject] = useState(null);\n    const [scrumTable,setScrumTable] = useState(null);\n    const [taskCount, setTaskCount] = useState({});\n    const [businessValueCount, setBusinessValueCount] = useState({});\n    const [mouseOverAccept, setMouseOverAccept] = useState(false);\n    const [usersOnProject, setUsersOnProject] = useState([]);\n    \n    function getColaboratorsFromProject(project) {\n        return [...project.participants, project.author];\n\n    }\n\n\n    const getProject = async () => {\n\n        let myProject = await ProjectCalls.getProject(id);\n\n        setUsersOnProject(getColaboratorsFromProject(myProject));\n        myProject.table.statuses.sort(function (a, b) {\n            return a.position - b.position;\n        });\n        myProject.table.statuses.map(status => {\n            status.tasks.sort(function (a, b) {\n                return a.position - b.position;\n            })\n        });\n        setScrumTable(myProject.table);\n        setProject(null);\n        setProject(myProject);\n        getTaskChartData(myProject.table.statuses);\n        getBusinessValueChartData(myProject.table.statuses);\n        setUWT(getUsersWithTasks(myProject.table));\n\n    };\n\n    const refreshScrumTableBackend = async () => {\n        let newScrumTable = await ProjectCalls.getScrumTable(project.table.id);\n        newScrumTable.statuses.sort(function (a, b) {\n            return a.position - b.position;\n        });\n        newScrumTable.statuses.map(status =>{\n            status.tasks.sort(function (a,b) {\n                return a.position - b.position;\n            });\n        });\n        getTaskChartData(newScrumTable.statuses);\n        getBusinessValueChartData(newScrumTable.statuses);\n        setUWT(getUsersWithTasks(newScrumTable));\n        setScrumTable(newScrumTable);\n    };\n\n\n    function getUsersWithTasks(scrumTable) {\n        let usersWithTasks = {};\n        scrumTable.statuses.map( (status)=>{\n            status.tasks.map((task)=>{\n                if (task.owner!=null){\n                    let owner=task.owner.username;\n                    usersWithTasks[owner]=(usersWithTasks[owner]||0)+1;\n                }else {\n                    usersWithTasks[\"no owner\"] =(usersWithTasks[\"no owner\"]||0)+1;\n                }\n\n            })\n        });\n        console.log(usersWithTasks);\n        return usersWithTasks;\n\n    }\n\n\n    function getTaskChartData(statuses) {\n        let projectStatuses = statuses;\n        let taskCounts = {start: 0, inProgress: 0, finish: 0};\n        projectStatuses.map((status) => {\n            if (status.position === 1) {\n                taskCounts.start += status.tasks.length;\n            } else if (status.position === projectStatuses.length) {\n                taskCounts.finish += status.tasks.length;\n            } else {\n                taskCounts.inProgress += status.tasks.length;\n            }\n        });\n        setTaskCount(taskCounts);\n    }\n\n    const getBusinessValueChartData = (statuses) => {\n        let businessValueCount = {start: 0, inProgress: 0, finish: 0};\n        statuses.map(status => {\n            if (status.position === 1) {\n                status.tasks.map(task => {\n                    businessValueCount.start += task.priority;\n                })\n            } else if (status.position === statuses.length) {\n                status.tasks.map(task => {\n                    businessValueCount.finish += task.priority;\n                })\n            } else {\n                status.tasks.map(task => {\n                    businessValueCount.inProgress += task.priority;\n                })\n            }\n        });\n        setBusinessValueCount(businessValueCount);\n    };\n\n    const addNewColumn = async (columnName) => {\n        let newStatus = {\n            statusName: columnName,\n            projectId: id\n        };\n        await ProjectCalls.addNewColumn(newStatus);\n        getProject();\n    };\n\n    const addNewTask = async (taskName, statusId) => {\n        let task = {\n            statusId: statusId,\n            title: taskName\n        };\n        await ProjectCalls.addNewTask(task);\n        getProject();\n\n    };\n\n    useEffect(() => {\n        getProject();\n    }, []);\n\n    if (!project) {\n        return <div className=\"loading\">loading....</div>\n\n    }\n\n    return (\n        <div className={\"project_item_container_canvas\"}>\n            <div className={\"project_item_container\"}>\n                <ContentContainer>\n                    <div className={\"project_title_container\"}>\n                        <h2>{project.title}</h2>\n                    </div>\n                    <UsersModal projectId={project.id} participants={project.participants}/>\n                    <MailModal projectId={project.id}/>\n                    <InProgressLimitModal tableId={project.table.id}\n                                          getProject={getProject}\n                                          taskLimit={project.table.taskLimit}\n                    />\n                </ContentContainer>\n                {\n                    Object.keys(getUsersWithTasks(scrumTable)).map((key) => {\n                        console.log(\"mivan\");\n                        return <TaskDistibution user={key} task={\"Uff\"}/>;\n                    })\n                }\n\n                <div className={\"scrum_table_container\"}>\n                    <ScrumTable key={scrumTable.id}\n                                table={scrumTable}\n                                addNewColumn={addNewColumn}\n                                addNewTask={addNewTask}\n                                setTaskCount={setTaskCount}\n                                tasksDistributionInStatuses={getTaskChartData}\n                                usersOnProject={usersOnProject}\n                                countBusinessValue={getBusinessValueChartData}\n                                refreshScrumTableBackend={refreshScrumTableBackend}\n\n                    />\n                </div>\n                <div className=\"chart_container\">\n                    <CustomPieChart data={taskCount}\n                                    visualMark={\"percentage\"}\n                                    label=\"Sprint progress by user story\"/>\n                    <CustomPieChart data={businessValueCount}\n                                    visualMark={\"value\"}\n                                    label=\"Sprint progress by value distribution\"/>\n                </div>\n            </div>\n            }\n        </div>\n    );\n};\n\nexport default ProjectPage;"]},"metadata":{},"sourceType":"module"}