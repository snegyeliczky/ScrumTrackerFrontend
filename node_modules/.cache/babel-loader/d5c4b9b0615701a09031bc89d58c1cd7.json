{"ast":null,"code":"var _jsxFileName = \"/Users/sandornegyeliczky/Desktop/projektek/ScrumTrackerFrontend/frontend/src/components/projectPage/ScrumTable.js\";\nimport React, { useState, useContext, useEffect, useRef } from 'react';\nimport Column from \"./Column\";\nimport axios from \"axios\";\n\nconst ScrumTable = ({\n  table\n}) => {\n  const [statuses, setStatuses] = useState(table.statuses);\n  const [DragItemColumnId, setDragItemColumnId] = useState();\n  const dragItem = useRef(); //dragged task id and status id where it come from\n\n  const deleteStatus = async statusID => {\n    await axios.delete(\"http://localhost:8080/project/deletstatus/\" + statusID);\n    let axiosResponse = await axios.get(\"http://localhost:8080/project/gettable/\" + table.id);\n    setStatuses(axiosResponse.statuses);\n  };\n\n  const uploadStatusChangeToDatabase = async () => {\n    let refreshItem = {\n      toStatusId: DragItemColumnId,\n      fromStatusId: dragItem.current.statusId,\n      taskId: dragItem.current.taskObject.id\n    };\n    await axios.put(\"http://localhost:8080/task/transfer\", refreshItem);\n  };\n\n  const onDragEnter = newStatusId => {\n    setDragItemColumnId(newStatusId);\n  };\n\n  const onDragEnd = () => {\n    setStatuses(refreshStatus(DragItemColumnId));\n    uploadStatusChangeToDatabase();\n  };\n\n  const refreshStatus = newStatusId => {\n    let newStatuses = [...statuses];\n\n    for (let status of newStatuses) {\n      if (status.id === dragItem.current.statusId) {\n        let taskArr = [...status.tasks];\n        let index = taskArr.indexOf(dragItem.current.taskObject);\n\n        if (index > -1) {\n          taskArr.splice(index, 1);\n        }\n\n        status.tasks = taskArr;\n      }\n\n      if (newStatusId === status.id) {\n        status.tasks.push(dragItem.current.taskObject);\n      }\n    }\n\n    return newStatuses;\n  }; //\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"scrum_table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, statuses.map(status => {\n    return /*#__PURE__*/React.createElement(Column, {\n      deleteStatus: deleteStatus,\n      onDragEnd: onDragEnd,\n      dragItem: dragItem,\n      key: status.id,\n      status: status,\n      onDragEnter: onDragEnter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 24\n      }\n    });\n  }));\n};\n\nexport default ScrumTable;","map":{"version":3,"sources":["/Users/sandornegyeliczky/Desktop/projektek/ScrumTrackerFrontend/frontend/src/components/projectPage/ScrumTable.js"],"names":["React","useState","useContext","useEffect","useRef","Column","axios","ScrumTable","table","statuses","setStatuses","DragItemColumnId","setDragItemColumnId","dragItem","deleteStatus","statusID","delete","axiosResponse","get","id","uploadStatusChangeToDatabase","refreshItem","toStatusId","fromStatusId","current","statusId","taskId","taskObject","put","onDragEnter","newStatusId","onDragEnd","refreshStatus","newStatuses","status","taskArr","tasks","index","indexOf","splice","push","map"],"mappings":"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","sourcesContent":["import React, {useState, useContext, useEffect, useRef} from 'react';\nimport Column from \"./Column\";\nimport axios from \"axios\";\n\nconst ScrumTable = ({table}) => {\n\n    const [statuses, setStatuses] = useState(table.statuses);\n    const [DragItemColumnId, setDragItemColumnId] = useState();\n    const dragItem = useRef(); //dragged task id and status id where it come from\n\n    const deleteStatus = async (statusID) => {\n        await axios.delete(\"http://localhost:8080/project/deletstatus/\" + statusID);\n        let axiosResponse = await axios.get(\"http://localhost:8080/project/gettable/\" + table.id);\n        setStatuses(axiosResponse.statuses);\n\n    };\n\n    const uploadStatusChangeToDatabase = async () => {\n        let refreshItem = {\n            toStatusId: DragItemColumnId,\n            fromStatusId: dragItem.current.statusId,\n            taskId: dragItem.current.taskObject.id\n        };\n        await axios.put(\"http://localhost:8080/task/transfer\", refreshItem);\n    };\n\n\n    const onDragEnter = (newStatusId) => {\n        setDragItemColumnId(newStatusId);\n    };\n\n    const onDragEnd = () => {\n        setStatuses(refreshStatus(DragItemColumnId));\n        uploadStatusChangeToDatabase();\n    };\n\n\n    const refreshStatus = (newStatusId) => {\n        let newStatuses = [...statuses];\n        for (let status of newStatuses) {\n            if (status.id === dragItem.current.statusId) {\n                let taskArr = [...status.tasks];\n                let index = taskArr.indexOf(dragItem.current.taskObject);\n                if (index > -1) {\n                    taskArr.splice(index, 1)\n                }\n                status.tasks = taskArr\n            }\n            if (newStatusId === status.id) {\n                status.tasks.push(dragItem.current.taskObject)\n            }\n        }\n        return newStatuses;\n    };\n\n    //\n\n    return (\n        <div className={\"scrum_table\"}>\n            {statuses.map(status => {\n                return <Column\n                    deleteStatus={deleteStatus}\n                    onDragEnd={onDragEnd}\n                    dragItem={dragItem}\n                    key={status.id}\n                    status={status}\n                    onDragEnter={onDragEnter}\n                />\n\n            })}\n        </div>\n    );\n};\n\nexport default ScrumTable;"]},"metadata":{},"sourceType":"module"}