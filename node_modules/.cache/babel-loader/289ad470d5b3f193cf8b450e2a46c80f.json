{"ast":null,"code":"var _jsxFileName = \"/Users/sandornegyeliczky/Desktop/projektek/ScrumTrackerFrontend/frontend/src/components/ProjectComponents/Column.js\";\nimport React, { useState, useRef, useContext, useEffect } from 'react';\nimport Task from \"./Task\";\nimport { DeleteOutlined } from '@ant-design/icons';\nimport axios from \"axios\";\nimport UseComponentVisible from \"../../Utils/UseComponentVisible\";\nimport { ProjectContext } from \"../../Contexts/ProjectContext\";\nimport TaskCalls from \"../../Services/TaskCalls\";\n\nconst Column = ({\n  status,\n  onDragEnter,\n  dragItem,\n  onDragEnd,\n  deleteStatus,\n  refreshStatusesFromBackend,\n  statusFlag,\n  addNewTask\n}) => {\n  const newTaskNameRef = useRef();\n  const {\n    showErrorAlert,\n    showSuccessAlert\n  } = useContext(ProjectContext); //Click outside effect fields\n\n  const {\n    ref,\n    isComponentVisible,\n    setIsComponentVisible\n  } = UseComponentVisible(false);\n\n  const handelDeleteClick = () => {\n    deleteStatus(status.id);\n  };\n\n  const handleDeleteTask = async taskId => {\n    console.log(\"delete\");\n    await TaskCalls.handleDeleteTask(taskId);\n    refreshStatusesFromBackend();\n  };\n\n  const handleAddNewTask = () => {\n    console.log(newTaskNameRef.current.value);\n\n    if (newTaskNameRef.current.value.length < 3) {\n      showErrorAlert(\"please minimum 3 character!\");\n      newTaskNameRef.current.value = \"\";\n      return;\n    }\n\n    let taskName = newTaskNameRef.current.value;\n    addNewTask(taskName, status.id);\n    newTaskNameRef.current.value = \"\";\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"project_column\",\n    onDragEnter: e => onDragEnter(status.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"status_tool_container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(DeleteOutlined, {\n    onClick: handelDeleteClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }\n  }, status.statusName, \" \")), status.tasks.length === 0 ? /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  }, \"No task yet\") : status.tasks.map(task => {\n    return /*#__PURE__*/React.createElement(Task, {\n      refreshStatusesFromBackend: refreshStatusesFromBackend,\n      handleDeleteTask: handleDeleteTask,\n      onDragEnd: onDragEnd,\n      dragItem: dragItem,\n      statusId: status.id,\n      key: task.id,\n      task: task,\n      onDragEnter: onDragEnter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 28\n      }\n    });\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    ref: ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, isComponentVisible && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"add_new_task_container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"add_new_task_text\",\n    ref: newTaskNameRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"add_new_task_btn\",\n    onClick: handleAddNewTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 25\n    }\n  }, \"save\")), !isComponentVisible && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"add_new_task\",\n    onClick: () => setIsComponentVisible(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 21\n    }\n  }, \"add new task\")));\n};\n\nexport default Column;","map":{"version":3,"sources":["/Users/sandornegyeliczky/Desktop/projektek/ScrumTrackerFrontend/frontend/src/components/ProjectComponents/Column.js"],"names":["React","useState","useRef","useContext","useEffect","Task","DeleteOutlined","axios","UseComponentVisible","ProjectContext","TaskCalls","Column","status","onDragEnter","dragItem","onDragEnd","deleteStatus","refreshStatusesFromBackend","statusFlag","addNewTask","newTaskNameRef","showErrorAlert","showSuccessAlert","ref","isComponentVisible","setIsComponentVisible","handelDeleteClick","id","handleDeleteTask","taskId","console","log","handleAddNewTask","current","value","length","taskName","e","statusName","tasks","map","task"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,MAAzB,EAAiCC,UAAjC,EAA6CC,SAA7C,QAA6D,OAA7D;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SACIC,cADJ,QAEO,mBAFP;AAGA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,mBAAP,MAAgC,iCAAhC;AACA,SAAQC,cAAR,QAA6B,+BAA7B;AACA,OAAOC,SAAP,MAAsB,0BAAtB;;AAEA,MAAMC,MAAM,GAAG,CAAC;AAACC,EAAAA,MAAD;AAASC,EAAAA,WAAT;AAAsBC,EAAAA,QAAtB;AAAgCC,EAAAA,SAAhC;AAA2CC,EAAAA,YAA3C;AAAyDC,EAAAA,0BAAzD;AAAqFC,EAAAA,UAArF;AAAiGC,EAAAA;AAAjG,CAAD,KAAkH;AAE7H,QAAMC,cAAc,GAAGlB,MAAM,EAA7B;AACA,QAAM;AAACmB,IAAAA,cAAD;AAAgBC,IAAAA;AAAhB,MAAoCnB,UAAU,CAACM,cAAD,CAApD,CAH6H,CAM7H;;AACA,QAAM;AACFc,IAAAA,GADE;AAEFC,IAAAA,kBAFE;AAGFC,IAAAA;AAHE,MAIFjB,mBAAmB,CAAC,KAAD,CAJvB;;AAMA,QAAMkB,iBAAiB,GAAG,MAAM;AAC5BV,IAAAA,YAAY,CAACJ,MAAM,CAACe,EAAR,CAAZ;AACH,GAFD;;AAIA,QAAMC,gBAAgB,GAAG,MAAOC,MAAP,IAAkB;AACvCC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,UAAMrB,SAAS,CAACkB,gBAAV,CAA2BC,MAA3B,CAAN;AACAZ,IAAAA,0BAA0B;AAC7B,GAJD;;AAMA,QAAMe,gBAAgB,GAAG,MAAM;AAC3BF,IAAAA,OAAO,CAACC,GAAR,CAAYX,cAAc,CAACa,OAAf,CAAuBC,KAAnC;;AACA,QAAId,cAAc,CAACa,OAAf,CAAuBC,KAAvB,CAA6BC,MAA7B,GAAsC,CAA1C,EAA6C;AACzCd,MAAAA,cAAc,CAAC,6BAAD,CAAd;AACAD,MAAAA,cAAc,CAACa,OAAf,CAAuBC,KAAvB,GAA+B,EAA/B;AACA;AACH;;AACD,QAAIE,QAAQ,GAAGhB,cAAc,CAACa,OAAf,CAAuBC,KAAtC;AACAf,IAAAA,UAAU,CAACiB,QAAD,EAAWxB,MAAM,CAACe,EAAlB,CAAV;AACAP,IAAAA,cAAc,CAACa,OAAf,CAAuBC,KAAvB,GAA+B,EAA/B;AACH,GAVD;;AAYA,sBACI;AAAK,IAAA,SAAS,EAAE,gBAAhB;AACK,IAAA,WAAW,EAAGG,CAAD,IAAQxB,WAAW,CAACD,MAAM,CAACe,EAAR,CADrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAE,uBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,cAAD;AAAgB,IAAA,OAAO,EAAED,iBAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKd,MAAM,CAAC0B,UAAZ,MAJJ,CAHJ,EASK1B,MAAM,CAAC2B,KAAP,CAAaJ,MAAb,KAAwB,CAAxB,gBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADH,GAEKvB,MAAM,CAAC2B,KAAP,CAAaC,GAAb,CAAiBC,IAAI,IAAI;AACvB,wBAAO,oBAAC,IAAD;AACH,MAAA,0BAA0B,EAAExB,0BADzB;AAEH,MAAA,gBAAgB,EAAEW,gBAFf;AAGH,MAAA,SAAS,EAAEb,SAHR;AAIH,MAAA,QAAQ,EAAED,QAJP;AAKH,MAAA,QAAQ,EAAEF,MAAM,CAACe,EALd;AAMH,MAAA,GAAG,EAAEc,IAAI,CAACd,EANP;AAOH,MAAA,IAAI,EAAEc,IAPH;AAQH,MAAA,WAAW,EAAE5B,WARV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAUH,GAXC,CAXV,eAuBI;AAAK,IAAA,GAAG,EAAEU,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKC,kBAAkB,iBACf;AAAK,IAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAO,IAAA,SAAS,EAAC,mBAAjB;AAAqC,IAAA,GAAG,EAAEJ,cAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAkC,IAAA,OAAO,EAAEY,gBAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,CAFR,EAOK,CAACR,kBAAD,iBACG;AAAK,IAAA,SAAS,EAAC,cAAf;AAA8B,IAAA,OAAO,EAAE,MAAMC,qBAAqB,CAAC,IAAD,CAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBARR,CAvBJ,CADJ;AAuCH,CA1ED;;AA4EA,eAAed,MAAf","sourcesContent":["import React, {useState, useRef, useContext, useEffect} from 'react';\nimport Task from \"./Task\";\nimport {\n    DeleteOutlined\n} from '@ant-design/icons';\nimport axios from \"axios\";\nimport UseComponentVisible from \"../../Utils/UseComponentVisible\";\nimport {ProjectContext} from \"../../Contexts/ProjectContext\";\nimport TaskCalls from \"../../Services/TaskCalls\";\n\nconst Column = ({status, onDragEnter, dragItem, onDragEnd, deleteStatus, refreshStatusesFromBackend, statusFlag, addNewTask}) => {\n\n    const newTaskNameRef = useRef();\n    const {showErrorAlert,showSuccessAlert} = useContext(ProjectContext);\n\n\n    //Click outside effect fields\n    const {\n        ref,\n        isComponentVisible,\n        setIsComponentVisible\n    } = UseComponentVisible(false);\n\n    const handelDeleteClick = () => {\n        deleteStatus(status.id);\n    };\n\n    const handleDeleteTask = async (taskId) => {\n        console.log(\"delete\");\n        await TaskCalls.handleDeleteTask(taskId);\n        refreshStatusesFromBackend();\n    };\n\n    const handleAddNewTask = () => {\n        console.log(newTaskNameRef.current.value);\n        if (newTaskNameRef.current.value.length < 3) {\n            showErrorAlert(\"please minimum 3 character!\");\n            newTaskNameRef.current.value = \"\";\n            return;\n        }\n        let taskName = newTaskNameRef.current.value;\n        addNewTask(taskName, status.id);\n        newTaskNameRef.current.value = \"\";\n    };\n\n    return (\n        <div className={\"project_column\"}\n             onDragEnter={(e) => (onDragEnter(status.id))}\n        >\n            <div>\n                <div className={\"status_tool_container\"}>\n                    <DeleteOutlined onClick={handelDeleteClick}/>\n                </div>\n                <h3>{status.statusName} </h3>\n            </div>\n            {status.tasks.length === 0 ?\n                <h4>No task yet</h4>\n                : status.tasks.map(task => {\n                    return <Task\n                        refreshStatusesFromBackend={refreshStatusesFromBackend}\n                        handleDeleteTask={handleDeleteTask}\n                        onDragEnd={onDragEnd}\n                        dragItem={dragItem}\n                        statusId={status.id}\n                        key={task.id}\n                        task={task}\n                        onDragEnter={onDragEnter}\n                    />\n                })}\n            <div ref={ref}>\n                {isComponentVisible && (\n                    <div className=\"add_new_task_container\">\n                        <input className=\"add_new_task_text\" ref={newTaskNameRef}/>\n                        <div className=\"add_new_task_btn\" onClick={handleAddNewTask}>save</div>\n                    </div>\n                )}\n                {!isComponentVisible && (\n                    <div className=\"add_new_task\" onClick={() => setIsComponentVisible(true)}>\n                        add new task\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default Column;"]},"metadata":{},"sourceType":"module"}