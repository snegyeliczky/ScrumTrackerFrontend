{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validate = validate;\nexports.checkNoUnwrappedItemOptionPairs = checkNoUnwrappedItemOptionPairs;\n\nvar _plugin = _interopRequireDefault(require(\"../plugin\"));\n\nvar _removed = _interopRequireDefault(require(\"./removed\"));\n\nvar _optionAssertions = require(\"./option-assertions\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst ROOT_VALIDATORS = {\n  cwd: _optionAssertions.assertString,\n  root: _optionAssertions.assertString,\n  rootMode: _optionAssertions.assertRootMode,\n  configFile: _optionAssertions.assertConfigFileSearch,\n  caller: _optionAssertions.assertCallerMetadata,\n  filename: _optionAssertions.assertString,\n  filenameRelative: _optionAssertions.assertString,\n  code: _optionAssertions.assertBoolean,\n  ast: _optionAssertions.assertBoolean,\n  envName: _optionAssertions.assertString\n};\nconst BABELRC_VALIDATORS = {\n  babelrc: _optionAssertions.assertBoolean,\n  babelrcRoots: _optionAssertions.assertBabelrcSearch\n};\nconst NONPRESET_VALIDATORS = {\n  extends: _optionAssertions.assertString,\n  ignore: _optionAssertions.assertIgnoreList,\n  only: _optionAssertions.assertIgnoreList\n};\nconst COMMON_VALIDATORS = {\n  inputSourceMap: _optionAssertions.assertInputSourceMap,\n  presets: _optionAssertions.assertPluginList,\n  plugins: _optionAssertions.assertPluginList,\n  passPerPreset: _optionAssertions.assertBoolean,\n  env: assertEnvSet,\n  overrides: assertOverridesList,\n  test: _optionAssertions.assertConfigApplicableTest,\n  include: _optionAssertions.assertConfigApplicableTest,\n  exclude: _optionAssertions.assertConfigApplicableTest,\n  retainLines: _optionAssertions.assertBoolean,\n  comments: _optionAssertions.assertBoolean,\n  shouldPrintComment: _optionAssertions.assertFunction,\n  compact: _optionAssertions.assertCompact,\n  minified: _optionAssertions.assertBoolean,\n  auxiliaryCommentBefore: _optionAssertions.assertString,\n  auxiliaryCommentAfter: _optionAssertions.assertString,\n  sourceType: _optionAssertions.assertSourceType,\n  wrapPluginVisitorMethod: _optionAssertions.assertFunction,\n  highlightCode: _optionAssertions.assertBoolean,\n  sourceMaps: _optionAssertions.assertSourceMaps,\n  sourceMap: _optionAssertions.assertSourceMaps,\n  sourceFileName: _optionAssertions.assertString,\n  sourceRoot: _optionAssertions.assertString,\n  getModuleId: _optionAssertions.assertFunction,\n  moduleRoot: _optionAssertions.assertString,\n  moduleIds: _optionAssertions.assertBoolean,\n  moduleId: _optionAssertions.assertString,\n  parserOpts: _optionAssertions.assertObject,\n  generatorOpts: _optionAssertions.assertObject\n};\n\nfunction getSource(loc) {\n  return loc.type === \"root\" ? loc.source : getSource(loc.parent);\n}\n\nfunction validate(type, opts) {\n  return validateNested({\n    type: \"root\",\n    source: type\n  }, opts);\n}\n\nfunction validateNested(loc, opts) {\n  const type = getSource(loc);\n  assertNoDuplicateSourcemap(opts);\n  Object.keys(opts).forEach(key => {\n    const optLoc = {\n      type: \"option\",\n      name: key,\n      parent: loc\n    };\n\n    if (type === \"preset\" && NONPRESET_VALIDATORS[key]) {\n      throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is not allowed in preset options`);\n    }\n\n    if (type !== \"arguments\" && ROOT_VALIDATORS[key]) {\n      throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is only allowed in root programmatic options`);\n    }\n\n    if (type !== \"arguments\" && type !== \"configfile\" && BABELRC_VALIDATORS[key]) {\n      if (type === \"babelrcfile\" || type === \"extendsfile\") {\n        throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is not allowed in .babelrc or \"extends\"ed files, only in root programmatic options, ` + `or babel.config.js/config file options`);\n      }\n\n      throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is only allowed in root programmatic options, or babel.config.js/config file options`);\n    }\n\n    const validator = COMMON_VALIDATORS[key] || NONPRESET_VALIDATORS[key] || BABELRC_VALIDATORS[key] || ROOT_VALIDATORS[key] || throwUnknownError;\n    validator(optLoc, opts[key]);\n  });\n  return opts;\n}\n\nfunction throwUnknownError(loc) {\n  const key = loc.name;\n\n  if (_removed.default[key]) {\n    const {\n      message,\n      version = 5\n    } = _removed.default[key];\n    throw new Error(`Using removed Babel ${version} option: ${(0, _optionAssertions.msg)(loc)} - ${message}`);\n  } else {\n    const unknownOptErr = new Error(`Unknown option: ${(0, _optionAssertions.msg)(loc)}. Check out https://babeljs.io/docs/en/babel-core/#options for more information about options.`);\n    unknownOptErr.code = \"BABEL_UNKNOWN_OPTION\";\n    throw unknownOptErr;\n  }\n}\n\nfunction has(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nfunction assertNoDuplicateSourcemap(opts) {\n  if (has(opts, \"sourceMap\") && has(opts, \"sourceMaps\")) {\n    throw new Error(\".sourceMap is an alias for .sourceMaps, cannot use both\");\n  }\n}\n\nfunction assertEnvSet(loc, value) {\n  if (loc.parent.type === \"env\") {\n    throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside of another .env block`);\n  }\n\n  const parent = loc.parent;\n  const obj = (0, _optionAssertions.assertObject)(loc, value);\n\n  if (obj) {\n    for (const envName of Object.keys(obj)) {\n      const env = (0, _optionAssertions.assertObject)((0, _optionAssertions.access)(loc, envName), obj[envName]);\n      if (!env) continue;\n      const envLoc = {\n        type: \"env\",\n        name: envName,\n        parent\n      };\n      validateNested(envLoc, env);\n    }\n  }\n\n  return obj;\n}\n\nfunction assertOverridesList(loc, value) {\n  if (loc.parent.type === \"env\") {\n    throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside an .env block`);\n  }\n\n  if (loc.parent.type === \"overrides\") {\n    throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside an .overrides block`);\n  }\n\n  const parent = loc.parent;\n  const arr = (0, _optionAssertions.assertArray)(loc, value);\n\n  if (arr) {\n    for (const [index, item] of arr.entries()) {\n      const objLoc = (0, _optionAssertions.access)(loc, index);\n      const env = (0, _optionAssertions.assertObject)(objLoc, item);\n      if (!env) throw new Error(`${(0, _optionAssertions.msg)(objLoc)} must be an object`);\n      const overridesLoc = {\n        type: \"overrides\",\n        index,\n        parent\n      };\n      validateNested(overridesLoc, env);\n    }\n  }\n\n  return arr;\n}\n\nfunction checkNoUnwrappedItemOptionPairs(lastItem, thisItem, type, index, e) {\n  if (lastItem.file && lastItem.options === undefined && typeof thisItem.value === \"object\") {\n    e.message += `\\n- Maybe you meant to use\\n` + `\"${type}\": [\\n  [\"${lastItem.file.request}\", ${JSON.stringify(thisItem.value, undefined, 2)}]\\n]\\n` + `To be a valid ${type}, its name and options should be wrapped in a pair of brackets`;\n  }\n}","map":{"version":3,"sources":["/Users/sandornegyeliczky/Desktop/projektek/ScrumTrackerFrontend/frontend/node_modules/@babel/core/lib/config/validation/options.js"],"names":["Object","defineProperty","exports","value","validate","checkNoUnwrappedItemOptionPairs","_plugin","_interopRequireDefault","require","_removed","_optionAssertions","obj","__esModule","default","ROOT_VALIDATORS","cwd","assertString","root","rootMode","assertRootMode","configFile","assertConfigFileSearch","caller","assertCallerMetadata","filename","filenameRelative","code","assertBoolean","ast","envName","BABELRC_VALIDATORS","babelrc","babelrcRoots","assertBabelrcSearch","NONPRESET_VALIDATORS","extends","ignore","assertIgnoreList","only","COMMON_VALIDATORS","inputSourceMap","assertInputSourceMap","presets","assertPluginList","plugins","passPerPreset","env","assertEnvSet","overrides","assertOverridesList","test","assertConfigApplicableTest","include","exclude","retainLines","comments","shouldPrintComment","assertFunction","compact","assertCompact","minified","auxiliaryCommentBefore","auxiliaryCommentAfter","sourceType","assertSourceType","wrapPluginVisitorMethod","highlightCode","sourceMaps","assertSourceMaps","sourceMap","sourceFileName","sourceRoot","getModuleId","moduleRoot","moduleIds","moduleId","parserOpts","assertObject","generatorOpts","getSource","loc","type","source","parent","opts","validateNested","assertNoDuplicateSourcemap","keys","forEach","key","optLoc","name","Error","msg","validator","throwUnknownError","message","version","unknownOptErr","has","prototype","hasOwnProperty","call","access","envLoc","arr","assertArray","index","item","entries","objLoc","overridesLoc","lastItem","thisItem","e","file","options","undefined","request","JSON","stringify"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validate = validate;\nexports.checkNoUnwrappedItemOptionPairs = checkNoUnwrappedItemOptionPairs;\n\nvar _plugin = _interopRequireDefault(require(\"../plugin\"));\n\nvar _removed = _interopRequireDefault(require(\"./removed\"));\n\nvar _optionAssertions = require(\"./option-assertions\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst ROOT_VALIDATORS = {\n  cwd: _optionAssertions.assertString,\n  root: _optionAssertions.assertString,\n  rootMode: _optionAssertions.assertRootMode,\n  configFile: _optionAssertions.assertConfigFileSearch,\n  caller: _optionAssertions.assertCallerMetadata,\n  filename: _optionAssertions.assertString,\n  filenameRelative: _optionAssertions.assertString,\n  code: _optionAssertions.assertBoolean,\n  ast: _optionAssertions.assertBoolean,\n  envName: _optionAssertions.assertString\n};\nconst BABELRC_VALIDATORS = {\n  babelrc: _optionAssertions.assertBoolean,\n  babelrcRoots: _optionAssertions.assertBabelrcSearch\n};\nconst NONPRESET_VALIDATORS = {\n  extends: _optionAssertions.assertString,\n  ignore: _optionAssertions.assertIgnoreList,\n  only: _optionAssertions.assertIgnoreList\n};\nconst COMMON_VALIDATORS = {\n  inputSourceMap: _optionAssertions.assertInputSourceMap,\n  presets: _optionAssertions.assertPluginList,\n  plugins: _optionAssertions.assertPluginList,\n  passPerPreset: _optionAssertions.assertBoolean,\n  env: assertEnvSet,\n  overrides: assertOverridesList,\n  test: _optionAssertions.assertConfigApplicableTest,\n  include: _optionAssertions.assertConfigApplicableTest,\n  exclude: _optionAssertions.assertConfigApplicableTest,\n  retainLines: _optionAssertions.assertBoolean,\n  comments: _optionAssertions.assertBoolean,\n  shouldPrintComment: _optionAssertions.assertFunction,\n  compact: _optionAssertions.assertCompact,\n  minified: _optionAssertions.assertBoolean,\n  auxiliaryCommentBefore: _optionAssertions.assertString,\n  auxiliaryCommentAfter: _optionAssertions.assertString,\n  sourceType: _optionAssertions.assertSourceType,\n  wrapPluginVisitorMethod: _optionAssertions.assertFunction,\n  highlightCode: _optionAssertions.assertBoolean,\n  sourceMaps: _optionAssertions.assertSourceMaps,\n  sourceMap: _optionAssertions.assertSourceMaps,\n  sourceFileName: _optionAssertions.assertString,\n  sourceRoot: _optionAssertions.assertString,\n  getModuleId: _optionAssertions.assertFunction,\n  moduleRoot: _optionAssertions.assertString,\n  moduleIds: _optionAssertions.assertBoolean,\n  moduleId: _optionAssertions.assertString,\n  parserOpts: _optionAssertions.assertObject,\n  generatorOpts: _optionAssertions.assertObject\n};\n\nfunction getSource(loc) {\n  return loc.type === \"root\" ? loc.source : getSource(loc.parent);\n}\n\nfunction validate(type, opts) {\n  return validateNested({\n    type: \"root\",\n    source: type\n  }, opts);\n}\n\nfunction validateNested(loc, opts) {\n  const type = getSource(loc);\n  assertNoDuplicateSourcemap(opts);\n  Object.keys(opts).forEach(key => {\n    const optLoc = {\n      type: \"option\",\n      name: key,\n      parent: loc\n    };\n\n    if (type === \"preset\" && NONPRESET_VALIDATORS[key]) {\n      throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is not allowed in preset options`);\n    }\n\n    if (type !== \"arguments\" && ROOT_VALIDATORS[key]) {\n      throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is only allowed in root programmatic options`);\n    }\n\n    if (type !== \"arguments\" && type !== \"configfile\" && BABELRC_VALIDATORS[key]) {\n      if (type === \"babelrcfile\" || type === \"extendsfile\") {\n        throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is not allowed in .babelrc or \"extends\"ed files, only in root programmatic options, ` + `or babel.config.js/config file options`);\n      }\n\n      throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is only allowed in root programmatic options, or babel.config.js/config file options`);\n    }\n\n    const validator = COMMON_VALIDATORS[key] || NONPRESET_VALIDATORS[key] || BABELRC_VALIDATORS[key] || ROOT_VALIDATORS[key] || throwUnknownError;\n    validator(optLoc, opts[key]);\n  });\n  return opts;\n}\n\nfunction throwUnknownError(loc) {\n  const key = loc.name;\n\n  if (_removed.default[key]) {\n    const {\n      message,\n      version = 5\n    } = _removed.default[key];\n    throw new Error(`Using removed Babel ${version} option: ${(0, _optionAssertions.msg)(loc)} - ${message}`);\n  } else {\n    const unknownOptErr = new Error(`Unknown option: ${(0, _optionAssertions.msg)(loc)}. Check out https://babeljs.io/docs/en/babel-core/#options for more information about options.`);\n    unknownOptErr.code = \"BABEL_UNKNOWN_OPTION\";\n    throw unknownOptErr;\n  }\n}\n\nfunction has(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nfunction assertNoDuplicateSourcemap(opts) {\n  if (has(opts, \"sourceMap\") && has(opts, \"sourceMaps\")) {\n    throw new Error(\".sourceMap is an alias for .sourceMaps, cannot use both\");\n  }\n}\n\nfunction assertEnvSet(loc, value) {\n  if (loc.parent.type === \"env\") {\n    throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside of another .env block`);\n  }\n\n  const parent = loc.parent;\n  const obj = (0, _optionAssertions.assertObject)(loc, value);\n\n  if (obj) {\n    for (const envName of Object.keys(obj)) {\n      const env = (0, _optionAssertions.assertObject)((0, _optionAssertions.access)(loc, envName), obj[envName]);\n      if (!env) continue;\n      const envLoc = {\n        type: \"env\",\n        name: envName,\n        parent\n      };\n      validateNested(envLoc, env);\n    }\n  }\n\n  return obj;\n}\n\nfunction assertOverridesList(loc, value) {\n  if (loc.parent.type === \"env\") {\n    throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside an .env block`);\n  }\n\n  if (loc.parent.type === \"overrides\") {\n    throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside an .overrides block`);\n  }\n\n  const parent = loc.parent;\n  const arr = (0, _optionAssertions.assertArray)(loc, value);\n\n  if (arr) {\n    for (const [index, item] of arr.entries()) {\n      const objLoc = (0, _optionAssertions.access)(loc, index);\n      const env = (0, _optionAssertions.assertObject)(objLoc, item);\n      if (!env) throw new Error(`${(0, _optionAssertions.msg)(objLoc)} must be an object`);\n      const overridesLoc = {\n        type: \"overrides\",\n        index,\n        parent\n      };\n      validateNested(overridesLoc, env);\n    }\n  }\n\n  return arr;\n}\n\nfunction checkNoUnwrappedItemOptionPairs(lastItem, thisItem, type, index, e) {\n  if (lastItem.file && lastItem.options === undefined && typeof thisItem.value === \"object\") {\n    e.message += `\\n- Maybe you meant to use\\n` + `\"${type}\": [\\n  [\"${lastItem.file.request}\", ${JSON.stringify(thisItem.value, undefined, 2)}]\\n]\\n` + `To be a valid ${type}, its name and options should be wrapped in a pair of brackets`;\n  }\n}"]},"metadata":{},"sourceType":"script"}