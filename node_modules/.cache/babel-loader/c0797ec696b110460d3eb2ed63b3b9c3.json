{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findParent = findParent;\nexports.find = find;\nexports.getFunctionParent = getFunctionParent;\nexports.getStatementParent = getStatementParent;\nexports.getEarliestCommonAncestorFrom = getEarliestCommonAncestorFrom;\nexports.getDeepestCommonAncestorFrom = getDeepestCommonAncestorFrom;\nexports.getAncestry = getAncestry;\nexports.isAncestor = isAncestor;\nexports.isDescendant = isDescendant;\nexports.inType = inType;\n\nvar t = _interopRequireWildcard(require(\"@babel/types\"));\n\nvar _index = _interopRequireDefault(require(\"./index\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function () {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction findParent(callback) {\n  let path = this;\n\n  while (path = path.parentPath) {\n    if (callback(path)) return path;\n  }\n\n  return null;\n}\n\nfunction find(callback) {\n  let path = this;\n\n  do {\n    if (callback(path)) return path;\n  } while (path = path.parentPath);\n\n  return null;\n}\n\nfunction getFunctionParent() {\n  return this.findParent(p => p.isFunction());\n}\n\nfunction getStatementParent() {\n  let path = this;\n\n  do {\n    if (!path.parentPath || Array.isArray(path.container) && path.isStatement()) {\n      break;\n    } else {\n      path = path.parentPath;\n    }\n  } while (path);\n\n  if (path && (path.isProgram() || path.isFile())) {\n    throw new Error(\"File/Program node, we can't possibly find a statement parent to this\");\n  }\n\n  return path;\n}\n\nfunction getEarliestCommonAncestorFrom(paths) {\n  return this.getDeepestCommonAncestorFrom(paths, function (deepest, i, ancestries) {\n    let earliest;\n    const keys = t.VISITOR_KEYS[deepest.type];\n\n    for (const ancestry of ancestries) {\n      const path = ancestry[i + 1];\n\n      if (!earliest) {\n        earliest = path;\n        continue;\n      }\n\n      if (path.listKey && earliest.listKey === path.listKey) {\n        if (path.key < earliest.key) {\n          earliest = path;\n          continue;\n        }\n      }\n\n      const earliestKeyIndex = keys.indexOf(earliest.parentKey);\n      const currentKeyIndex = keys.indexOf(path.parentKey);\n\n      if (earliestKeyIndex > currentKeyIndex) {\n        earliest = path;\n      }\n    }\n\n    return earliest;\n  });\n}\n\nfunction getDeepestCommonAncestorFrom(paths, filter) {\n  if (!paths.length) {\n    return this;\n  }\n\n  if (paths.length === 1) {\n    return paths[0];\n  }\n\n  let minDepth = Infinity;\n  let lastCommonIndex, lastCommon;\n  const ancestries = paths.map(path => {\n    const ancestry = [];\n\n    do {\n      ancestry.unshift(path);\n    } while ((path = path.parentPath) && path !== this);\n\n    if (ancestry.length < minDepth) {\n      minDepth = ancestry.length;\n    }\n\n    return ancestry;\n  });\n  const first = ancestries[0];\n\n  depthLoop: for (let i = 0; i < minDepth; i++) {\n    const shouldMatch = first[i];\n\n    for (const ancestry of ancestries) {\n      if (ancestry[i] !== shouldMatch) {\n        break depthLoop;\n      }\n    }\n\n    lastCommonIndex = i;\n    lastCommon = shouldMatch;\n  }\n\n  if (lastCommon) {\n    if (filter) {\n      return filter(lastCommon, lastCommonIndex, ancestries);\n    } else {\n      return lastCommon;\n    }\n  } else {\n    throw new Error(\"Couldn't find intersection\");\n  }\n}\n\nfunction getAncestry() {\n  let path = this;\n  const paths = [];\n\n  do {\n    paths.push(path);\n  } while (path = path.parentPath);\n\n  return paths;\n}\n\nfunction isAncestor(maybeDescendant) {\n  return maybeDescendant.isDescendant(this);\n}\n\nfunction isDescendant(maybeAncestor) {\n  return !!this.findParent(parent => parent === maybeAncestor);\n}\n\nfunction inType() {\n  let path = this;\n\n  while (path) {\n    for (const type of arguments) {\n      if (path.node.type === type) return true;\n    }\n\n    path = path.parentPath;\n  }\n\n  return false;\n}","map":{"version":3,"sources":["/Users/sandornegyeliczky/Desktop/projektek/ScrumTrackerFrontend/frontend/node_modules/@babel/traverse/lib/path/ancestry.js"],"names":["Object","defineProperty","exports","value","findParent","find","getFunctionParent","getStatementParent","getEarliestCommonAncestorFrom","getDeepestCommonAncestorFrom","getAncestry","isAncestor","isDescendant","inType","t","_interopRequireWildcard","require","_index","_interopRequireDefault","obj","__esModule","default","_getRequireWildcardCache","WeakMap","cache","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","callback","path","parentPath","p","isFunction","Array","isArray","container","isStatement","isProgram","isFile","Error","paths","deepest","i","ancestries","earliest","keys","VISITOR_KEYS","type","ancestry","listKey","earliestKeyIndex","indexOf","parentKey","currentKeyIndex","filter","length","minDepth","Infinity","lastCommonIndex","lastCommon","map","unshift","first","depthLoop","shouldMatch","push","maybeDescendant","maybeAncestor","parent","arguments","node"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,UAAR,GAAqBA,UAArB;AACAF,OAAO,CAACG,IAAR,GAAeA,IAAf;AACAH,OAAO,CAACI,iBAAR,GAA4BA,iBAA5B;AACAJ,OAAO,CAACK,kBAAR,GAA6BA,kBAA7B;AACAL,OAAO,CAACM,6BAAR,GAAwCA,6BAAxC;AACAN,OAAO,CAACO,4BAAR,GAAuCA,4BAAvC;AACAP,OAAO,CAACQ,WAAR,GAAsBA,WAAtB;AACAR,OAAO,CAACS,UAAR,GAAqBA,UAArB;AACAT,OAAO,CAACU,YAAR,GAAuBA,YAAvB;AACAV,OAAO,CAACW,MAAR,GAAiBA,MAAjB;;AAEA,IAAIC,CAAC,GAAGC,uBAAuB,CAACC,OAAO,CAAC,cAAD,CAAR,CAA/B;;AAEA,IAAIC,MAAM,GAAGC,sBAAsB,CAACF,OAAO,CAAC,SAAD,CAAR,CAAnC;;AAEA,SAASE,sBAAT,CAAgCC,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEE,IAAAA,OAAO,EAAEF;AAAX,GAArC;AAAwD;;AAE/F,SAASG,wBAAT,GAAoC;AAAE,MAAI,OAAOC,OAAP,KAAmB,UAAvB,EAAmC,OAAO,IAAP;AAAa,MAAIC,KAAK,GAAG,IAAID,OAAJ,EAAZ;;AAA2BD,EAAAA,wBAAwB,GAAG,YAAY;AAAE,WAAOE,KAAP;AAAe,GAAxD;;AAA0D,SAAOA,KAAP;AAAe;;AAE1L,SAAST,uBAAT,CAAiCI,GAAjC,EAAsC;AAAE,MAAIA,GAAG,IAAIA,GAAG,CAACC,UAAf,EAA2B;AAAE,WAAOD,GAAP;AAAa;;AAAC,MAAIA,GAAG,KAAK,IAAR,IAAgB,OAAOA,GAAP,KAAe,QAAf,IAA2B,OAAOA,GAAP,KAAe,UAA9D,EAA0E;AAAE,WAAO;AAAEE,MAAAA,OAAO,EAAEF;AAAX,KAAP;AAA0B;;AAAC,MAAIK,KAAK,GAAGF,wBAAwB,EAApC;;AAAwC,MAAIE,KAAK,IAAIA,KAAK,CAACC,GAAN,CAAUN,GAAV,CAAb,EAA6B;AAAE,WAAOK,KAAK,CAACE,GAAN,CAAUP,GAAV,CAAP;AAAwB;;AAAC,MAAIQ,MAAM,GAAG,EAAb;AAAiB,MAAIC,qBAAqB,GAAG5B,MAAM,CAACC,cAAP,IAAyBD,MAAM,CAAC6B,wBAA5D;;AAAsF,OAAK,IAAIC,GAAT,IAAgBX,GAAhB,EAAqB;AAAE,QAAInB,MAAM,CAAC+B,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCd,GAArC,EAA0CW,GAA1C,CAAJ,EAAoD;AAAE,UAAII,IAAI,GAAGN,qBAAqB,GAAG5B,MAAM,CAAC6B,wBAAP,CAAgCV,GAAhC,EAAqCW,GAArC,CAAH,GAA+C,IAA/E;;AAAqF,UAAII,IAAI,KAAKA,IAAI,CAACR,GAAL,IAAYQ,IAAI,CAACC,GAAtB,CAAR,EAAoC;AAAEnC,QAAAA,MAAM,CAACC,cAAP,CAAsB0B,MAAtB,EAA8BG,GAA9B,EAAmCI,IAAnC;AAA2C,OAAjF,MAAuF;AAAEP,QAAAA,MAAM,CAACG,GAAD,CAAN,GAAcX,GAAG,CAACW,GAAD,CAAjB;AAAyB;AAAE;AAAE;;AAACH,EAAAA,MAAM,CAACN,OAAP,GAAiBF,GAAjB;;AAAsB,MAAIK,KAAJ,EAAW;AAAEA,IAAAA,KAAK,CAACW,GAAN,CAAUhB,GAAV,EAAeQ,MAAf;AAAyB;;AAAC,SAAOA,MAAP;AAAgB;;AAEvuB,SAASvB,UAAT,CAAoBgC,QAApB,EAA8B;AAC5B,MAAIC,IAAI,GAAG,IAAX;;AAEA,SAAOA,IAAI,GAAGA,IAAI,CAACC,UAAnB,EAA+B;AAC7B,QAAIF,QAAQ,CAACC,IAAD,CAAZ,EAAoB,OAAOA,IAAP;AACrB;;AAED,SAAO,IAAP;AACD;;AAED,SAAShC,IAAT,CAAc+B,QAAd,EAAwB;AACtB,MAAIC,IAAI,GAAG,IAAX;;AAEA,KAAG;AACD,QAAID,QAAQ,CAACC,IAAD,CAAZ,EAAoB,OAAOA,IAAP;AACrB,GAFD,QAESA,IAAI,GAAGA,IAAI,CAACC,UAFrB;;AAIA,SAAO,IAAP;AACD;;AAED,SAAShC,iBAAT,GAA6B;AAC3B,SAAO,KAAKF,UAAL,CAAgBmC,CAAC,IAAIA,CAAC,CAACC,UAAF,EAArB,CAAP;AACD;;AAED,SAASjC,kBAAT,GAA8B;AAC5B,MAAI8B,IAAI,GAAG,IAAX;;AAEA,KAAG;AACD,QAAI,CAACA,IAAI,CAACC,UAAN,IAAoBG,KAAK,CAACC,OAAN,CAAcL,IAAI,CAACM,SAAnB,KAAiCN,IAAI,CAACO,WAAL,EAAzD,EAA6E;AAC3E;AACD,KAFD,MAEO;AACLP,MAAAA,IAAI,GAAGA,IAAI,CAACC,UAAZ;AACD;AACF,GAND,QAMSD,IANT;;AAQA,MAAIA,IAAI,KAAKA,IAAI,CAACQ,SAAL,MAAoBR,IAAI,CAACS,MAAL,EAAzB,CAAR,EAAiD;AAC/C,UAAM,IAAIC,KAAJ,CAAU,sEAAV,CAAN;AACD;;AAED,SAAOV,IAAP;AACD;;AAED,SAAS7B,6BAAT,CAAuCwC,KAAvC,EAA8C;AAC5C,SAAO,KAAKvC,4BAAL,CAAkCuC,KAAlC,EAAyC,UAAUC,OAAV,EAAmBC,CAAnB,EAAsBC,UAAtB,EAAkC;AAChF,QAAIC,QAAJ;AACA,UAAMC,IAAI,GAAGvC,CAAC,CAACwC,YAAF,CAAeL,OAAO,CAACM,IAAvB,CAAb;;AAEA,SAAK,MAAMC,QAAX,IAAuBL,UAAvB,EAAmC;AACjC,YAAMd,IAAI,GAAGmB,QAAQ,CAACN,CAAC,GAAG,CAAL,CAArB;;AAEA,UAAI,CAACE,QAAL,EAAe;AACbA,QAAAA,QAAQ,GAAGf,IAAX;AACA;AACD;;AAED,UAAIA,IAAI,CAACoB,OAAL,IAAgBL,QAAQ,CAACK,OAAT,KAAqBpB,IAAI,CAACoB,OAA9C,EAAuD;AACrD,YAAIpB,IAAI,CAACP,GAAL,GAAWsB,QAAQ,CAACtB,GAAxB,EAA6B;AAC3BsB,UAAAA,QAAQ,GAAGf,IAAX;AACA;AACD;AACF;;AAED,YAAMqB,gBAAgB,GAAGL,IAAI,CAACM,OAAL,CAAaP,QAAQ,CAACQ,SAAtB,CAAzB;AACA,YAAMC,eAAe,GAAGR,IAAI,CAACM,OAAL,CAAatB,IAAI,CAACuB,SAAlB,CAAxB;;AAEA,UAAIF,gBAAgB,GAAGG,eAAvB,EAAwC;AACtCT,QAAAA,QAAQ,GAAGf,IAAX;AACD;AACF;;AAED,WAAOe,QAAP;AACD,GA5BM,CAAP;AA6BD;;AAED,SAAS3C,4BAAT,CAAsCuC,KAAtC,EAA6Cc,MAA7C,EAAqD;AACnD,MAAI,CAACd,KAAK,CAACe,MAAX,EAAmB;AACjB,WAAO,IAAP;AACD;;AAED,MAAIf,KAAK,CAACe,MAAN,KAAiB,CAArB,EAAwB;AACtB,WAAOf,KAAK,CAAC,CAAD,CAAZ;AACD;;AAED,MAAIgB,QAAQ,GAAGC,QAAf;AACA,MAAIC,eAAJ,EAAqBC,UAArB;AACA,QAAMhB,UAAU,GAAGH,KAAK,CAACoB,GAAN,CAAU/B,IAAI,IAAI;AACnC,UAAMmB,QAAQ,GAAG,EAAjB;;AAEA,OAAG;AACDA,MAAAA,QAAQ,CAACa,OAAT,CAAiBhC,IAAjB;AACD,KAFD,QAES,CAACA,IAAI,GAAGA,IAAI,CAACC,UAAb,KAA4BD,IAAI,KAAK,IAF9C;;AAIA,QAAImB,QAAQ,CAACO,MAAT,GAAkBC,QAAtB,EAAgC;AAC9BA,MAAAA,QAAQ,GAAGR,QAAQ,CAACO,MAApB;AACD;;AAED,WAAOP,QAAP;AACD,GAZkB,CAAnB;AAaA,QAAMc,KAAK,GAAGnB,UAAU,CAAC,CAAD,CAAxB;;AAEAoB,EAAAA,SAAS,EAAE,KAAK,IAAIrB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGc,QAApB,EAA8Bd,CAAC,EAA/B,EAAmC;AAC5C,UAAMsB,WAAW,GAAGF,KAAK,CAACpB,CAAD,CAAzB;;AAEA,SAAK,MAAMM,QAAX,IAAuBL,UAAvB,EAAmC;AACjC,UAAIK,QAAQ,CAACN,CAAD,CAAR,KAAgBsB,WAApB,EAAiC;AAC/B,cAAMD,SAAN;AACD;AACF;;AAEDL,IAAAA,eAAe,GAAGhB,CAAlB;AACAiB,IAAAA,UAAU,GAAGK,WAAb;AACD;;AAED,MAAIL,UAAJ,EAAgB;AACd,QAAIL,MAAJ,EAAY;AACV,aAAOA,MAAM,CAACK,UAAD,EAAaD,eAAb,EAA8Bf,UAA9B,CAAb;AACD,KAFD,MAEO;AACL,aAAOgB,UAAP;AACD;AACF,GAND,MAMO;AACL,UAAM,IAAIpB,KAAJ,CAAU,4BAAV,CAAN;AACD;AACF;;AAED,SAASrC,WAAT,GAAuB;AACrB,MAAI2B,IAAI,GAAG,IAAX;AACA,QAAMW,KAAK,GAAG,EAAd;;AAEA,KAAG;AACDA,IAAAA,KAAK,CAACyB,IAAN,CAAWpC,IAAX;AACD,GAFD,QAESA,IAAI,GAAGA,IAAI,CAACC,UAFrB;;AAIA,SAAOU,KAAP;AACD;;AAED,SAASrC,UAAT,CAAoB+D,eAApB,EAAqC;AACnC,SAAOA,eAAe,CAAC9D,YAAhB,CAA6B,IAA7B,CAAP;AACD;;AAED,SAASA,YAAT,CAAsB+D,aAAtB,EAAqC;AACnC,SAAO,CAAC,CAAC,KAAKvE,UAAL,CAAgBwE,MAAM,IAAIA,MAAM,KAAKD,aAArC,CAAT;AACD;;AAED,SAAS9D,MAAT,GAAkB;AAChB,MAAIwB,IAAI,GAAG,IAAX;;AAEA,SAAOA,IAAP,EAAa;AACX,SAAK,MAAMkB,IAAX,IAAmBsB,SAAnB,EAA8B;AAC5B,UAAIxC,IAAI,CAACyC,IAAL,CAAUvB,IAAV,KAAmBA,IAAvB,EAA6B,OAAO,IAAP;AAC9B;;AAEDlB,IAAAA,IAAI,GAAGA,IAAI,CAACC,UAAZ;AACD;;AAED,SAAO,KAAP;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findParent = findParent;\nexports.find = find;\nexports.getFunctionParent = getFunctionParent;\nexports.getStatementParent = getStatementParent;\nexports.getEarliestCommonAncestorFrom = getEarliestCommonAncestorFrom;\nexports.getDeepestCommonAncestorFrom = getDeepestCommonAncestorFrom;\nexports.getAncestry = getAncestry;\nexports.isAncestor = isAncestor;\nexports.isDescendant = isDescendant;\nexports.inType = inType;\n\nvar t = _interopRequireWildcard(require(\"@babel/types\"));\n\nvar _index = _interopRequireDefault(require(\"./index\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction findParent(callback) {\n  let path = this;\n\n  while (path = path.parentPath) {\n    if (callback(path)) return path;\n  }\n\n  return null;\n}\n\nfunction find(callback) {\n  let path = this;\n\n  do {\n    if (callback(path)) return path;\n  } while (path = path.parentPath);\n\n  return null;\n}\n\nfunction getFunctionParent() {\n  return this.findParent(p => p.isFunction());\n}\n\nfunction getStatementParent() {\n  let path = this;\n\n  do {\n    if (!path.parentPath || Array.isArray(path.container) && path.isStatement()) {\n      break;\n    } else {\n      path = path.parentPath;\n    }\n  } while (path);\n\n  if (path && (path.isProgram() || path.isFile())) {\n    throw new Error(\"File/Program node, we can't possibly find a statement parent to this\");\n  }\n\n  return path;\n}\n\nfunction getEarliestCommonAncestorFrom(paths) {\n  return this.getDeepestCommonAncestorFrom(paths, function (deepest, i, ancestries) {\n    let earliest;\n    const keys = t.VISITOR_KEYS[deepest.type];\n\n    for (const ancestry of ancestries) {\n      const path = ancestry[i + 1];\n\n      if (!earliest) {\n        earliest = path;\n        continue;\n      }\n\n      if (path.listKey && earliest.listKey === path.listKey) {\n        if (path.key < earliest.key) {\n          earliest = path;\n          continue;\n        }\n      }\n\n      const earliestKeyIndex = keys.indexOf(earliest.parentKey);\n      const currentKeyIndex = keys.indexOf(path.parentKey);\n\n      if (earliestKeyIndex > currentKeyIndex) {\n        earliest = path;\n      }\n    }\n\n    return earliest;\n  });\n}\n\nfunction getDeepestCommonAncestorFrom(paths, filter) {\n  if (!paths.length) {\n    return this;\n  }\n\n  if (paths.length === 1) {\n    return paths[0];\n  }\n\n  let minDepth = Infinity;\n  let lastCommonIndex, lastCommon;\n  const ancestries = paths.map(path => {\n    const ancestry = [];\n\n    do {\n      ancestry.unshift(path);\n    } while ((path = path.parentPath) && path !== this);\n\n    if (ancestry.length < minDepth) {\n      minDepth = ancestry.length;\n    }\n\n    return ancestry;\n  });\n  const first = ancestries[0];\n\n  depthLoop: for (let i = 0; i < minDepth; i++) {\n    const shouldMatch = first[i];\n\n    for (const ancestry of ancestries) {\n      if (ancestry[i] !== shouldMatch) {\n        break depthLoop;\n      }\n    }\n\n    lastCommonIndex = i;\n    lastCommon = shouldMatch;\n  }\n\n  if (lastCommon) {\n    if (filter) {\n      return filter(lastCommon, lastCommonIndex, ancestries);\n    } else {\n      return lastCommon;\n    }\n  } else {\n    throw new Error(\"Couldn't find intersection\");\n  }\n}\n\nfunction getAncestry() {\n  let path = this;\n  const paths = [];\n\n  do {\n    paths.push(path);\n  } while (path = path.parentPath);\n\n  return paths;\n}\n\nfunction isAncestor(maybeDescendant) {\n  return maybeDescendant.isDescendant(this);\n}\n\nfunction isDescendant(maybeAncestor) {\n  return !!this.findParent(parent => parent === maybeAncestor);\n}\n\nfunction inType() {\n  let path = this;\n\n  while (path) {\n    for (const type of arguments) {\n      if (path.node.type === type) return true;\n    }\n\n    path = path.parentPath;\n  }\n\n  return false;\n}"]},"metadata":{},"sourceType":"script"}