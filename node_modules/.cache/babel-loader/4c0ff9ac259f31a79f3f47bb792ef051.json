{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.program = exports.expression = exports.statement = exports.statements = exports.smart = void 0;\n\nfunction makeStatementFormatter(fn) {\n  return {\n    code: str => `/* @babel/template */;\\n${str}`,\n    validate: () => {},\n    unwrap: ast => {\n      return fn(ast.program.body.slice(1));\n    }\n  };\n}\n\nconst smart = makeStatementFormatter(body => {\n  if (body.length > 1) {\n    return body;\n  } else {\n    return body[0];\n  }\n});\nexports.smart = smart;\nconst statements = makeStatementFormatter(body => body);\nexports.statements = statements;\nconst statement = makeStatementFormatter(body => {\n  if (body.length === 0) {\n    throw new Error(\"Found nothing to return.\");\n  }\n\n  if (body.length > 1) {\n    throw new Error(\"Found multiple statements but wanted one\");\n  }\n\n  return body[0];\n});\nexports.statement = statement;\nconst expression = {\n  code: str => `(\\n${str}\\n)`,\n  validate: ({\n    program\n  }) => {\n    if (program.body.length > 1) {\n      throw new Error(\"Found multiple statements but wanted one\");\n    }\n\n    const expression = program.body[0].expression;\n\n    if (expression.start === 0) {\n      throw new Error(\"Parse result included parens.\");\n    }\n  },\n  unwrap: ast => ast.program.body[0].expression\n};\nexports.expression = expression;\nconst program = {\n  code: str => str,\n  validate: () => {},\n  unwrap: ast => ast.program\n};\nexports.program = program;","map":{"version":3,"sources":["/Users/sandornegyeliczky/Desktop/projektek/ScrumTrackerFrontend/frontend/node_modules/@babel/template/lib/formatters.js"],"names":["Object","defineProperty","exports","value","program","expression","statement","statements","smart","makeStatementFormatter","fn","code","str","validate","unwrap","ast","body","slice","length","Error","start"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBF,OAAO,CAACG,UAAR,GAAqBH,OAAO,CAACI,SAAR,GAAoBJ,OAAO,CAACK,UAAR,GAAqBL,OAAO,CAACM,KAAR,GAAgB,KAAK,CAArG;;AAEA,SAASC,sBAAT,CAAgCC,EAAhC,EAAoC;AAClC,SAAO;AACLC,IAAAA,IAAI,EAAEC,GAAG,IAAK,2BAA0BA,GAAI,EADvC;AAELC,IAAAA,QAAQ,EAAE,MAAM,CAAE,CAFb;AAGLC,IAAAA,MAAM,EAAEC,GAAG,IAAI;AACb,aAAOL,EAAE,CAACK,GAAG,CAACX,OAAJ,CAAYY,IAAZ,CAAiBC,KAAjB,CAAuB,CAAvB,CAAD,CAAT;AACD;AALI,GAAP;AAOD;;AAED,MAAMT,KAAK,GAAGC,sBAAsB,CAACO,IAAI,IAAI;AAC3C,MAAIA,IAAI,CAACE,MAAL,GAAc,CAAlB,EAAqB;AACnB,WAAOF,IAAP;AACD,GAFD,MAEO;AACL,WAAOA,IAAI,CAAC,CAAD,CAAX;AACD;AACF,CANmC,CAApC;AAOAd,OAAO,CAACM,KAAR,GAAgBA,KAAhB;AACA,MAAMD,UAAU,GAAGE,sBAAsB,CAACO,IAAI,IAAIA,IAAT,CAAzC;AACAd,OAAO,CAACK,UAAR,GAAqBA,UAArB;AACA,MAAMD,SAAS,GAAGG,sBAAsB,CAACO,IAAI,IAAI;AAC/C,MAAIA,IAAI,CAACE,MAAL,KAAgB,CAApB,EAAuB;AACrB,UAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;AACD;;AAED,MAAIH,IAAI,CAACE,MAAL,GAAc,CAAlB,EAAqB;AACnB,UAAM,IAAIC,KAAJ,CAAU,0CAAV,CAAN;AACD;;AAED,SAAOH,IAAI,CAAC,CAAD,CAAX;AACD,CAVuC,CAAxC;AAWAd,OAAO,CAACI,SAAR,GAAoBA,SAApB;AACA,MAAMD,UAAU,GAAG;AACjBM,EAAAA,IAAI,EAAEC,GAAG,IAAK,MAAKA,GAAI,KADN;AAEjBC,EAAAA,QAAQ,EAAE,CAAC;AACTT,IAAAA;AADS,GAAD,KAEJ;AACJ,QAAIA,OAAO,CAACY,IAAR,CAAaE,MAAb,GAAsB,CAA1B,EAA6B;AAC3B,YAAM,IAAIC,KAAJ,CAAU,0CAAV,CAAN;AACD;;AAED,UAAMd,UAAU,GAAGD,OAAO,CAACY,IAAR,CAAa,CAAb,EAAgBX,UAAnC;;AAEA,QAAIA,UAAU,CAACe,KAAX,KAAqB,CAAzB,EAA4B;AAC1B,YAAM,IAAID,KAAJ,CAAU,+BAAV,CAAN;AACD;AACF,GAdgB;AAejBL,EAAAA,MAAM,EAAEC,GAAG,IAAIA,GAAG,CAACX,OAAJ,CAAYY,IAAZ,CAAiB,CAAjB,EAAoBX;AAflB,CAAnB;AAiBAH,OAAO,CAACG,UAAR,GAAqBA,UAArB;AACA,MAAMD,OAAO,GAAG;AACdO,EAAAA,IAAI,EAAEC,GAAG,IAAIA,GADC;AAEdC,EAAAA,QAAQ,EAAE,MAAM,CAAE,CAFJ;AAGdC,EAAAA,MAAM,EAAEC,GAAG,IAAIA,GAAG,CAACX;AAHL,CAAhB;AAKAF,OAAO,CAACE,OAAR,GAAkBA,OAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.program = exports.expression = exports.statement = exports.statements = exports.smart = void 0;\n\nfunction makeStatementFormatter(fn) {\n  return {\n    code: str => `/* @babel/template */;\\n${str}`,\n    validate: () => {},\n    unwrap: ast => {\n      return fn(ast.program.body.slice(1));\n    }\n  };\n}\n\nconst smart = makeStatementFormatter(body => {\n  if (body.length > 1) {\n    return body;\n  } else {\n    return body[0];\n  }\n});\nexports.smart = smart;\nconst statements = makeStatementFormatter(body => body);\nexports.statements = statements;\nconst statement = makeStatementFormatter(body => {\n  if (body.length === 0) {\n    throw new Error(\"Found nothing to return.\");\n  }\n\n  if (body.length > 1) {\n    throw new Error(\"Found multiple statements but wanted one\");\n  }\n\n  return body[0];\n});\nexports.statement = statement;\nconst expression = {\n  code: str => `(\\n${str}\\n)`,\n  validate: ({\n    program\n  }) => {\n    if (program.body.length > 1) {\n      throw new Error(\"Found multiple statements but wanted one\");\n    }\n\n    const expression = program.body[0].expression;\n\n    if (expression.start === 0) {\n      throw new Error(\"Parse result included parens.\");\n    }\n  },\n  unwrap: ast => ast.program.body[0].expression\n};\nexports.expression = expression;\nconst program = {\n  code: str => str,\n  validate: () => {},\n  unwrap: ast => ast.program\n};\nexports.program = program;"]},"metadata":{},"sourceType":"script"}