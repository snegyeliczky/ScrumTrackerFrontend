{"ast":null,"code":"var _jsxFileName = \"/Users/sandornegyeliczky/Desktop/projektek/ScrumTrackerFrontend/frontend/src/components/ProjectComponents/ScrumTable.js\";\nimport React, { useState, useContext, useEffect, useRef } from 'react';\nimport Column from \"./Column\";\nimport axios from \"axios\";\nimport { ContentContainer } from \"../../Assets/StyledComps/styled\";\nimport { PlusOutlined } from \"@ant-design/icons\";\nimport UseComponentVisible from \"../../Utils/UseComponentVisible\";\nimport ProjectCalls from \"../../Services/ProjectCalls\";\nimport TaskCalls from \"../../Services/TaskCalls\";\nimport { ProjectContext } from \"../../Contexts/ProjectContext\";\n\nconst ScrumTable = ({\n  table,\n  addNewColumn,\n  addNewTask,\n  countBusinessValue,\n  usersOnProject,\n  tasksDistributionInStatuses,\n  refreshScrumTableBackend,\n  projectAuthor\n}) => {\n  const {\n    showErrorAlert,\n    showSuccessAlert\n  } = useContext(ProjectContext);\n  const [statuses, setStatuses] = useState(table.statuses);\n  const newColumnRef = useRef();\n  const [DragItemColumnId, setDragItemColumnId] = useState();\n  const dragItem = useRef(); //dragged task id and status id where it come from\n  //Click outside effect fields\n\n  const {\n    ref,\n    isComponentVisible,\n    setIsComponentVisible\n  } = UseComponentVisible(false);\n\n  const deleteStatus = async statusID => {\n    await ProjectCalls.deleteStatus(statusID, table.id);\n    refreshScrumTableBackend();\n  };\n\n  const refreshStatusesFromBackend = async () => {\n    let ScrumTable = await ProjectCalls.getScrumTable(table.id);\n    ScrumTable.statuses.sort(function (a, b) {\n      return a.position - b.position;\n    });\n    ScrumTable.statuses.map(status => {\n      status.tasks.sort(function (a, b) {\n        return a.position - b.position;\n      });\n    });\n    tasksDistributionInStatuses(ScrumTable.statuses);\n    countBusinessValue(ScrumTable.statuses);\n    setStatuses(ScrumTable.statuses);\n  };\n\n  const uploadStatusChangeToDatabase = async () => {\n    let prevColumn = dragItem.current.statusId;\n    console.log(prevColumn);\n    let refreshItem = {\n      toStatusId: DragItemColumnId,\n      fromStatusId: dragItem.current.statusId,\n      taskId: dragItem.current.taskObject.id\n    };\n\n    try {\n      await TaskCalls.uploadStatusChangeToDatabase(refreshItem);\n    } catch (e) {\n      showErrorAlert(e.response.data.errors); //alert(e.response.data.errors);\n\n      refreshStatusesFromBackend();\n      console.log(prevColumn);\n    }\n  };\n\n  const onDragEnter = newStatusId => {\n    setDragItemColumnId(newStatusId);\n  };\n\n  const onDragEnd = async () => {\n    setStatuses(refreshStatus(DragItemColumnId));\n    await uploadStatusChangeToDatabase();\n  };\n\n  const refreshStatus = newStatusId => {\n    let newStatuses = [...statuses];\n\n    for (let status of newStatuses) {\n      if (status.id === dragItem.current.statusId) {\n        let taskArr = [...status.tasks];\n        let index = taskArr.indexOf(dragItem.current.taskObject);\n\n        if (index > -1) {\n          taskArr.splice(index, 1);\n        }\n\n        status.tasks = taskArr;\n      }\n\n      if (newStatusId === status.id) {\n        status.tasks.push(dragItem.current.taskObject);\n      }\n    }\n\n    tasksDistributionInStatuses(newStatuses);\n    countBusinessValue(newStatuses);\n    return newStatuses;\n  };\n\n  const handleSaveNewColumn = () => {\n    if (newColumnRef.current.value.length < 3) {\n      alert(\"add name (minimum 3 character) to your status\");\n      return;\n    }\n\n    addNewColumn(newColumnRef.current.value);\n    newColumnRef.current.value = \"\";\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"scrum_table\",\n    onDragOver: e => e.preventDefault(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }, statuses.map((status, i) => {\n    let statusFlag = null;\n\n    if (i === 0) {\n      statusFlag = \"start\";\n    }\n\n    if (i === statuses.length - 1) {\n      statusFlag = \"finish\";\n    }\n\n    return /*#__PURE__*/React.createElement(Column, {\n      statusFlag: statusFlag,\n      deleteStatus: deleteStatus,\n      onDragEnd: onDragEnd,\n      dragItem: dragItem,\n      key: status.id,\n      status: status,\n      onDragEnter: onDragEnter,\n      refreshStatusesFromBackend: refreshStatusesFromBackend,\n      addNewTask: addNewTask,\n      usersOnProject: usersOnProject,\n      projectAuthor: projectAuthor,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 28\n      }\n    });\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }\n  }, isComponentVisible && /*#__PURE__*/React.createElement(\"div\", {\n    ref: ref,\n    className: \"add_new_column_container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"add_new_column_text\",\n    ref: newColumnRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"add_new_column_btn\",\n    onClick: handleSaveNewColumn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 25\n    }\n  }, \"save\")), !isComponentVisible && /*#__PURE__*/React.createElement(\"div\", {\n    onClick: () => setIsComponentVisible(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(PlusOutlined, {\n    id: \"add_status_icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 25\n    }\n  }))));\n};\n\nexport default ScrumTable;","map":{"version":3,"sources":["/Users/sandornegyeliczky/Desktop/projektek/ScrumTrackerFrontend/frontend/src/components/ProjectComponents/ScrumTable.js"],"names":["React","useState","useContext","useEffect","useRef","Column","axios","ContentContainer","PlusOutlined","UseComponentVisible","ProjectCalls","TaskCalls","ProjectContext","ScrumTable","table","addNewColumn","addNewTask","countBusinessValue","usersOnProject","tasksDistributionInStatuses","refreshScrumTableBackend","projectAuthor","showErrorAlert","showSuccessAlert","statuses","setStatuses","newColumnRef","DragItemColumnId","setDragItemColumnId","dragItem","ref","isComponentVisible","setIsComponentVisible","deleteStatus","statusID","id","refreshStatusesFromBackend","getScrumTable","sort","a","b","position","map","status","tasks","uploadStatusChangeToDatabase","prevColumn","current","statusId","console","log","refreshItem","toStatusId","fromStatusId","taskId","taskObject","e","response","data","errors","onDragEnter","newStatusId","onDragEnd","refreshStatus","newStatuses","taskArr","index","indexOf","splice","push","handleSaveNewColumn","value","length","alert","preventDefault","i","statusFlag"],"mappings":"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","sourcesContent":["import React, {useState, useContext, useEffect, useRef} from 'react';\nimport Column from \"./Column\";\nimport axios from \"axios\";\nimport {ContentContainer} from \"../../Assets/StyledComps/styled\"\nimport {PlusOutlined} from \"@ant-design/icons\";\nimport UseComponentVisible from \"../../Utils/UseComponentVisible\";\nimport ProjectCalls from \"../../Services/ProjectCalls\";\nimport TaskCalls from \"../../Services/TaskCalls\";\nimport {ProjectContext} from \"../../Contexts/ProjectContext\";\n\nconst ScrumTable = ({\n                        table, addNewColumn, addNewTask, countBusinessValue,\n                        usersOnProject, tasksDistributionInStatuses, refreshScrumTableBackend,\n                        projectAuthor\n                    }) => {\n\n    const {showErrorAlert,showSuccessAlert} = useContext(ProjectContext);\n    const [statuses, setStatuses] = useState(table.statuses);\n    const newColumnRef = useRef();\n    const [DragItemColumnId, setDragItemColumnId] = useState();\n    const dragItem = useRef(); //dragged task id and status id where it come from\n\n\n    //Click outside effect fields\n    const {\n        ref,\n        isComponentVisible,\n        setIsComponentVisible\n    } = UseComponentVisible(false);\n\n\n    const deleteStatus = async (statusID) => {\n        await ProjectCalls.deleteStatus(statusID, table.id);\n        refreshScrumTableBackend();\n    };\n\n    const refreshStatusesFromBackend = async () => {\n        let ScrumTable = await ProjectCalls.getScrumTable(table.id);\n        ScrumTable.statuses.sort(function (a, b) {\n            return a.position - b.position;\n        });\n        ScrumTable.statuses.map(status =>{\n            status.tasks.sort(function (a,b) {\n                return a.position - b.position;\n            });\n        });\n        tasksDistributionInStatuses(ScrumTable.statuses);\n        countBusinessValue(ScrumTable.statuses);\n        setStatuses(ScrumTable.statuses);\n    };\n\n    const uploadStatusChangeToDatabase = async () => {\n        let prevColumn = dragItem.current.statusId;\n        console.log(prevColumn);\n        let refreshItem = {\n            toStatusId: DragItemColumnId,\n            fromStatusId: dragItem.current.statusId,\n            taskId: dragItem.current.taskObject.id\n        };\n        try {\n            await TaskCalls.uploadStatusChangeToDatabase(refreshItem);\n        } catch (e) {\n            showErrorAlert(e.response.data.errors);\n            //alert(e.response.data.errors);\n            refreshStatusesFromBackend();\n            console.log(prevColumn);\n\n        }\n    };\n\n\n    const onDragEnter = (newStatusId) => {\n        setDragItemColumnId(newStatusId);\n    };\n\n    const onDragEnd = async () => {\n        setStatuses(refreshStatus(DragItemColumnId));\n        await uploadStatusChangeToDatabase();\n    };\n\n\n    const refreshStatus = (newStatusId) => {\n        let newStatuses = [...statuses];\n        for (let status of newStatuses) {\n            if (status.id === dragItem.current.statusId) {\n                let taskArr = [...status.tasks];\n                let index = taskArr.indexOf(dragItem.current.taskObject);\n                if (index > -1) {\n                    taskArr.splice(index, 1)\n                }\n                status.tasks = taskArr\n            }\n            if (newStatusId === status.id) {\n                status.tasks.push(dragItem.current.taskObject)\n            }\n        }\n        tasksDistributionInStatuses(newStatuses);\n        countBusinessValue(newStatuses);\n        return newStatuses;\n    };\n\n    const handleSaveNewColumn = () => {\n        if (newColumnRef.current.value.length < 3) {\n            alert(\"add name (minimum 3 character) to your status\");\n            return;\n        }\n        addNewColumn(newColumnRef.current.value);\n        newColumnRef.current.value = \"\";\n\n    };\n\n    return (\n        <div className={\"scrum_table\"}\n             onDragOver={(e) => e.preventDefault()}>\n            {\n                statuses.map((status, i) => {\n                    let statusFlag = null;\n                    if (i === 0) {\n                        statusFlag = \"start\";\n                    }\n                    if (i === statuses.length - 1) {\n                        statusFlag = \"finish\";\n                    }\n\n\n                    return <Column\n                        statusFlag={statusFlag}\n                        deleteStatus={deleteStatus}\n                        onDragEnd={onDragEnd}\n                        dragItem={dragItem}\n                        key={status.id}\n                        status={status}\n                        onDragEnter={onDragEnter}\n                        refreshStatusesFromBackend={refreshStatusesFromBackend}\n                        addNewTask={addNewTask}\n                        usersOnProject={usersOnProject}\n                        projectAuthor = {projectAuthor}\n                    />\n\n                })\n            }\n\n            <div>\n                {isComponentVisible && (\n                    <div ref={ref} className=\"add_new_column_container\">\n                        <input className=\"add_new_column_text\" ref={newColumnRef}/>\n                        <div className=\"add_new_column_btn\" onClick={handleSaveNewColumn}>save</div>\n                    </div>\n                )}\n                {!isComponentVisible && (\n                    <div onClick={() => setIsComponentVisible(true)}>\n                        <PlusOutlined id={\"add_status_icon\"}/>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default ScrumTable;"]},"metadata":{},"sourceType":"module"}