{"ast":null,"code":"var _jsxFileName = \"/Users/sandornegyeliczky/Desktop/projektek/ScrumTrackerFrontend/frontend/src/components/projectPage/ScrumTable.js\";\nimport React, { useState, useContext, useEffect, useRef } from 'react';\nimport Column from \"./Column\";\nimport axios from \"axios\";\n\nconst ScrumTable = ({\n  table\n}) => {\n  const [statuses, setStatuses] = useState(table.statuses);\n  const [loading, setLoading] = useState(false); //dragNDrop\n\n  const [DragItemColumnId, setDragItemColumnId] = useState();\n  const dragItem = useRef(); //dragged task id and status id where it come from\n\n  const refreshStatusesOnBackend = async () => {\n    let refreshItem = {\n      toStatusId: DragItemColumnId,\n      fromStatusId: dragItem.current.statusId,\n      taskId: dragItem.current.taskObject.id\n    };\n    await axios.put(\"http://localhost:8080/task/transfer\", refreshItem);\n  };\n\n  const onDragEnter = newStatusId => {\n    setDragItemColumnId(newStatusId);\n  };\n\n  const onDragEnd = () => {\n    setStatuses(refreshStatus(DragItemColumnId));\n  };\n\n  const refreshStatus = newStatusId => {\n    let newStatuses = [...statuses];\n\n    for (let status of newStatuses) {\n      if (status.id === dragItem.current.statusId) {\n        let taskArr = [];\n\n        for (let task of status.tasks) {\n          if (task.id === dragItem.current.taskObject.id) {\n            continue;\n          }\n\n          taskArr.push(task);\n        }\n\n        status.tasks = taskArr;\n      }\n\n      if (newStatusId === status.id) {\n        status.tasks.push(dragItem.current.taskObject);\n      }\n    }\n\n    return newStatuses;\n  }; //\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"scrumTable\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, statuses.map(status => {\n    return /*#__PURE__*/React.createElement(Column, {\n      onDragEnd: onDragEnd,\n      dragItem: dragItem,\n      key: status.id,\n      status: status,\n      onDragEnter: onDragEnter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 24\n      }\n    });\n  }));\n};\n\nexport default ScrumTable;","map":{"version":3,"sources":["/Users/sandornegyeliczky/Desktop/projektek/ScrumTrackerFrontend/frontend/src/components/projectPage/ScrumTable.js"],"names":["React","useState","useContext","useEffect","useRef","Column","axios","ScrumTable","table","statuses","setStatuses","loading","setLoading","DragItemColumnId","setDragItemColumnId","dragItem","refreshStatusesOnBackend","refreshItem","toStatusId","fromStatusId","current","statusId","taskId","taskObject","id","put","onDragEnter","newStatusId","onDragEnd","refreshStatus","newStatuses","status","taskArr","task","tasks","push","map"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,UAAzB,EAAqCC,SAArC,EAAgDC,MAAhD,QAA6D,OAA7D;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAa;AAE5B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAACO,KAAK,CAACC,QAAP,CAAxC;AACA,QAAM,CAACE,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,KAAD,CAAtC,CAH4B,CAK5B;;AAGA,QAAM,CAACY,gBAAD,EAAmBC,mBAAnB,IAA0Cb,QAAQ,EAAxD;AACA,QAAMc,QAAQ,GAAGX,MAAM,EAAvB,CAT4B,CASD;;AAE3B,QAAMY,wBAAwB,GAAG,YAAY;AACzC,QAAIC,WAAW,GAAG;AACdC,MAAAA,UAAU,EAAEL,gBADE;AAEdM,MAAAA,YAAY,EAAEJ,QAAQ,CAACK,OAAT,CAAiBC,QAFjB;AAGdC,MAAAA,MAAM,EAAEP,QAAQ,CAACK,OAAT,CAAiBG,UAAjB,CAA4BC;AAHtB,KAAlB;AAKA,UAAMlB,KAAK,CAACmB,GAAN,CAAU,qCAAV,EAAgDR,WAAhD,CAAN;AACH,GAPD;;AAUA,QAAMS,WAAW,GAAIC,WAAD,IAAiB;AACjCb,IAAAA,mBAAmB,CAACa,WAAD,CAAnB;AACH,GAFD;;AAIA,QAAMC,SAAS,GAAG,MAAM;AACpBlB,IAAAA,WAAW,CAACmB,aAAa,CAAChB,gBAAD,CAAd,CAAX;AACH,GAFD;;AAKA,QAAMgB,aAAa,GAAIF,WAAD,IAAiB;AACnC,QAAIG,WAAW,GAAG,CAAC,GAAGrB,QAAJ,CAAlB;;AACA,SAAK,IAAIsB,MAAT,IAAmBD,WAAnB,EAAgC;AAC5B,UAAIC,MAAM,CAACP,EAAP,KAAcT,QAAQ,CAACK,OAAT,CAAiBC,QAAnC,EAA6C;AACzC,YAAIW,OAAO,GAAG,EAAd;;AACA,aAAK,IAAIC,IAAT,IAAiBF,MAAM,CAACG,KAAxB,EAA+B;AAC3B,cAAID,IAAI,CAACT,EAAL,KAAYT,QAAQ,CAACK,OAAT,CAAiBG,UAAjB,CAA4BC,EAA5C,EAAgD;AAC5C;AACH;;AACDQ,UAAAA,OAAO,CAACG,IAAR,CAAaF,IAAb;AACH;;AACDF,QAAAA,MAAM,CAACG,KAAP,GAAeF,OAAf;AACH;;AACD,UAAIL,WAAW,KAAKI,MAAM,CAACP,EAA3B,EAA+B;AAC3BO,QAAAA,MAAM,CAACG,KAAP,CAAaC,IAAb,CAAkBpB,QAAQ,CAACK,OAAT,CAAiBG,UAAnC;AACH;AAEJ;;AACD,WAAOO,WAAP;AACH,GAnBD,CA9B4B,CAmD5B;;;AAEA,sBACI;AAAK,IAAA,SAAS,EAAE,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKrB,QAAQ,CAAC2B,GAAT,CAAaL,MAAM,IAAI;AACpB,wBAAO,oBAAC,MAAD;AACH,MAAA,SAAS,EAAEH,SADR;AAEH,MAAA,QAAQ,EAAEb,QAFP;AAGH,MAAA,GAAG,EAAEgB,MAAM,CAACP,EAHT;AAIH,MAAA,MAAM,EAAEO,MAJL;AAKH,MAAA,WAAW,EAAEL,WALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAQH,GATA,CADL,CADJ;AAcH,CAnED;;AAqEA,eAAenB,UAAf","sourcesContent":["import React, {useState, useContext, useEffect, useRef} from 'react';\nimport Column from \"./Column\";\nimport axios from \"axios\";\n\nconst ScrumTable = ({table}) => {\n\n    const [statuses, setStatuses] = useState(table.statuses);\n    const [loading, setLoading] = useState(false);\n\n    //dragNDrop\n\n\n    const [DragItemColumnId, setDragItemColumnId] = useState();\n    const dragItem = useRef(); //dragged task id and status id where it come from\n\n    const refreshStatusesOnBackend = async () => {\n        let refreshItem = {\n            toStatusId: DragItemColumnId,\n            fromStatusId: dragItem.current.statusId,\n            taskId: dragItem.current.taskObject.id\n        };\n        await axios.put(\"http://localhost:8080/task/transfer\",refreshItem);\n    };\n\n\n    const onDragEnter = (newStatusId) => {\n        setDragItemColumnId(newStatusId);\n    };\n\n    const onDragEnd = () => {\n        setStatuses(refreshStatus(DragItemColumnId));\n    };\n\n\n    const refreshStatus = (newStatusId) => {\n        let newStatuses = [...statuses];\n        for (let status of newStatuses) {\n            if (status.id === dragItem.current.statusId) {\n                let taskArr = [];\n                for (let task of status.tasks) {\n                    if (task.id === dragItem.current.taskObject.id) {\n                        continue;\n                    }\n                    taskArr.push(task);\n                }\n                status.tasks = taskArr\n            }\n            if (newStatusId === status.id) {\n                status.tasks.push(dragItem.current.taskObject)\n            }\n\n        }\n        return newStatuses;\n    };\n\n    //\n\n    return (\n        <div className={\"scrumTable\"}>\n            {statuses.map(status => {\n                return <Column\n                    onDragEnd={onDragEnd}\n                    dragItem={dragItem}\n                    key={status.id}\n                    status={status}\n                    onDragEnter={onDragEnter}\n                />\n\n            })}\n        </div>\n    );\n};\n\nexport default ScrumTable;"]},"metadata":{},"sourceType":"module"}