{"ast":null,"code":"var _jsxFileName = \"/Users/sandornegyeliczky/Desktop/projektek/ScrumTrackerFrontend/frontend/src/Pages/ProjectPage/ProjectPage.js\";\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from \"react-router\";\nimport ScrumTable from \"../../components/ProjectComponents/ScrumTable\";\nimport { ContentContainer } from \"../../Assets/StyledComps/styled\";\nimport UsersModal from \"../../components/ProjectComponents/UsersModal\";\nimport MailModal from \"../../components/MailModal\";\nimport CustomPieChart from \"../../components/ProjectComponents/CustomPieChart\";\nimport ProjectCalls from \"../../Services/ProjectCalls\";\nimport InProgressLimitModal from \"../../components/InProgressLimitModal\";\n\nconst ProjectPage = () => {\n  const {\n    id\n  } = useParams();\n  const [project, setProject] = useState(null);\n  const [scrumTable, setScrumTable] = useState(null);\n  const [taskCount, setTaskCount] = useState({});\n  const [businessValueCount, setBusinessValueCount] = useState({});\n  const [mouseOverAccept, setMouseOverAccept] = useState(false);\n  const [usersOnProject, setUsersOnProject] = useState([]);\n\n  function getColaboratorsFromProject(project) {\n    return [...project.participants, project.author];\n  }\n\n  const getProject = async () => {\n    let myProject = await ProjectCalls.getProject(id);\n    setUsersOnProject(getColaboratorsFromProject(myProject));\n    myProject.table.statuses.sort(function (a, b) {\n      return a.position - b.position;\n    });\n    myProject.table.statuses.map(status => {\n      status.tasks.sort(function (a, b) {\n        return a.position - b.position;\n      });\n    });\n    setProject(null);\n    setProject(myProject);\n    console.log(myProject.table);\n    setScrumTable(myProject.table);\n    getTaskChartData(myProject.table.statuses);\n    getBusinessValueChartData(myProject.table.statuses);\n  };\n\n  const refreshScrumTableBackend = async () => {\n    let ScrumTable = await ProjectCalls.getScrumTable(project.table.id);\n    ScrumTable.statuses.sort(function (a, b) {\n      return a.position - b.position;\n    });\n    ScrumTable.statuses.map(status => {\n      status.tasks.sort(function (a, b) {\n        return a.position - b.position;\n      });\n    });\n    getTaskChartData(ScrumTable.statuses);\n    getBusinessValueChartData(ScrumTable.statuses);\n    setScrumTable(ScrumTable);\n  };\n\n  function getTaskChartData(statuses) {\n    let projectStatuses = statuses;\n    let taskCounts = {\n      start: 0,\n      inProgress: 0,\n      finish: 0\n    };\n    projectStatuses.map(status => {\n      if (status.position === 1) {\n        taskCounts.start += status.tasks.length;\n      } else if (status.position === projectStatuses.length) {\n        taskCounts.finish += status.tasks.length;\n      } else {\n        taskCounts.inProgress += status.tasks.length;\n      }\n    });\n    setTaskCount(taskCounts);\n  }\n\n  const getBusinessValueChartData = statuses => {\n    let businessValueCount = {\n      start: 0,\n      inProgress: 0,\n      finish: 0\n    };\n    statuses.map(status => {\n      if (status.position === 1) {\n        status.tasks.map(task => {\n          businessValueCount.start += task.priority;\n        });\n      } else if (status.position === statuses.length) {\n        status.tasks.map(task => {\n          businessValueCount.finish += task.priority;\n        });\n      } else {\n        status.tasks.map(task => {\n          businessValueCount.inProgress += task.priority;\n        });\n      }\n    });\n    setBusinessValueCount(businessValueCount);\n  };\n\n  const addNewColumn = async columnName => {\n    let newStatus = {\n      statusName: columnName,\n      projectId: id\n    };\n    await ProjectCalls.addNewColumn(newStatus);\n    getProject();\n  };\n\n  const addNewTask = async (taskName, statusId) => {\n    let task = {\n      statusId: statusId,\n      title: taskName\n    };\n    await ProjectCalls.addNewTask(task);\n    getProject();\n  };\n\n  useEffect(() => {\n    getProject();\n  }, []);\n\n  if (!project) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"loading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 16\n      }\n    }, \"loading....\");\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"project_item_container_canvas\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"project_item_container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ContentContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"project_title_container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 25\n    }\n  }, project.title)), /*#__PURE__*/React.createElement(UsersModal, {\n    projectId: project.id,\n    participants: project.participants,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(MailModal, {\n    projectId: project.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(InProgressLimitModal, {\n    tableId: project.table.id,\n    getProject: getProject,\n    taskLimit: project.table.taskLimit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"scrum_table_container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ScrumTable, {\n    key: project.table.id,\n    table: scrumTable,\n    addNewColumn: addNewColumn,\n    addNewTask: addNewTask,\n    setTaskCount: setTaskCount,\n    tasksDistributionInStatuses: getTaskChartData,\n    usersOnProject: usersOnProject,\n    refreshScrumTableBackend: refreshScrumTableBackend,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chart_container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(CustomPieChart, {\n    data: taskCount,\n    visualMark: \"percentage\",\n    label: \"Sprint progress by user story\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(CustomPieChart, {\n    data: businessValueCount,\n    visualMark: \"value\",\n    label: \"Sprint progress by value distribution\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 21\n    }\n  }))), \"}\");\n};\n\nexport default ProjectPage;","map":{"version":3,"sources":["/Users/sandornegyeliczky/Desktop/projektek/ScrumTrackerFrontend/frontend/src/Pages/ProjectPage/ProjectPage.js"],"names":["React","useEffect","useState","useParams","ScrumTable","ContentContainer","UsersModal","MailModal","CustomPieChart","ProjectCalls","InProgressLimitModal","ProjectPage","id","project","setProject","scrumTable","setScrumTable","taskCount","setTaskCount","businessValueCount","setBusinessValueCount","mouseOverAccept","setMouseOverAccept","usersOnProject","setUsersOnProject","getColaboratorsFromProject","participants","author","getProject","myProject","table","statuses","sort","a","b","position","map","status","tasks","console","log","getTaskChartData","getBusinessValueChartData","refreshScrumTableBackend","getScrumTable","projectStatuses","taskCounts","start","inProgress","finish","length","task","priority","addNewColumn","columnName","newStatus","statusName","projectId","addNewTask","taskName","statusId","title","taskLimit"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {useParams} from \"react-router\";\nimport ScrumTable from \"../../components/ProjectComponents/ScrumTable\";\nimport {ContentContainer} from \"../../Assets/StyledComps/styled\";\nimport UsersModal from \"../../components/ProjectComponents/UsersModal\";\nimport MailModal from \"../../components/MailModal\";\nimport CustomPieChart from \"../../components/ProjectComponents/CustomPieChart\";\nimport ProjectCalls from \"../../Services/ProjectCalls\";\nimport InProgressLimitModal from \"../../components/InProgressLimitModal\";\n\nconst ProjectPage = () => {\n\n    const {id} = useParams();\n    const [project, setProject] = useState(null);\n    const [scrumTable,setScrumTable] = useState(null);\n    const [taskCount, setTaskCount] = useState({});\n    const [businessValueCount, setBusinessValueCount] = useState({});\n    const [mouseOverAccept, setMouseOverAccept] = useState(false);\n    const [usersOnProject, setUsersOnProject] = useState([]);\n\n    function getColaboratorsFromProject(project) {\n        return [...project.participants, project.author];\n\n    }\n\n\n    const getProject = async () => {\n\n        let myProject = await ProjectCalls.getProject(id);\n\n        setUsersOnProject(getColaboratorsFromProject(myProject));\n        myProject.table.statuses.sort(function (a, b) {\n            return a.position - b.position;\n        });\n        myProject.table.statuses.map(status => {\n            status.tasks.sort(function (a, b) {\n                return a.position - b.position;\n            })\n        });\n        setProject(null);\n        setProject(myProject);\n        console.log(myProject.table);\n        setScrumTable(myProject.table);\n        getTaskChartData(myProject.table.statuses);\n        getBusinessValueChartData(myProject.table.statuses);\n\n    };\n\n    const refreshScrumTableBackend = async () => {\n        let ScrumTable = await ProjectCalls.getScrumTable(project.table.id);\n        ScrumTable.statuses.sort(function (a, b) {\n            return a.position - b.position;\n        });\n        ScrumTable.statuses.map(status =>{\n            status.tasks.sort(function (a,b) {\n                return a.position - b.position;\n            });\n        });\n        getTaskChartData(ScrumTable.statuses);\n        getBusinessValueChartData(ScrumTable.statuses);\n        setScrumTable(ScrumTable);\n    };\n\n\n\n    function getTaskChartData(statuses) {\n        let projectStatuses = statuses;\n        let taskCounts = {start: 0, inProgress: 0, finish: 0};\n        projectStatuses.map((status) => {\n            if (status.position === 1) {\n                taskCounts.start += status.tasks.length;\n            } else if (status.position === projectStatuses.length) {\n                taskCounts.finish += status.tasks.length;\n            } else {\n                taskCounts.inProgress += status.tasks.length;\n            }\n        });\n        setTaskCount(taskCounts);\n    }\n\n    const getBusinessValueChartData = (statuses) => {\n        let businessValueCount = {start: 0, inProgress: 0, finish: 0};\n        statuses.map(status => {\n            if (status.position === 1) {\n                status.tasks.map(task => {\n                    businessValueCount.start += task.priority;\n                })\n            } else if (status.position === statuses.length) {\n                status.tasks.map(task => {\n                    businessValueCount.finish += task.priority;\n                })\n            } else {\n                status.tasks.map(task => {\n                    businessValueCount.inProgress += task.priority;\n                })\n            }\n        });\n        setBusinessValueCount(businessValueCount);\n    };\n\n    const addNewColumn = async (columnName) => {\n        let newStatus = {\n            statusName: columnName,\n            projectId: id\n        };\n        await ProjectCalls.addNewColumn(newStatus);\n        getProject();\n    };\n\n    const addNewTask = async (taskName, statusId) => {\n        let task = {\n            statusId: statusId,\n            title: taskName\n        };\n        await ProjectCalls.addNewTask(task);\n        getProject();\n\n    };\n\n    useEffect(() => {\n        getProject();\n    }, []);\n\n    if (!project) {\n        return <div className=\"loading\">loading....</div>\n\n    }\n\n    return (\n        <div className={\"project_item_container_canvas\"}>\n            <div className={\"project_item_container\"}>\n                <ContentContainer>\n                    <div className={\"project_title_container\"}>\n                        <h2>{project.title}</h2>\n                    </div>\n                    <UsersModal projectId={project.id} participants={project.participants}/>\n                    <MailModal projectId={project.id}/>\n                    <InProgressLimitModal tableId={project.table.id}\n                                          getProject={getProject}\n                                          taskLimit={project.table.taskLimit}\n                    />\n                </ContentContainer>\n                <div className={\"scrum_table_container\"}>\n                    <ScrumTable key={project.table.id}\n                                table={scrumTable}\n                                addNewColumn={addNewColumn}\n                                addNewTask={addNewTask}\n                                setTaskCount={setTaskCount}\n                                tasksDistributionInStatuses={getTaskChartData}\n                                usersOnProject={usersOnProject}\n                                refreshScrumTableBackend={refreshScrumTableBackend}\n\n                    />\n                </div>\n                <div className=\"chart_container\">\n                    <CustomPieChart data={taskCount}\n                                    visualMark={\"percentage\"}\n                                    label=\"Sprint progress by user story\"/>\n                    <CustomPieChart data={businessValueCount}\n                                    visualMark={\"value\"}\n                                    label=\"Sprint progress by value distribution\"/>\n                </div>\n            </div>\n            }\n        </div>\n    );\n};\n\nexport default ProjectPage;"]},"metadata":{},"sourceType":"module"}