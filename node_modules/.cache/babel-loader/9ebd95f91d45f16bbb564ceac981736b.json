{"ast":null,"code":"var _jsxFileName = \"/Users/sandornegyeliczky/Desktop/projektek/ScrumTrackerFrontend/frontend/src/components/mainPage/ProjectPage.js\";\nimport React, { useState, useContext, useEffect, useRef } from 'react';\nimport { useParams } from \"react-router\";\nimport axios from \"axios\";\nimport ScrumTable from \"./ScrumTable\";\n\nconst ProjectPage = () => {\n  const {\n    id\n  } = useParams();\n  const [project, setProject] = useState();\n  const [statuses, setStatuses] = useState();\n  const [loading, setLoading] = useState(true);\n  const newColumnRef = useRef();\n  const newTaskRef = useRef();\n\n  const getProject = async () => {\n    let response = await axios.get(\"http://localhost:8080/project/\" + id);\n    setProject(response.data);\n    setStatuses(response.data.table.statuses);\n    console.log(response.data);\n    console.log(response.data.table.statuses);\n    setLoading(false);\n  };\n\n  const addNewColumn = async columnName => {\n    if (newColumnRef.current.value === null) {\n      alert(\"add name\");\n      return;\n    }\n\n    setLoading(true);\n    columnName = newColumnRef.current.value;\n    let projectId = id;\n    let newStatus = {\n      statusName: columnName,\n      projectId: projectId\n    };\n    await axios.post(\"http://localhost:8080/project/newstatus\", newStatus);\n    getProject();\n  };\n\n  const addNewTask = async description => {\n    if (newTaskRef.current.value === null) {\n      alert(\"add title to the new task\");\n      return;\n    }\n\n    setLoading(true);\n    let projectId = id;\n    let task = {\n      statusId: project.table.statuses[0].id,\n      title: newTaskRef.current.value\n    };\n    await axios.post(\"http://localhost:8080/project/newtask\", task);\n    getProject();\n  };\n\n  useEffect(() => {\n    getProject();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, loading ? /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }\n  }, \"loading....\") : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: addNewColumn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 25\n    }\n  }, \" new status\"), /*#__PURE__*/React.createElement(\"input\", {\n    ref: newColumnRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: addNewTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 25\n    }\n  }, \" new task\"), /*#__PURE__*/React.createElement(\"input\", {\n    ref: newTaskRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(ScrumTable, {\n    key: project.table.id,\n    table: project.table,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 21\n    }\n  })));\n};\n\nexport default ProjectPage;","map":{"version":3,"sources":["/Users/sandornegyeliczky/Desktop/projektek/ScrumTrackerFrontend/frontend/src/components/mainPage/ProjectPage.js"],"names":["React","useState","useContext","useEffect","useRef","useParams","axios","ScrumTable","ProjectPage","id","project","setProject","statuses","setStatuses","loading","setLoading","newColumnRef","newTaskRef","getProject","response","get","data","table","console","log","addNewColumn","columnName","current","value","alert","projectId","newStatus","statusName","post","addNewTask","description","task","statusId","title"],"mappings":"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","sourcesContent":["import React, {useState, useContext, useEffect, useRef} from 'react';\nimport {useParams} from \"react-router\";\nimport axios from \"axios\";\nimport ScrumTable from \"./ScrumTable\";\n\n\nconst ProjectPage = () => {\n\n    const {id} = useParams();\n    const [project, setProject] = useState();\n    const [statuses, setStatuses] = useState();\n    const [loading, setLoading] = useState(true);\n    const newColumnRef = useRef();\n    const newTaskRef = useRef();\n\n    const getProject = async () => {\n        let response = await axios.get(\"http://localhost:8080/project/\" + id);\n        setProject(response.data);\n        setStatuses(response.data.table.statuses);\n        console.log(response.data);\n        console.log(response.data.table.statuses);\n        setLoading(false);\n    };\n\n    const addNewColumn = async (columnName) => {\n        if (newColumnRef.current.value === null) {\n            alert(\"add name\");\n            return;\n        }\n        setLoading(true);\n        columnName = newColumnRef.current.value;\n        let projectId = id;\n        let newStatus = {statusName: columnName, projectId: projectId};\n        await axios.post(\"http://localhost:8080/project/newstatus\", newStatus);\n        getProject();\n    };\n\n    const addNewTask = async (description) => {\n        if (newTaskRef.current.value === null) {\n            alert(\"add title to the new task\");\n            return;\n        }\n        setLoading(true);\n        let projectId = id;\n        let task = {\n            statusId: project.table.statuses[0].id,\n            title: newTaskRef.current.value\n        };\n        await axios.post(\"http://localhost:8080/project/newtask\", task);\n        getProject();\n\n    };\n\n    useEffect(() => {\n        getProject();\n    }, []);\n\n    return (\n        <div>\n            {loading ?\n                <h1>loading....</h1>\n                :\n                <div>\n                    <div>\n                        <button onClick={addNewColumn}> new status</button>\n                        <input ref={newColumnRef}/>\n                    </div>\n                    <div>\n                        <button onClick={addNewTask}> new task</button>\n                        <input ref={newTaskRef}/>\n                    </div>\n\n                    <ScrumTable key={project.table.id} table={project.table}/>\n                </div>\n            }\n\n        </div>\n    );\n};\n\nexport default ProjectPage;"]},"metadata":{},"sourceType":"module"}